// Copyright 2023-2025 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: buf/validate/validate.proto

package validate

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	descriptorpb "google.golang.org/protobuf/types/descriptorpb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Specifies how FieldConstraints.ignore behaves. See the documentation for
// FieldConstraints.required for definitions of "populated" and "nullable".
type Ignore int32

const (
	// Validation is only skipped if it's an unpopulated nullable fields.
	//
	// ```proto
	// syntax="proto3";
	//
	//	message Request {
	//	  // The uri rule applies to any value, including the empty string.
	//	  string foo = 1 [
	//	    (buf.validate.field).string.uri = true
	//	  ];
	//
	//	  // The uri rule only applies if the field is set, including if it's
	//	  // set to the empty string.
	//	  optional string bar = 2 [
	//	    (buf.validate.field).string.uri = true
	//	  ];
	//
	//	  // The min_items rule always applies, even if the list is empty.
	//	  repeated string baz = 3 [
	//	    (buf.validate.field).repeated.min_items = 3
	//	  ];
	//
	//	  // The custom CEL rule applies only if the field is set, including if
	//	  // it's the "zero" value of that message.
	//	  SomeMessage quux = 4 [
	//	    (buf.validate.field).cel = {/* ... */}
	//	  ];
	//	}
	//
	// ```
	Ignore_IGNORE_UNSPECIFIED Ignore = 0
	// Validation is skipped if the field is unpopulated. This rule is redundant
	// if the field is already nullable.
	//
	// ```proto
	// syntax="proto3
	//
	//	message Request {
	//	  // The uri rule applies only if the value is not the empty string.
	//	  string foo = 1 [
	//	    (buf.validate.field).string.uri = true,
	//	    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
	//	  ];
	//
	//	  // IGNORE_IF_UNPOPULATED is equivalent to IGNORE_UNSPECIFIED in this
	//	  // case: the uri rule only applies if the field is set, including if
	//	  // it's set to the empty string.
	//	  optional string bar = 2 [
	//	    (buf.validate.field).string.uri = true,
	//	    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
	//	  ];
	//
	//	  // The min_items rule only applies if the list has at least one item.
	//	  repeated string baz = 3 [
	//	    (buf.validate.field).repeated.min_items = 3,
	//	    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
	//	  ];
	//
	//	  // IGNORE_IF_UNPOPULATED is equivalent to IGNORE_UNSPECIFIED in this
	//	  // case: the custom CEL rule applies only if the field is set, including
	//	  // if it's the "zero" value of that message.
	//	  SomeMessage quux = 4 [
	//	    (buf.validate.field).cel = {/* ... */},
	//	    (buf.validate.field).ignore = IGNORE_IF_UNPOPULATED
	//	  ];
	//	}
	//
	// ```
	Ignore_IGNORE_IF_UNPOPULATED Ignore = 1
	// Validation is skipped if the field is unpopulated or if it is a nullable
	// field populated with its default value. This is typically the zero or
	// empty value, but proto2 scalars support custom defaults. For messages, the
	// default is a non-null message with all its fields unpopulated.
	//
	// ```proto
	// syntax="proto3
	//
	//	message Request {
	//	  // IGNORE_IF_DEFAULT_VALUE is equivalent to IGNORE_IF_UNPOPULATED in
	//	  // this case; the uri rule applies only if the value is not the empty
	//	  // string.
	//	  string foo = 1 [
	//	    (buf.validate.field).string.uri = true,
	//	    (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
	//	  ];
	//
	//	  // The uri rule only applies if the field is set to a value other than
	//	  // the empty string.
	//	  optional string bar = 2 [
	//	    (buf.validate.field).string.uri = true,
	//	    (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
	//	  ];
	//
	//	  // IGNORE_IF_DEFAULT_VALUE is equivalent to IGNORE_IF_UNPOPULATED in
	//	  // this case; the min_items rule only applies if the list has at least
	//	  // one item.
	//	  repeated string baz = 3 [
	//	    (buf.validate.field).repeated.min_items = 3,
	//	    (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
	//	  ];
	//
	//	  // The custom CEL rule only applies if the field is set to a value other
	//	  // than an empty message (i.e., fields are unpopulated).
	//	  SomeMessage quux = 4 [
	//	    (buf.validate.field).cel = {/* ... */},
	//	    (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
	//	  ];
	//	}
	//
	// ```
	//
	// This rule is affected by proto2 custom default values:
	//
	// ```proto
	// syntax="proto2";
	//
	//	message Request {
	//	  // The gt rule only applies if the field is set and it's value is not
	//	  the default (i.e., not -42). The rule even applies if the field is set
	//	  to zero since the default value differs.
	//	  optional int32 value = 1 [
	//	    default = -42,
	//	    (buf.validate.field).int32.gt = 0,
	//	    (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE
	//	  ];
	//	}
	Ignore_IGNORE_IF_DEFAULT_VALUE Ignore = 2
	// The validation rules of this field will be skipped and not evaluated. This
	// is useful for situations that necessitate turning off the rules of a field
	// containing a message that may not make sense in the current context, or to
	// temporarily disable constraints during development.
	//
	// ```proto
	//
	//	message MyMessage {
	//	  // The field's rules will always be ignored, including any validation's
	//	  // on value's fields.
	//	  MyOtherMessage value = 1 [
	//	    (buf.validate.field).ignore = IGNORE_ALWAYS];
	//	}
	//
	// ```
	Ignore_IGNORE_ALWAYS Ignore = 3
)

// Enum value maps for Ignore.
var (
	Ignore_name = map[int32]string{
		0: "IGNORE_UNSPECIFIED",
		1: "IGNORE_IF_UNPOPULATED",
		2: "IGNORE_IF_DEFAULT_VALUE",
		3: "IGNORE_ALWAYS",
	}
	Ignore_value = map[string]int32{
		"IGNORE_UNSPECIFIED":      0,
		"IGNORE_IF_UNPOPULATED":   1,
		"IGNORE_IF_DEFAULT_VALUE": 2,
		"IGNORE_ALWAYS":           3,
	}
)

func (x Ignore) Enum() *Ignore {
	p := new(Ignore)
	*p = x
	return p
}

func (x Ignore) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Ignore) Descriptor() protoreflect.EnumDescriptor {
	return file_buf_validate_validate_proto_enumTypes[0].Descriptor()
}

func (Ignore) Type() protoreflect.EnumType {
	return &file_buf_validate_validate_proto_enumTypes[0]
}

func (x Ignore) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *Ignore) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = Ignore(num)
	return nil
}

// Deprecated: Use Ignore.Descriptor instead.
func (Ignore) EnumDescriptor() ([]byte, []int) {
	return file_buf_validate_validate_proto_rawDescGZIP(), []int{0}
}

// WellKnownRegex contain some well-known patterns.
type KnownRegex int32

const (
	KnownRegex_KNOWN_REGEX_UNSPECIFIED KnownRegex = 0
	// HTTP header name as defined by [RFC 7230](https://datatracker.ietf.org/doc/html/rfc7230#section-3.2).
	KnownRegex_KNOWN_REGEX_HTTP_HEADER_NAME KnownRegex = 1
	// HTTP header value as defined by [RFC 7230](https://datatracker.ietf.org/doc/html/rfc7230#section-3.2.4).
	KnownRegex_KNOWN_REGEX_HTTP_HEADER_VALUE KnownRegex = 2
)

// Enum value maps for KnownRegex.
var (
	KnownRegex_name = map[int32]string{
		0: "KNOWN_REGEX_UNSPECIFIED",
		1: "KNOWN_REGEX_HTTP_HEADER_NAME",
		2: "KNOWN_REGEX_HTTP_HEADER_VALUE",
	}
	KnownRegex_value = map[string]int32{
		"KNOWN_REGEX_UNSPECIFIED":       0,
		"KNOWN_REGEX_HTTP_HEADER_NAME":  1,
		"KNOWN_REGEX_HTTP_HEADER_VALUE": 2,
	}
)

func (x KnownRegex) Enum() *KnownRegex {
	p := new(KnownRegex)
	*p = x
	return p
}

func (x KnownRegex) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KnownRegex) Descriptor() protoreflect.EnumDescriptor {
	return file_buf_validate_validate_proto_enumTypes[1].Descriptor()
}

func (KnownRegex) Type() protoreflect.EnumType {
	return &file_buf_validate_validate_proto_enumTypes[1]
}

func (x KnownRegex) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *KnownRegex) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = KnownRegex(num)
	return nil
}

// Deprecated: Use KnownRegex.Descriptor instead.
func (KnownRegex) EnumDescriptor() ([]byte, []int) {
	return file_buf_validate_validate_proto_rawDescGZIP(), []int{1}
}

// `Constraint` represents a validation rule written in the Common Expression
// Language (CEL) syntax. Each Constraint includes a unique identifier, an
// optional error message, and the CEL expression to evaluate. For more
// information on CEL, [see our documentation](https://github.com/bufbuild/protovalidate/blob/main/docs/cel.md).
//
// ```proto
//
//	message Foo {
//	  option (buf.validate.message).cel = {
//	    id: "foo.bar"
//	    message: "bar must be greater than 0"
//	    expression: "this.bar > 0"
//	  };
//	  int32 bar = 1;
//	}
//
// ```
type Constraint struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// `id` is a string that serves as a machine-readable name for this Constraint.
	// It should be unique within its scope, which could be either a message or a field.
	Id *string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// `message` is an optional field that provides a human-readable error message
	// for this Constraint when the CEL expression evaluates to false. If a
	// non-empty message is provided, any strings resulting from the CEL
	// expression evaluation are ignored.
	Message *string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	// `expression` is the actual CEL expression that will be evaluated for
	// validation. This string must resolve to either a boolean or a string
	// value. If the expression evaluates to false or a non-empty string, the
	// validation is considered failed, and the message is rejected.
	Expression    *string `protobuf:"bytes,3,opt,name=expression" json:"expression,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Constraint) Reset() {
	*x = Constraint{}
	mi := &file_buf_validate_validate_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Constraint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Constraint) ProtoMessage() {}

func (x *Constraint) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_validate_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Constraint.ProtoReflect.Descriptor instead.
func (*Constraint) Descriptor() ([]byte, []int) {
	return file_buf_validate_validate_proto_rawDescGZIP(), []int{0}
}

func (x *Constraint) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Constraint) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *Constraint) GetExpression() string {
	if x != nil && x.Expression != nil {
		return *x.Expression
	}
	return ""
}

// MessageConstraints represents validation rules that are applied to the entire message.
// It includes disabling options and a list of Constraint messages representing Common Expression Language (CEL) validation rules.
type MessageConstraints struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// `disabled` is a boolean flag that, when set to true, nullifies any validation rules for this message.
	// This includes any fields within the message that would otherwise support validation.
	//
	// ```proto
	//
	//	message MyMessage {
	//	  // validation will be bypassed for this message
	//	  option (buf.validate.message).disabled = true;
	//	}
	//
	// ```
	Disabled *bool `protobuf:"varint,1,opt,name=disabled" json:"disabled,omitempty"`
	// `cel` is a repeated field of type Constraint. Each Constraint specifies a validation rule to be applied to this message.
	// These constraints are written in Common Expression Language (CEL) syntax. For more information on
	// CEL, [see our documentation](https://github.com/bufbuild/protovalidate/blob/main/docs/cel.md).
	//
	// ```proto
	//
	//	message MyMessage {
	//	  // The field `foo` must be greater than 42.
	//	  option (buf.validate.message).cel = {
	//	    id: "my_message.value",
	//	    message: "value must be greater than 42",
	//	    expression: "this.foo > 42",
	//	  };
	//	  optional int32 foo = 1;
	//	}
	//
	// ```
	Cel           []*Constraint `protobuf:"bytes,3,rep,name=cel" json:"cel,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessageConstraints) Reset() {
	*x = MessageConstraints{}
	mi := &file_buf_validate_validate_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageConstraints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageConstraints) ProtoMessage() {}

func (x *MessageConstraints) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_validate_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageConstraints.ProtoReflect.Descriptor instead.
func (*MessageConstraints) Descriptor() ([]byte, []int) {
	return file_buf_validate_validate_proto_rawDescGZIP(), []int{1}
}

func (x *MessageConstraints) GetDisabled() bool {
	if x != nil && x.Disabled != nil {
		return *x.Disabled
	}
	return false
}

func (x *MessageConstraints) GetCel() []*Constraint {
	if x != nil {
		return x.Cel
	}
	return nil
}

// The `OneofConstraints` message type enables you to manage constraints for
// oneof fields in your protobuf messages.
type OneofConstraints struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If `required` is true, exactly one field of the oneof must be present. A
	// validation error is returned if no fields in the oneof are present. The
	// field itself may still be a default value; further constraints
	// should be placed on the fields themselves to ensure they are valid values,
	// such as `min_len` or `gt`.
	//
	// ```proto
	//
	//	message MyMessage {
	//	  oneof value {
	//	    // Either `a` or `b` must be set. If `a` is set, it must also be
	//	    // non-empty; whereas if `b` is set, it can still be an empty string.
	//	    option (buf.validate.oneof).required = true;
	//	    string a = 1 [(buf.validate.field).string.min_len = 1];
	//	    string b = 2;
	//	  }
	//	}
	//
	// ```
	Required      *bool `protobuf:"varint,1,opt,name=required" json:"required,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *OneofConstraints) Reset() {
	*x = OneofConstraints{}
	mi := &file_buf_validate_validate_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *OneofConstraints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneofConstraints) ProtoMessage() {}

func (x *OneofConstraints) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_validate_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneofConstraints.ProtoReflect.Descriptor instead.
func (*OneofConstraints) Descriptor() ([]byte, []int) {
	return file_buf_validate_validate_proto_rawDescGZIP(), []int{2}
}

func (x *OneofConstraints) GetRequired() bool {
	if x != nil && x.Required != nil {
		return *x.Required
	}
	return false
}

// FieldConstraints encapsulates the rules for each type of field. Depending on
// the field, the correct set should be used to ensure proper validations.
type FieldConstraints struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// `cel` is a repeated field used to represent a textual expression
	// in the Common Expression Language (CEL) syntax. For more information on
	// CEL, [see our documentation](https://github.com/bufbuild/protovalidate/blob/main/docs/cel.md).
	//
	// ```proto
	//
	//	message MyMessage {
	//	  // The field `value` must be greater than 42.
	//	  optional int32 value = 1 [(buf.validate.field).cel = {
	//	    id: "my_message.value",
	//	    message: "value must be greater than 42",
	//	    expression: "this > 42",
	//	  }];
	//	}
	//
	// ```
	Cel []*Constraint `protobuf:"bytes,23,rep,name=cel" json:"cel,omitempty"`
	// If `required` is true, the field must be populated. A populated field can be
	// described as "serialized in the wire format," which includes:
	//
	// - the following "nullable" fields must be explicitly set to be considered populated:
	//   - singular message fields (whose fields may be unpopulated/default values)
	//   - member fields of a oneof (may be their default value)
	//   - proto3 optional fields (may be their default value)
	//   - proto2 scalar fields (both optional and required)
	//
	// - proto3 scalar fields must be non-zero to be considered populated
	// - repeated and map fields must be non-empty to be considered populated
	//
	// ```proto
	//
	//	message MyMessage {
	//	  // The field `value` must be set to a non-null value.
	//	  optional MyOtherMessage value = 1 [(buf.validate.field).required = true];
	//	}
	//
	// ```
	Required *bool `protobuf:"varint,25,opt,name=required" json:"required,omitempty"`
	// Skip validation on the field if its value matches the specified criteria.
	// See Ignore enum for details.
	//
	// ```proto
	//
	//	message UpdateRequest {
	//	  // The uri rule only applies if the field is populated and not an empty
	//	  // string.
	//	  optional string url = 1 [
	//	    (buf.validate.field).ignore = IGNORE_IF_DEFAULT_VALUE,
	//	    (buf.validate.field).string.uri = true,
	//	  ];
	//	}
	//
	// ```
	Ignore *Ignore `protobuf:"varint,27,opt,name=ignore,enum=buf.validate.Ignore" json:"ignore,omitempty"`
	// Types that are valid to be assigned to Type:
	//
	//	*FieldConstraints_Float
	//	*FieldConstraints_Double
	//	*FieldConstraints_Int32
	//	*FieldConstraints_Int64
	//	*FieldConstraints_Uint32
	//	*FieldConstraints_Uint64
	//	*FieldConstraints_Sint32
	//	*FieldConstraints_Sint64
	//	*FieldConstraints_Fixed32
	//	*FieldConstraints_Fixed64
	//	*FieldConstraints_Sfixed32
	//	*FieldConstraints_Sfixed64
	//	*FieldConstraints_Bool
	//	*FieldConstraints_String_
	//	*FieldConstraints_Bytes
	//	*FieldConstraints_Enum
	//	*FieldConstraints_Repeated
	//	*FieldConstraints_Map
	//	*FieldConstraints_Any
	//	*FieldConstraints_Duration
	//	*FieldConstraints_Timestamp
	Type          isFieldConstraints_Type `protobuf_oneof:"type"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FieldConstraints) Reset() {
	*x = FieldConstraints{}
	mi := &file_buf_validate_validate_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldConstraints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldConstraints) ProtoMessage() {}

func (x *FieldConstraints) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_validate_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldConstraints.ProtoReflect.Descriptor instead.
func (*FieldConstraints) Descriptor() ([]byte, []int) {
	return file_buf_validate_validate_proto_rawDescGZIP(), []int{3}
}

func (x *FieldConstraints) GetCel() []*Constraint {
	if x != nil {
		return x.Cel
	}
	return nil
}

func (x *FieldConstraints) GetRequired() bool {
	if x != nil && x.Required != nil {
		return *x.Required
	}
	return false
}

func (x *FieldConstraints) GetIgnore() Ignore {
	if x != nil && x.Ignore != nil {
		return *x.Ignore
	}
	return Ignore_IGNORE_UNSPECIFIED
}

func (x *FieldConstraints) GetType() isFieldConstraints_Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *FieldConstraints) GetFloat() *FloatRules {
	if x != nil {
		if x, ok := x.Type.(*FieldConstraints_Float); ok {
			return x.Float
		}
	}
	return nil
}

func (x *FieldConstraints) GetDouble() *DoubleRules {
	if x != nil {
		if x, ok := x.Type.(*FieldConstraints_Double); ok {
			return x.Double
		}
	}
	return nil
}

func (x *FieldConstraints) GetInt32() *Int32Rules {
	if x != nil {
		if x, ok := x.Type.(*FieldConstraints_Int32); ok {
			return x.Int32
		}
	}
	return nil
}

func (x *FieldConstraints) GetInt64() *Int64Rules {
	if x != nil {
		if x, ok := x.Type.(*FieldConstraints_Int64); ok {
			return x.Int64
		}
	}
	return nil
}

func (x *FieldConstraints) GetUint32() *UInt32Rules {
	if x != nil {
		if x, ok := x.Type.(*FieldConstraints_Uint32); ok {
			return x.Uint32
		}
	}
	return nil
}

func (x *FieldConstraints) GetUint64() *UInt64Rules {
	if x != nil {
		if x, ok := x.Type.(*FieldConstraints_Uint64); ok {
			return x.Uint64
		}
	}
	return nil
}

func (x *FieldConstraints) GetSint32() *SInt32Rules {
	if x != nil {
		if x, ok := x.Type.(*FieldConstraints_Sint32); ok {
			return x.Sint32
		}
	}
	return nil
}

func (x *FieldConstraints) GetSint64() *SInt64Rules {
	if x != nil {
		if x, ok := x.Type.(*FieldConstraints_Sint64); ok {
			return x.Sint64
		}
	}
	return nil
}

func (x *FieldConstraints) GetFixed32() *Fixed32Rules {
	if x != nil {
		if x, ok := x.Type.(*FieldConstraints_Fixed32); ok {
			return x.Fixed32
		}
	}
	return nil
}

func (x *FieldConstraints) GetFixed64() *Fixed64Rules {
	if x != nil {
		if x, ok := x.Type.(*FieldConstraints_Fixed64); ok {
			return x.Fixed64
		}
	}
	return nil
}

func (x *FieldConstraints) GetSfixed32() *SFixed32Rules {
	if x != nil {
		if x, ok := x.Type.(*FieldConstraints_Sfixed32); ok {
			return x.Sfixed32
		}
	}
	return nil
}

func (x *FieldConstraints) GetSfixed64() *SFixed64Rules {
	if x != nil {
		if x, ok := x.Type.(*FieldConstraints_Sfixed64); ok {
			return x.Sfixed64
		}
	}
	return nil
}

func (x *FieldConstraints) GetBool() *BoolRules {
	if x != nil {
		if x, ok := x.Type.(*FieldConstraints_Bool); ok {
			return x.Bool
		}
	}
	return nil
}

func (x *FieldConstraints) GetString_() *StringRules {
	if x != nil {
		if x, ok := x.Type.(*FieldConstraints_String_); ok {
			return x.String_
		}
	}
	return nil
}

func (x *FieldConstraints) GetBytes() *BytesRules {
	if x != nil {
		if x, ok := x.Type.(*FieldConstraints_Bytes); ok {
			return x.Bytes
		}
	}
	return nil
}

func (x *FieldConstraints) GetEnum() *EnumRules {
	if x != nil {
		if x, ok := x.Type.(*FieldConstraints_Enum); ok {
			return x.Enum
		}
	}
	return nil
}

func (x *FieldConstraints) GetRepeated() *RepeatedRules {
	if x != nil {
		if x, ok := x.Type.(*FieldConstraints_Repeated); ok {
			return x.Repeated
		}
	}
	return nil
}

func (x *FieldConstraints) GetMap() *MapRules {
	if x != nil {
		if x, ok := x.Type.(*FieldConstraints_Map); ok {
			return x.Map
		}
	}
	return nil
}

func (x *FieldConstraints) GetAny() *AnyRules {
	if x != nil {
		if x, ok := x.Type.(*FieldConstraints_Any); ok {
			return x.Any
		}
	}
	return nil
}

func (x *FieldConstraints) GetDuration() *DurationRules {
	if x != nil {
		if x, ok := x.Type.(*FieldConstraints_Duration); ok {
			return x.Duration
		}
	}
	return nil
}

func (x *FieldConstraints) GetTimestamp() *TimestampRules {
	if x != nil {
		if x, ok := x.Type.(*FieldConstraints_Timestamp); ok {
			return x.Timestamp
		}
	}
	return nil
}

type isFieldConstraints_Type interface {
	isFieldConstraints_Type()
}

type FieldConstraints_Float struct {
	// Scalar Field Types
	Float *FloatRules `protobuf:"bytes,1,opt,name=float,oneof"`
}

type FieldConstraints_Double struct {
	Double *DoubleRules `protobuf:"bytes,2,opt,name=double,oneof"`
}

type FieldConstraints_Int32 struct {
	Int32 *Int32Rules `protobuf:"bytes,3,opt,name=int32,oneof"`
}

type FieldConstraints_Int64 struct {
	Int64 *Int64Rules `protobuf:"bytes,4,opt,name=int64,oneof"`
}

type FieldConstraints_Uint32 struct {
	Uint32 *UInt32Rules `protobuf:"bytes,5,opt,name=uint32,oneof"`
}

type FieldConstraints_Uint64 struct {
	Uint64 *UInt64Rules `protobuf:"bytes,6,opt,name=uint64,oneof"`
}

type FieldConstraints_Sint32 struct {
	Sint32 *SInt32Rules `protobuf:"bytes,7,opt,name=sint32,oneof"`
}

type FieldConstraints_Sint64 struct {
	Sint64 *SInt64Rules `protobuf:"bytes,8,opt,name=sint64,oneof"`
}

type FieldConstraints_Fixed32 struct {
	Fixed32 *Fixed32Rules `protobuf:"bytes,9,opt,name=fixed32,oneof"`
}

type FieldConstraints_Fixed64 struct {
	Fixed64 *Fixed64Rules `protobuf:"bytes,10,opt,name=fixed64,oneof"`
}

type FieldConstraints_Sfixed32 struct {
	Sfixed32 *SFixed32Rules `protobuf:"bytes,11,opt,name=sfixed32,oneof"`
}

type FieldConstraints_Sfixed64 struct {
	Sfixed64 *SFixed64Rules `protobuf:"bytes,12,opt,name=sfixed64,oneof"`
}

type FieldConstraints_Bool struct {
	Bool *BoolRules `protobuf:"bytes,13,opt,name=bool,oneof"`
}

type FieldConstraints_String_ struct {
	String_ *StringRules `protobuf:"bytes,14,opt,name=string,oneof"`
}

type FieldConstraints_Bytes struct {
	Bytes *BytesRules `protobuf:"bytes,15,opt,name=bytes,oneof"`
}

type FieldConstraints_Enum struct {
	// Complex Field Types
	Enum *EnumRules `protobuf:"bytes,16,opt,name=enum,oneof"`
}

type FieldConstraints_Repeated struct {
	Repeated *RepeatedRules `protobuf:"bytes,18,opt,name=repeated,oneof"`
}

type FieldConstraints_Map struct {
	Map *MapRules `protobuf:"bytes,19,opt,name=map,oneof"`
}

type FieldConstraints_Any struct {
	// Well-Known Field Types
	Any *AnyRules `protobuf:"bytes,20,opt,name=any,oneof"`
}

type FieldConstraints_Duration struct {
	Duration *DurationRules `protobuf:"bytes,21,opt,name=duration,oneof"`
}

type FieldConstraints_Timestamp struct {
	Timestamp *TimestampRules `protobuf:"bytes,22,opt,name=timestamp,oneof"`
}

func (*FieldConstraints_Float) isFieldConstraints_Type() {}

func (*FieldConstraints_Double) isFieldConstraints_Type() {}

func (*FieldConstraints_Int32) isFieldConstraints_Type() {}

func (*FieldConstraints_Int64) isFieldConstraints_Type() {}

func (*FieldConstraints_Uint32) isFieldConstraints_Type() {}

func (*FieldConstraints_Uint64) isFieldConstraints_Type() {}

func (*FieldConstraints_Sint32) isFieldConstraints_Type() {}

func (*FieldConstraints_Sint64) isFieldConstraints_Type() {}

func (*FieldConstraints_Fixed32) isFieldConstraints_Type() {}

func (*FieldConstraints_Fixed64) isFieldConstraints_Type() {}

func (*FieldConstraints_Sfixed32) isFieldConstraints_Type() {}

func (*FieldConstraints_Sfixed64) isFieldConstraints_Type() {}

func (*FieldConstraints_Bool) isFieldConstraints_Type() {}

func (*FieldConstraints_String_) isFieldConstraints_Type() {}

func (*FieldConstraints_Bytes) isFieldConstraints_Type() {}

func (*FieldConstraints_Enum) isFieldConstraints_Type() {}

func (*FieldConstraints_Repeated) isFieldConstraints_Type() {}

func (*FieldConstraints_Map) isFieldConstraints_Type() {}

func (*FieldConstraints_Any) isFieldConstraints_Type() {}

func (*FieldConstraints_Duration) isFieldConstraints_Type() {}

func (*FieldConstraints_Timestamp) isFieldConstraints_Type() {}

// PredefinedConstraints are custom constraints that can be re-used with
// multiple fields.
type PredefinedConstraints struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// `cel` is a repeated field used to represent a textual expression
	// in the Common Expression Language (CEL) syntax. For more information on
	// CEL, [see our documentation](https://github.com/bufbuild/protovalidate/blob/main/docs/cel.md).
	//
	// ```proto
	//
	//	message MyMessage {
	//	  // The field `value` must be greater than 42.
	//	  optional int32 value = 1 [(buf.validate.predefined).cel = {
	//	    id: "my_message.value",
	//	    message: "value must be greater than 42",
	//	    expression: "this > 42",
	//	  }];
	//	}
	//
	// ```
	Cel           []*Constraint `protobuf:"bytes,1,rep,name=cel" json:"cel,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PredefinedConstraints) Reset() {
	*x = PredefinedConstraints{}
	mi := &file_buf_validate_validate_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PredefinedConstraints) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredefinedConstraints) ProtoMessage() {}

func (x *PredefinedConstraints) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_validate_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredefinedConstraints.ProtoReflect.Descriptor instead.
func (*PredefinedConstraints) Descriptor() ([]byte, []int) {
	return file_buf_validate_validate_proto_rawDescGZIP(), []int{4}
}

func (x *PredefinedConstraints) GetCel() []*Constraint {
	if x != nil {
		return x.Cel
	}
	return nil
}

// FloatRules describes the constraints applied to `float` values. These
// rules may also be applied to the `google.protobuf.FloatValue` Well-Known-Type.
type FloatRules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// `const` requires the field value to exactly match the specified value. If
	// the field value doesn't match, an error message is generated.
	//
	// ```proto
	//
	//	message MyFloat {
	//	  // value must equal 42.0
	//	  float value = 1 [(buf.validate.field).float.const = 42.0];
	//	}
	//
	// ```
	Const *float32 `protobuf:"fixed32,1,opt,name=const" json:"const,omitempty"`
	// Types that are valid to be assigned to LessThan:
	//
	//	*FloatRules_Lt
	//	*FloatRules_Lte
	LessThan isFloatRules_LessThan `protobuf_oneof:"less_than"`
	// Types that are valid to be assigned to GreaterThan:
	//
	//	*FloatRules_Gt
	//	*FloatRules_Gte
	GreaterThan isFloatRules_GreaterThan `protobuf_oneof:"greater_than"`
	// `in` requires the field value to be equal to one of the specified values.
	// If the field value isn't one of the specified values, an error message
	// is generated.
	//
	// ```proto
	//
	//	message MyFloat {
	//	  // value must be in list [1.0, 2.0, 3.0]
	//	  float value = 1 [(buf.validate.field).float = { in: [1.0, 2.0, 3.0] }];
	//	}
	//
	// ```
	In []float32 `protobuf:"fixed32,6,rep,name=in" json:"in,omitempty"`
	// `in` requires the field value to not be equal to any of the specified
	// values. If the field value is one of the specified values, an error
	// message is generated.
	//
	// ```proto
	//
	//	message MyFloat {
	//	  // value must not be in list [1.0, 2.0, 3.0]
	//	  float value = 1 [(buf.validate.field).float = { not_in: [1.0, 2.0, 3.0] }];
	//	}
	//
	// ```
	NotIn []float32 `protobuf:"fixed32,7,rep,name=not_in,json=notIn" json:"not_in,omitempty"`
	// `finite` requires the field value to be finite. If the field value is
	// infinite or NaN, an error message is generated.
	Finite *bool `protobuf:"varint,8,opt,name=finite" json:"finite,omitempty"`
	// `example` specifies values that the field may have. These values SHOULD
	// conform to other constraints. `example` values will not impact validation
	// but may be used as helpful guidance on how to populate the given field.
	//
	// ```proto
	//
	//	message MyFloat {
	//	  float value = 1 [
	//	    (buf.validate.field).float.example = 1.0,
	//	    (buf.validate.field).float.example = "Infinity"
	//	  ];
	//	}
	//
	// ```
	Example         []float32 `protobuf:"fixed32,9,rep,name=example" json:"example,omitempty"`
	extensionFields protoimpl.ExtensionFields
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *FloatRules) Reset() {
	*x = FloatRules{}
	mi := &file_buf_validate_validate_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FloatRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatRules) ProtoMessage() {}

func (x *FloatRules) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_validate_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatRules.ProtoReflect.Descriptor instead.
func (*FloatRules) Descriptor() ([]byte, []int) {
	return file_buf_validate_validate_proto_rawDescGZIP(), []int{5}
}

func (x *FloatRules) GetConst() float32 {
	if x != nil && x.Const != nil {
		return *x.Const
	}
	return 0
}

func (x *FloatRules) GetLessThan() isFloatRules_LessThan {
	if x != nil {
		return x.LessThan
	}
	return nil
}

func (x *FloatRules) GetLt() float32 {
	if x != nil {
		if x, ok := x.LessThan.(*FloatRules_Lt); ok {
			return x.Lt
		}
	}
	return 0
}

func (x *FloatRules) GetLte() float32 {
	if x != nil {
		if x, ok := x.LessThan.(*FloatRules_Lte); ok {
			return x.Lte
		}
	}
	return 0
}

func (x *FloatRules) GetGreaterThan() isFloatRules_GreaterThan {
	if x != nil {
		return x.GreaterThan
	}
	return nil
}

func (x *FloatRules) GetGt() float32 {
	if x != nil {
		if x, ok := x.GreaterThan.(*FloatRules_Gt); ok {
			return x.Gt
		}
	}
	return 0
}

func (x *FloatRules) GetGte() float32 {
	if x != nil {
		if x, ok := x.GreaterThan.(*FloatRules_Gte); ok {
			return x.Gte
		}
	}
	return 0
}

func (x *FloatRules) GetIn() []float32 {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *FloatRules) GetNotIn() []float32 {
	if x != nil {
		return x.NotIn
	}
	return nil
}

func (x *FloatRules) GetFinite() bool {
	if x != nil && x.Finite != nil {
		return *x.Finite
	}
	return false
}

func (x *FloatRules) GetExample() []float32 {
	if x != nil {
		return x.Example
	}
	return nil
}

type isFloatRules_LessThan interface {
	isFloatRules_LessThan()
}

type FloatRules_Lt struct {
	// `lt` requires the field value to be less than the specified value (field <
	// value). If the field value is equal to or greater than the specified value,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MyFloat {
	//	  // value must be less than 10.0
	//	  float value = 1 [(buf.validate.field).float.lt = 10.0];
	//	}
	//
	// ```
	Lt float32 `protobuf:"fixed32,2,opt,name=lt,oneof"`
}

type FloatRules_Lte struct {
	// `lte` requires the field value to be less than or equal to the specified
	// value (field <= value). If the field value is greater than the specified
	// value, an error message is generated.
	//
	// ```proto
	//
	//	message MyFloat {
	//	  // value must be less than or equal to 10.0
	//	  float value = 1 [(buf.validate.field).float.lte = 10.0];
	//	}
	//
	// ```
	Lte float32 `protobuf:"fixed32,3,opt,name=lte,oneof"`
}

func (*FloatRules_Lt) isFloatRules_LessThan() {}

func (*FloatRules_Lte) isFloatRules_LessThan() {}

type isFloatRules_GreaterThan interface {
	isFloatRules_GreaterThan()
}

type FloatRules_Gt struct {
	// `gt` requires the field value to be greater than the specified value
	// (exclusive). If the value of `gt` is larger than a specified `lt` or
	// `lte`, the range is reversed, and the field value must be outside the
	// specified range. If the field value doesn't meet the required conditions,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MyFloat {
	//	  // value must be greater than 5.0 [float.gt]
	//	  float value = 1 [(buf.validate.field).float.gt = 5.0];
	//
	//	  // value must be greater than 5 and less than 10.0 [float.gt_lt]
	//	  float other_value = 2 [(buf.validate.field).float = { gt: 5.0, lt: 10.0 }];
	//
	//	  // value must be greater than 10 or less than 5.0 [float.gt_lt_exclusive]
	//	  float another_value = 3 [(buf.validate.field).float = { gt: 10.0, lt: 5.0 }];
	//	}
	//
	// ```
	Gt float32 `protobuf:"fixed32,4,opt,name=gt,oneof"`
}

type FloatRules_Gte struct {
	// `gte` requires the field value to be greater than or equal to the specified
	// value (exclusive). If the value of `gte` is larger than a specified `lt`
	// or `lte`, the range is reversed, and the field value must be outside the
	// specified range. If the field value doesn't meet the required conditions,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MyFloat {
	//	  // value must be greater than or equal to 5.0 [float.gte]
	//	  float value = 1 [(buf.validate.field).float.gte = 5.0];
	//
	//	  // value must be greater than or equal to 5.0 and less than 10.0 [float.gte_lt]
	//	  float other_value = 2 [(buf.validate.field).float = { gte: 5.0, lt: 10.0 }];
	//
	//	  // value must be greater than or equal to 10.0 or less than 5.0 [float.gte_lt_exclusive]
	//	  float another_value = 3 [(buf.validate.field).float = { gte: 10.0, lt: 5.0 }];
	//	}
	//
	// ```
	Gte float32 `protobuf:"fixed32,5,opt,name=gte,oneof"`
}

func (*FloatRules_Gt) isFloatRules_GreaterThan() {}

func (*FloatRules_Gte) isFloatRules_GreaterThan() {}

// DoubleRules describes the constraints applied to `double` values. These
// rules may also be applied to the `google.protobuf.DoubleValue` Well-Known-Type.
type DoubleRules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// `const` requires the field value to exactly match the specified value. If
	// the field value doesn't match, an error message is generated.
	//
	// ```proto
	//
	//	message MyDouble {
	//	  // value must equal 42.0
	//	  double value = 1 [(buf.validate.field).double.const = 42.0];
	//	}
	//
	// ```
	Const *float64 `protobuf:"fixed64,1,opt,name=const" json:"const,omitempty"`
	// Types that are valid to be assigned to LessThan:
	//
	//	*DoubleRules_Lt
	//	*DoubleRules_Lte
	LessThan isDoubleRules_LessThan `protobuf_oneof:"less_than"`
	// Types that are valid to be assigned to GreaterThan:
	//
	//	*DoubleRules_Gt
	//	*DoubleRules_Gte
	GreaterThan isDoubleRules_GreaterThan `protobuf_oneof:"greater_than"`
	// `in` requires the field value to be equal to one of the specified values.
	// If the field value isn't one of the specified values, an error message is
	// generated.
	//
	// ```proto
	//
	//	message MyDouble {
	//	  // value must be in list [1.0, 2.0, 3.0]
	//	  double value = 1 [(buf.validate.field).double = { in: [1.0, 2.0, 3.0] }];
	//	}
	//
	// ```
	In []float64 `protobuf:"fixed64,6,rep,name=in" json:"in,omitempty"`
	// `not_in` requires the field value to not be equal to any of the specified
	// values. If the field value is one of the specified values, an error
	// message is generated.
	//
	// ```proto
	//
	//	message MyDouble {
	//	  // value must not be in list [1.0, 2.0, 3.0]
	//	  double value = 1 [(buf.validate.field).double = { not_in: [1.0, 2.0, 3.0] }];
	//	}
	//
	// ```
	NotIn []float64 `protobuf:"fixed64,7,rep,name=not_in,json=notIn" json:"not_in,omitempty"`
	// `finite` requires the field value to be finite. If the field value is
	// infinite or NaN, an error message is generated.
	Finite *bool `protobuf:"varint,8,opt,name=finite" json:"finite,omitempty"`
	// `example` specifies values that the field may have. These values SHOULD
	// conform to other constraints. `example` values will not impact validation
	// but may be used as helpful guidance on how to populate the given field.
	//
	// ```proto
	//
	//	message MyDouble {
	//	  double value = 1 [
	//	    (buf.validate.field).double.example = 1.0,
	//	    (buf.validate.field).double.example = "Infinity"
	//	  ];
	//	}
	//
	// ```
	Example         []float64 `protobuf:"fixed64,9,rep,name=example" json:"example,omitempty"`
	extensionFields protoimpl.ExtensionFields
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *DoubleRules) Reset() {
	*x = DoubleRules{}
	mi := &file_buf_validate_validate_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DoubleRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoubleRules) ProtoMessage() {}

func (x *DoubleRules) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_validate_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoubleRules.ProtoReflect.Descriptor instead.
func (*DoubleRules) Descriptor() ([]byte, []int) {
	return file_buf_validate_validate_proto_rawDescGZIP(), []int{6}
}

func (x *DoubleRules) GetConst() float64 {
	if x != nil && x.Const != nil {
		return *x.Const
	}
	return 0
}

func (x *DoubleRules) GetLessThan() isDoubleRules_LessThan {
	if x != nil {
		return x.LessThan
	}
	return nil
}

func (x *DoubleRules) GetLt() float64 {
	if x != nil {
		if x, ok := x.LessThan.(*DoubleRules_Lt); ok {
			return x.Lt
		}
	}
	return 0
}

func (x *DoubleRules) GetLte() float64 {
	if x != nil {
		if x, ok := x.LessThan.(*DoubleRules_Lte); ok {
			return x.Lte
		}
	}
	return 0
}

func (x *DoubleRules) GetGreaterThan() isDoubleRules_GreaterThan {
	if x != nil {
		return x.GreaterThan
	}
	return nil
}

func (x *DoubleRules) GetGt() float64 {
	if x != nil {
		if x, ok := x.GreaterThan.(*DoubleRules_Gt); ok {
			return x.Gt
		}
	}
	return 0
}

func (x *DoubleRules) GetGte() float64 {
	if x != nil {
		if x, ok := x.GreaterThan.(*DoubleRules_Gte); ok {
			return x.Gte
		}
	}
	return 0
}

func (x *DoubleRules) GetIn() []float64 {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *DoubleRules) GetNotIn() []float64 {
	if x != nil {
		return x.NotIn
	}
	return nil
}

func (x *DoubleRules) GetFinite() bool {
	if x != nil && x.Finite != nil {
		return *x.Finite
	}
	return false
}

func (x *DoubleRules) GetExample() []float64 {
	if x != nil {
		return x.Example
	}
	return nil
}

type isDoubleRules_LessThan interface {
	isDoubleRules_LessThan()
}

type DoubleRules_Lt struct {
	// `lt` requires the field value to be less than the specified value (field <
	// value). If the field value is equal to or greater than the specified
	// value, an error message is generated.
	//
	// ```proto
	//
	//	message MyDouble {
	//	  // value must be less than 10.0
	//	  double value = 1 [(buf.validate.field).double.lt = 10.0];
	//	}
	//
	// ```
	Lt float64 `protobuf:"fixed64,2,opt,name=lt,oneof"`
}

type DoubleRules_Lte struct {
	// `lte` requires the field value to be less than or equal to the specified value
	// (field <= value). If the field value is greater than the specified value,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MyDouble {
	//	  // value must be less than or equal to 10.0
	//	  double value = 1 [(buf.validate.field).double.lte = 10.0];
	//	}
	//
	// ```
	Lte float64 `protobuf:"fixed64,3,opt,name=lte,oneof"`
}

func (*DoubleRules_Lt) isDoubleRules_LessThan() {}

func (*DoubleRules_Lte) isDoubleRules_LessThan() {}

type isDoubleRules_GreaterThan interface {
	isDoubleRules_GreaterThan()
}

type DoubleRules_Gt struct {
	// `gt` requires the field value to be greater than the specified value
	// (exclusive). If the value of `gt` is larger than a specified `lt` or `lte`,
	// the range is reversed, and the field value must be outside the specified
	// range. If the field value doesn't meet the required conditions, an error
	// message is generated.
	//
	// ```proto
	//
	//	message MyDouble {
	//	  // value must be greater than 5.0 [double.gt]
	//	  double value = 1 [(buf.validate.field).double.gt = 5.0];
	//
	//	  // value must be greater than 5 and less than 10.0 [double.gt_lt]
	//	  double other_value = 2 [(buf.validate.field).double = { gt: 5.0, lt: 10.0 }];
	//
	//	  // value must be greater than 10 or less than 5.0 [double.gt_lt_exclusive]
	//	  double another_value = 3 [(buf.validate.field).double = { gt: 10.0, lt: 5.0 }];
	//	}
	//
	// ```
	Gt float64 `protobuf:"fixed64,4,opt,name=gt,oneof"`
}

type DoubleRules_Gte struct {
	// `gte` requires the field value to be greater than or equal to the specified
	// value (exclusive). If the value of `gte` is larger than a specified `lt` or
	// `lte`, the range is reversed, and the field value must be outside the
	// specified range. If the field value doesn't meet the required conditions,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MyDouble {
	//	  // value must be greater than or equal to 5.0 [double.gte]
	//	  double value = 1 [(buf.validate.field).double.gte = 5.0];
	//
	//	  // value must be greater than or equal to 5.0 and less than 10.0 [double.gte_lt]
	//	  double other_value = 2 [(buf.validate.field).double = { gte: 5.0, lt: 10.0 }];
	//
	//	  // value must be greater than or equal to 10.0 or less than 5.0 [double.gte_lt_exclusive]
	//	  double another_value = 3 [(buf.validate.field).double = { gte: 10.0, lt: 5.0 }];
	//	}
	//
	// ```
	Gte float64 `protobuf:"fixed64,5,opt,name=gte,oneof"`
}

func (*DoubleRules_Gt) isDoubleRules_GreaterThan() {}

func (*DoubleRules_Gte) isDoubleRules_GreaterThan() {}

// Int32Rules describes the constraints applied to `int32` values. These
// rules may also be applied to the `google.protobuf.Int32Value` Well-Known-Type.
type Int32Rules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// `const` requires the field value to exactly match the specified value. If
	// the field value doesn't match, an error message is generated.
	//
	// ```proto
	//
	//	message MyInt32 {
	//	  // value must equal 42
	//	  int32 value = 1 [(buf.validate.field).int32.const = 42];
	//	}
	//
	// ```
	Const *int32 `protobuf:"varint,1,opt,name=const" json:"const,omitempty"`
	// Types that are valid to be assigned to LessThan:
	//
	//	*Int32Rules_Lt
	//	*Int32Rules_Lte
	LessThan isInt32Rules_LessThan `protobuf_oneof:"less_than"`
	// Types that are valid to be assigned to GreaterThan:
	//
	//	*Int32Rules_Gt
	//	*Int32Rules_Gte
	GreaterThan isInt32Rules_GreaterThan `protobuf_oneof:"greater_than"`
	// `in` requires the field value to be equal to one of the specified values.
	// If the field value isn't one of the specified values, an error message is
	// generated.
	//
	// ```proto
	//
	//	message MyInt32 {
	//	  // value must be in list [1, 2, 3]
	//	  int32 value = 1 [(buf.validate.field).int32 = { in: [1, 2, 3] }];
	//	}
	//
	// ```
	In []int32 `protobuf:"varint,6,rep,name=in" json:"in,omitempty"`
	// `not_in` requires the field value to not be equal to any of the specified
	// values. If the field value is one of the specified values, an error message
	// is generated.
	//
	// ```proto
	//
	//	message MyInt32 {
	//	  // value must not be in list [1, 2, 3]
	//	  int32 value = 1 [(buf.validate.field).int32 = { not_in: [1, 2, 3] }];
	//	}
	//
	// ```
	NotIn []int32 `protobuf:"varint,7,rep,name=not_in,json=notIn" json:"not_in,omitempty"`
	// `example` specifies values that the field may have. These values SHOULD
	// conform to other constraints. `example` values will not impact validation
	// but may be used as helpful guidance on how to populate the given field.
	//
	// ```proto
	//
	//	message MyInt32 {
	//	  int32 value = 1 [
	//	    (buf.validate.field).int32.example = 1,
	//	    (buf.validate.field).int32.example = -10
	//	  ];
	//	}
	//
	// ```
	Example         []int32 `protobuf:"varint,8,rep,name=example" json:"example,omitempty"`
	extensionFields protoimpl.ExtensionFields
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Int32Rules) Reset() {
	*x = Int32Rules{}
	mi := &file_buf_validate_validate_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Int32Rules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int32Rules) ProtoMessage() {}

func (x *Int32Rules) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_validate_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int32Rules.ProtoReflect.Descriptor instead.
func (*Int32Rules) Descriptor() ([]byte, []int) {
	return file_buf_validate_validate_proto_rawDescGZIP(), []int{7}
}

func (x *Int32Rules) GetConst() int32 {
	if x != nil && x.Const != nil {
		return *x.Const
	}
	return 0
}

func (x *Int32Rules) GetLessThan() isInt32Rules_LessThan {
	if x != nil {
		return x.LessThan
	}
	return nil
}

func (x *Int32Rules) GetLt() int32 {
	if x != nil {
		if x, ok := x.LessThan.(*Int32Rules_Lt); ok {
			return x.Lt
		}
	}
	return 0
}

func (x *Int32Rules) GetLte() int32 {
	if x != nil {
		if x, ok := x.LessThan.(*Int32Rules_Lte); ok {
			return x.Lte
		}
	}
	return 0
}

func (x *Int32Rules) GetGreaterThan() isInt32Rules_GreaterThan {
	if x != nil {
		return x.GreaterThan
	}
	return nil
}

func (x *Int32Rules) GetGt() int32 {
	if x != nil {
		if x, ok := x.GreaterThan.(*Int32Rules_Gt); ok {
			return x.Gt
		}
	}
	return 0
}

func (x *Int32Rules) GetGte() int32 {
	if x != nil {
		if x, ok := x.GreaterThan.(*Int32Rules_Gte); ok {
			return x.Gte
		}
	}
	return 0
}

func (x *Int32Rules) GetIn() []int32 {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *Int32Rules) GetNotIn() []int32 {
	if x != nil {
		return x.NotIn
	}
	return nil
}

func (x *Int32Rules) GetExample() []int32 {
	if x != nil {
		return x.Example
	}
	return nil
}

type isInt32Rules_LessThan interface {
	isInt32Rules_LessThan()
}

type Int32Rules_Lt struct {
	// `lt` requires the field value to be less than the specified value (field
	// < value). If the field value is equal to or greater than the specified
	// value, an error message is generated.
	//
	// ```proto
	//
	//	message MyInt32 {
	//	  // value must be less than 10
	//	  int32 value = 1 [(buf.validate.field).int32.lt = 10];
	//	}
	//
	// ```
	Lt int32 `protobuf:"varint,2,opt,name=lt,oneof"`
}

type Int32Rules_Lte struct {
	// `lte` requires the field value to be less than or equal to the specified
	// value (field <= value). If the field value is greater than the specified
	// value, an error message is generated.
	//
	// ```proto
	//
	//	message MyInt32 {
	//	  // value must be less than or equal to 10
	//	  int32 value = 1 [(buf.validate.field).int32.lte = 10];
	//	}
	//
	// ```
	Lte int32 `protobuf:"varint,3,opt,name=lte,oneof"`
}

func (*Int32Rules_Lt) isInt32Rules_LessThan() {}

func (*Int32Rules_Lte) isInt32Rules_LessThan() {}

type isInt32Rules_GreaterThan interface {
	isInt32Rules_GreaterThan()
}

type Int32Rules_Gt struct {
	// `gt` requires the field value to be greater than the specified value
	// (exclusive). If the value of `gt` is larger than a specified `lt` or
	// `lte`, the range is reversed, and the field value must be outside the
	// specified range. If the field value doesn't meet the required conditions,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MyInt32 {
	//	  // value must be greater than 5 [int32.gt]
	//	  int32 value = 1 [(buf.validate.field).int32.gt = 5];
	//
	//	  // value must be greater than 5 and less than 10 [int32.gt_lt]
	//	  int32 other_value = 2 [(buf.validate.field).int32 = { gt: 5, lt: 10 }];
	//
	//	  // value must be greater than 10 or less than 5 [int32.gt_lt_exclusive]
	//	  int32 another_value = 3 [(buf.validate.field).int32 = { gt: 10, lt: 5 }];
	//	}
	//
	// ```
	Gt int32 `protobuf:"varint,4,opt,name=gt,oneof"`
}

type Int32Rules_Gte struct {
	// `gte` requires the field value to be greater than or equal to the specified value
	// (exclusive). If the value of `gte` is larger than a specified `lt` or
	// `lte`, the range is reversed, and the field value must be outside the
	// specified range. If the field value doesn't meet the required conditions,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MyInt32 {
	//	  // value must be greater than or equal to 5 [int32.gte]
	//	  int32 value = 1 [(buf.validate.field).int32.gte = 5];
	//
	//	  // value must be greater than or equal to 5 and less than 10 [int32.gte_lt]
	//	  int32 other_value = 2 [(buf.validate.field).int32 = { gte: 5, lt: 10 }];
	//
	//	  // value must be greater than or equal to 10 or less than 5 [int32.gte_lt_exclusive]
	//	  int32 another_value = 3 [(buf.validate.field).int32 = { gte: 10, lt: 5 }];
	//	}
	//
	// ```
	Gte int32 `protobuf:"varint,5,opt,name=gte,oneof"`
}

func (*Int32Rules_Gt) isInt32Rules_GreaterThan() {}

func (*Int32Rules_Gte) isInt32Rules_GreaterThan() {}

// Int64Rules describes the constraints applied to `int64` values. These
// rules may also be applied to the `google.protobuf.Int64Value` Well-Known-Type.
type Int64Rules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// `const` requires the field value to exactly match the specified value. If
	// the field value doesn't match, an error message is generated.
	//
	// ```proto
	//
	//	message MyInt64 {
	//	  // value must equal 42
	//	  int64 value = 1 [(buf.validate.field).int64.const = 42];
	//	}
	//
	// ```
	Const *int64 `protobuf:"varint,1,opt,name=const" json:"const,omitempty"`
	// Types that are valid to be assigned to LessThan:
	//
	//	*Int64Rules_Lt
	//	*Int64Rules_Lte
	LessThan isInt64Rules_LessThan `protobuf_oneof:"less_than"`
	// Types that are valid to be assigned to GreaterThan:
	//
	//	*Int64Rules_Gt
	//	*Int64Rules_Gte
	GreaterThan isInt64Rules_GreaterThan `protobuf_oneof:"greater_than"`
	// `in` requires the field value to be equal to one of the specified values.
	// If the field value isn't one of the specified values, an error message is
	// generated.
	//
	// ```proto
	//
	//	message MyInt64 {
	//	  // value must be in list [1, 2, 3]
	//	  int64 value = 1 [(buf.validate.field).int64 = { in: [1, 2, 3] }];
	//	}
	//
	// ```
	In []int64 `protobuf:"varint,6,rep,name=in" json:"in,omitempty"`
	// `not_in` requires the field value to not be equal to any of the specified
	// values. If the field value is one of the specified values, an error
	// message is generated.
	//
	// ```proto
	//
	//	message MyInt64 {
	//	  // value must not be in list [1, 2, 3]
	//	  int64 value = 1 [(buf.validate.field).int64 = { not_in: [1, 2, 3] }];
	//	}
	//
	// ```
	NotIn []int64 `protobuf:"varint,7,rep,name=not_in,json=notIn" json:"not_in,omitempty"`
	// `example` specifies values that the field may have. These values SHOULD
	// conform to other constraints. `example` values will not impact validation
	// but may be used as helpful guidance on how to populate the given field.
	//
	// ```proto
	//
	//	message MyInt64 {
	//	  int64 value = 1 [
	//	    (buf.validate.field).int64.example = 1,
	//	    (buf.validate.field).int64.example = -10
	//	  ];
	//	}
	//
	// ```
	Example         []int64 `protobuf:"varint,9,rep,name=example" json:"example,omitempty"`
	extensionFields protoimpl.ExtensionFields
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Int64Rules) Reset() {
	*x = Int64Rules{}
	mi := &file_buf_validate_validate_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Int64Rules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int64Rules) ProtoMessage() {}

func (x *Int64Rules) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_validate_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int64Rules.ProtoReflect.Descriptor instead.
func (*Int64Rules) Descriptor() ([]byte, []int) {
	return file_buf_validate_validate_proto_rawDescGZIP(), []int{8}
}

func (x *Int64Rules) GetConst() int64 {
	if x != nil && x.Const != nil {
		return *x.Const
	}
	return 0
}

func (x *Int64Rules) GetLessThan() isInt64Rules_LessThan {
	if x != nil {
		return x.LessThan
	}
	return nil
}

func (x *Int64Rules) GetLt() int64 {
	if x != nil {
		if x, ok := x.LessThan.(*Int64Rules_Lt); ok {
			return x.Lt
		}
	}
	return 0
}

func (x *Int64Rules) GetLte() int64 {
	if x != nil {
		if x, ok := x.LessThan.(*Int64Rules_Lte); ok {
			return x.Lte
		}
	}
	return 0
}

func (x *Int64Rules) GetGreaterThan() isInt64Rules_GreaterThan {
	if x != nil {
		return x.GreaterThan
	}
	return nil
}

func (x *Int64Rules) GetGt() int64 {
	if x != nil {
		if x, ok := x.GreaterThan.(*Int64Rules_Gt); ok {
			return x.Gt
		}
	}
	return 0
}

func (x *Int64Rules) GetGte() int64 {
	if x != nil {
		if x, ok := x.GreaterThan.(*Int64Rules_Gte); ok {
			return x.Gte
		}
	}
	return 0
}

func (x *Int64Rules) GetIn() []int64 {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *Int64Rules) GetNotIn() []int64 {
	if x != nil {
		return x.NotIn
	}
	return nil
}

func (x *Int64Rules) GetExample() []int64 {
	if x != nil {
		return x.Example
	}
	return nil
}

type isInt64Rules_LessThan interface {
	isInt64Rules_LessThan()
}

type Int64Rules_Lt struct {
	// `lt` requires the field value to be less than the specified value (field <
	// value). If the field value is equal to or greater than the specified value,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MyInt64 {
	//	  // value must be less than 10
	//	  int64 value = 1 [(buf.validate.field).int64.lt = 10];
	//	}
	//
	// ```
	Lt int64 `protobuf:"varint,2,opt,name=lt,oneof"`
}

type Int64Rules_Lte struct {
	// `lte` requires the field value to be less than or equal to the specified
	// value (field <= value). If the field value is greater than the specified
	// value, an error message is generated.
	//
	// ```proto
	//
	//	message MyInt64 {
	//	  // value must be less than or equal to 10
	//	  int64 value = 1 [(buf.validate.field).int64.lte = 10];
	//	}
	//
	// ```
	Lte int64 `protobuf:"varint,3,opt,name=lte,oneof"`
}

func (*Int64Rules_Lt) isInt64Rules_LessThan() {}

func (*Int64Rules_Lte) isInt64Rules_LessThan() {}

type isInt64Rules_GreaterThan interface {
	isInt64Rules_GreaterThan()
}

type Int64Rules_Gt struct {
	// `gt` requires the field value to be greater than the specified value
	// (exclusive). If the value of `gt` is larger than a specified `lt` or
	// `lte`, the range is reversed, and the field value must be outside the
	// specified range. If the field value doesn't meet the required conditions,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MyInt64 {
	//	  // value must be greater than 5 [int64.gt]
	//	  int64 value = 1 [(buf.validate.field).int64.gt = 5];
	//
	//	  // value must be greater than 5 and less than 10 [int64.gt_lt]
	//	  int64 other_value = 2 [(buf.validate.field).int64 = { gt: 5, lt: 10 }];
	//
	//	  // value must be greater than 10 or less than 5 [int64.gt_lt_exclusive]
	//	  int64 another_value = 3 [(buf.validate.field).int64 = { gt: 10, lt: 5 }];
	//	}
	//
	// ```
	Gt int64 `protobuf:"varint,4,opt,name=gt,oneof"`
}

type Int64Rules_Gte struct {
	// `gte` requires the field value to be greater than or equal to the specified
	// value (exclusive). If the value of `gte` is larger than a specified `lt`
	// or `lte`, the range is reversed, and the field value must be outside the
	// specified range. If the field value doesn't meet the required conditions,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MyInt64 {
	//	  // value must be greater than or equal to 5 [int64.gte]
	//	  int64 value = 1 [(buf.validate.field).int64.gte = 5];
	//
	//	  // value must be greater than or equal to 5 and less than 10 [int64.gte_lt]
	//	  int64 other_value = 2 [(buf.validate.field).int64 = { gte: 5, lt: 10 }];
	//
	//	  // value must be greater than or equal to 10 or less than 5 [int64.gte_lt_exclusive]
	//	  int64 another_value = 3 [(buf.validate.field).int64 = { gte: 10, lt: 5 }];
	//	}
	//
	// ```
	Gte int64 `protobuf:"varint,5,opt,name=gte,oneof"`
}

func (*Int64Rules_Gt) isInt64Rules_GreaterThan() {}

func (*Int64Rules_Gte) isInt64Rules_GreaterThan() {}

// UInt32Rules describes the constraints applied to `uint32` values. These
// rules may also be applied to the `google.protobuf.UInt32Value` Well-Known-Type.
type UInt32Rules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// `const` requires the field value to exactly match the specified value. If
	// the field value doesn't match, an error message is generated.
	//
	// ```proto
	//
	//	message MyUInt32 {
	//	  // value must equal 42
	//	  uint32 value = 1 [(buf.validate.field).uint32.const = 42];
	//	}
	//
	// ```
	Const *uint32 `protobuf:"varint,1,opt,name=const" json:"const,omitempty"`
	// Types that are valid to be assigned to LessThan:
	//
	//	*UInt32Rules_Lt
	//	*UInt32Rules_Lte
	LessThan isUInt32Rules_LessThan `protobuf_oneof:"less_than"`
	// Types that are valid to be assigned to GreaterThan:
	//
	//	*UInt32Rules_Gt
	//	*UInt32Rules_Gte
	GreaterThan isUInt32Rules_GreaterThan `protobuf_oneof:"greater_than"`
	// `in` requires the field value to be equal to one of the specified values.
	// If the field value isn't one of the specified values, an error message is
	// generated.
	//
	// ```proto
	//
	//	message MyUInt32 {
	//	  // value must be in list [1, 2, 3]
	//	  uint32 value = 1 [(buf.validate.field).uint32 = { in: [1, 2, 3] }];
	//	}
	//
	// ```
	In []uint32 `protobuf:"varint,6,rep,name=in" json:"in,omitempty"`
	// `not_in` requires the field value to not be equal to any of the specified
	// values. If the field value is one of the specified values, an error
	// message is generated.
	//
	// ```proto
	//
	//	message MyUInt32 {
	//	  // value must not be in list [1, 2, 3]
	//	  uint32 value = 1 [(buf.validate.field).uint32 = { not_in: [1, 2, 3] }];
	//	}
	//
	// ```
	NotIn []uint32 `protobuf:"varint,7,rep,name=not_in,json=notIn" json:"not_in,omitempty"`
	// `example` specifies values that the field may have. These values SHOULD
	// conform to other constraints. `example` values will not impact validation
	// but may be used as helpful guidance on how to populate the given field.
	//
	// ```proto
	//
	//	message MyUInt32 {
	//	  uint32 value = 1 [
	//	    (buf.validate.field).uint32.example = 1,
	//	    (buf.validate.field).uint32.example = 10
	//	  ];
	//	}
	//
	// ```
	Example         []uint32 `protobuf:"varint,8,rep,name=example" json:"example,omitempty"`
	extensionFields protoimpl.ExtensionFields
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *UInt32Rules) Reset() {
	*x = UInt32Rules{}
	mi := &file_buf_validate_validate_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UInt32Rules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UInt32Rules) ProtoMessage() {}

func (x *UInt32Rules) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_validate_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UInt32Rules.ProtoReflect.Descriptor instead.
func (*UInt32Rules) Descriptor() ([]byte, []int) {
	return file_buf_validate_validate_proto_rawDescGZIP(), []int{9}
}

func (x *UInt32Rules) GetConst() uint32 {
	if x != nil && x.Const != nil {
		return *x.Const
	}
	return 0
}

func (x *UInt32Rules) GetLessThan() isUInt32Rules_LessThan {
	if x != nil {
		return x.LessThan
	}
	return nil
}

func (x *UInt32Rules) GetLt() uint32 {
	if x != nil {
		if x, ok := x.LessThan.(*UInt32Rules_Lt); ok {
			return x.Lt
		}
	}
	return 0
}

func (x *UInt32Rules) GetLte() uint32 {
	if x != nil {
		if x, ok := x.LessThan.(*UInt32Rules_Lte); ok {
			return x.Lte
		}
	}
	return 0
}

func (x *UInt32Rules) GetGreaterThan() isUInt32Rules_GreaterThan {
	if x != nil {
		return x.GreaterThan
	}
	return nil
}

func (x *UInt32Rules) GetGt() uint32 {
	if x != nil {
		if x, ok := x.GreaterThan.(*UInt32Rules_Gt); ok {
			return x.Gt
		}
	}
	return 0
}

func (x *UInt32Rules) GetGte() uint32 {
	if x != nil {
		if x, ok := x.GreaterThan.(*UInt32Rules_Gte); ok {
			return x.Gte
		}
	}
	return 0
}

func (x *UInt32Rules) GetIn() []uint32 {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *UInt32Rules) GetNotIn() []uint32 {
	if x != nil {
		return x.NotIn
	}
	return nil
}

func (x *UInt32Rules) GetExample() []uint32 {
	if x != nil {
		return x.Example
	}
	return nil
}

type isUInt32Rules_LessThan interface {
	isUInt32Rules_LessThan()
}

type UInt32Rules_Lt struct {
	// `lt` requires the field value to be less than the specified value (field <
	// value). If the field value is equal to or greater than the specified value,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MyUInt32 {
	//	  // value must be less than 10
	//	  uint32 value = 1 [(buf.validate.field).uint32.lt = 10];
	//	}
	//
	// ```
	Lt uint32 `protobuf:"varint,2,opt,name=lt,oneof"`
}

type UInt32Rules_Lte struct {
	// `lte` requires the field value to be less than or equal to the specified
	// value (field <= value). If the field value is greater than the specified
	// value, an error message is generated.
	//
	// ```proto
	//
	//	message MyUInt32 {
	//	  // value must be less than or equal to 10
	//	  uint32 value = 1 [(buf.validate.field).uint32.lte = 10];
	//	}
	//
	// ```
	Lte uint32 `protobuf:"varint,3,opt,name=lte,oneof"`
}

func (*UInt32Rules_Lt) isUInt32Rules_LessThan() {}

func (*UInt32Rules_Lte) isUInt32Rules_LessThan() {}

type isUInt32Rules_GreaterThan interface {
	isUInt32Rules_GreaterThan()
}

type UInt32Rules_Gt struct {
	// `gt` requires the field value to be greater than the specified value
	// (exclusive). If the value of `gt` is larger than a specified `lt` or
	// `lte`, the range is reversed, and the field value must be outside the
	// specified range. If the field value doesn't meet the required conditions,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MyUInt32 {
	//	  // value must be greater than 5 [uint32.gt]
	//	  uint32 value = 1 [(buf.validate.field).uint32.gt = 5];
	//
	//	  // value must be greater than 5 and less than 10 [uint32.gt_lt]
	//	  uint32 other_value = 2 [(buf.validate.field).uint32 = { gt: 5, lt: 10 }];
	//
	//	  // value must be greater than 10 or less than 5 [uint32.gt_lt_exclusive]
	//	  uint32 another_value = 3 [(buf.validate.field).uint32 = { gt: 10, lt: 5 }];
	//	}
	//
	// ```
	Gt uint32 `protobuf:"varint,4,opt,name=gt,oneof"`
}

type UInt32Rules_Gte struct {
	// `gte` requires the field value to be greater than or equal to the specified
	// value (exclusive). If the value of `gte` is larger than a specified `lt`
	// or `lte`, the range is reversed, and the field value must be outside the
	// specified range. If the field value doesn't meet the required conditions,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MyUInt32 {
	//	  // value must be greater than or equal to 5 [uint32.gte]
	//	  uint32 value = 1 [(buf.validate.field).uint32.gte = 5];
	//
	//	  // value must be greater than or equal to 5 and less than 10 [uint32.gte_lt]
	//	  uint32 other_value = 2 [(buf.validate.field).uint32 = { gte: 5, lt: 10 }];
	//
	//	  // value must be greater than or equal to 10 or less than 5 [uint32.gte_lt_exclusive]
	//	  uint32 another_value = 3 [(buf.validate.field).uint32 = { gte: 10, lt: 5 }];
	//	}
	//
	// ```
	Gte uint32 `protobuf:"varint,5,opt,name=gte,oneof"`
}

func (*UInt32Rules_Gt) isUInt32Rules_GreaterThan() {}

func (*UInt32Rules_Gte) isUInt32Rules_GreaterThan() {}

// UInt64Rules describes the constraints applied to `uint64` values. These
// rules may also be applied to the `google.protobuf.UInt64Value` Well-Known-Type.
type UInt64Rules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// `const` requires the field value to exactly match the specified value. If
	// the field value doesn't match, an error message is generated.
	//
	// ```proto
	//
	//	message MyUInt64 {
	//	  // value must equal 42
	//	  uint64 value = 1 [(buf.validate.field).uint64.const = 42];
	//	}
	//
	// ```
	Const *uint64 `protobuf:"varint,1,opt,name=const" json:"const,omitempty"`
	// Types that are valid to be assigned to LessThan:
	//
	//	*UInt64Rules_Lt
	//	*UInt64Rules_Lte
	LessThan isUInt64Rules_LessThan `protobuf_oneof:"less_than"`
	// Types that are valid to be assigned to GreaterThan:
	//
	//	*UInt64Rules_Gt
	//	*UInt64Rules_Gte
	GreaterThan isUInt64Rules_GreaterThan `protobuf_oneof:"greater_than"`
	// `in` requires the field value to be equal to one of the specified values.
	// If the field value isn't one of the specified values, an error message is
	// generated.
	//
	// ```proto
	//
	//	message MyUInt64 {
	//	  // value must be in list [1, 2, 3]
	//	  uint64 value = 1 [(buf.validate.field).uint64 = { in: [1, 2, 3] }];
	//	}
	//
	// ```
	In []uint64 `protobuf:"varint,6,rep,name=in" json:"in,omitempty"`
	// `not_in` requires the field value to not be equal to any of the specified
	// values. If the field value is one of the specified values, an error
	// message is generated.
	//
	// ```proto
	//
	//	message MyUInt64 {
	//	  // value must not be in list [1, 2, 3]
	//	  uint64 value = 1 [(buf.validate.field).uint64 = { not_in: [1, 2, 3] }];
	//	}
	//
	// ```
	NotIn []uint64 `protobuf:"varint,7,rep,name=not_in,json=notIn" json:"not_in,omitempty"`
	// `example` specifies values that the field may have. These values SHOULD
	// conform to other constraints. `example` values will not impact validation
	// but may be used as helpful guidance on how to populate the given field.
	//
	// ```proto
	//
	//	message MyUInt64 {
	//	  uint64 value = 1 [
	//	    (buf.validate.field).uint64.example = 1,
	//	    (buf.validate.field).uint64.example = -10
	//	  ];
	//	}
	//
	// ```
	Example         []uint64 `protobuf:"varint,8,rep,name=example" json:"example,omitempty"`
	extensionFields protoimpl.ExtensionFields
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *UInt64Rules) Reset() {
	*x = UInt64Rules{}
	mi := &file_buf_validate_validate_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UInt64Rules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UInt64Rules) ProtoMessage() {}

func (x *UInt64Rules) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_validate_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UInt64Rules.ProtoReflect.Descriptor instead.
func (*UInt64Rules) Descriptor() ([]byte, []int) {
	return file_buf_validate_validate_proto_rawDescGZIP(), []int{10}
}

func (x *UInt64Rules) GetConst() uint64 {
	if x != nil && x.Const != nil {
		return *x.Const
	}
	return 0
}

func (x *UInt64Rules) GetLessThan() isUInt64Rules_LessThan {
	if x != nil {
		return x.LessThan
	}
	return nil
}

func (x *UInt64Rules) GetLt() uint64 {
	if x != nil {
		if x, ok := x.LessThan.(*UInt64Rules_Lt); ok {
			return x.Lt
		}
	}
	return 0
}

func (x *UInt64Rules) GetLte() uint64 {
	if x != nil {
		if x, ok := x.LessThan.(*UInt64Rules_Lte); ok {
			return x.Lte
		}
	}
	return 0
}

func (x *UInt64Rules) GetGreaterThan() isUInt64Rules_GreaterThan {
	if x != nil {
		return x.GreaterThan
	}
	return nil
}

func (x *UInt64Rules) GetGt() uint64 {
	if x != nil {
		if x, ok := x.GreaterThan.(*UInt64Rules_Gt); ok {
			return x.Gt
		}
	}
	return 0
}

func (x *UInt64Rules) GetGte() uint64 {
	if x != nil {
		if x, ok := x.GreaterThan.(*UInt64Rules_Gte); ok {
			return x.Gte
		}
	}
	return 0
}

func (x *UInt64Rules) GetIn() []uint64 {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *UInt64Rules) GetNotIn() []uint64 {
	if x != nil {
		return x.NotIn
	}
	return nil
}

func (x *UInt64Rules) GetExample() []uint64 {
	if x != nil {
		return x.Example
	}
	return nil
}

type isUInt64Rules_LessThan interface {
	isUInt64Rules_LessThan()
}

type UInt64Rules_Lt struct {
	// `lt` requires the field value to be less than the specified value (field <
	// value). If the field value is equal to or greater than the specified value,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MyUInt64 {
	//	  // value must be less than 10
	//	  uint64 value = 1 [(buf.validate.field).uint64.lt = 10];
	//	}
	//
	// ```
	Lt uint64 `protobuf:"varint,2,opt,name=lt,oneof"`
}

type UInt64Rules_Lte struct {
	// `lte` requires the field value to be less than or equal to the specified
	// value (field <= value). If the field value is greater than the specified
	// value, an error message is generated.
	//
	// ```proto
	//
	//	message MyUInt64 {
	//	  // value must be less than or equal to 10
	//	  uint64 value = 1 [(buf.validate.field).uint64.lte = 10];
	//	}
	//
	// ```
	Lte uint64 `protobuf:"varint,3,opt,name=lte,oneof"`
}

func (*UInt64Rules_Lt) isUInt64Rules_LessThan() {}

func (*UInt64Rules_Lte) isUInt64Rules_LessThan() {}

type isUInt64Rules_GreaterThan interface {
	isUInt64Rules_GreaterThan()
}

type UInt64Rules_Gt struct {
	// `gt` requires the field value to be greater than the specified value
	// (exclusive). If the value of `gt` is larger than a specified `lt` or
	// `lte`, the range is reversed, and the field value must be outside the
	// specified range. If the field value doesn't meet the required conditions,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MyUInt64 {
	//	  // value must be greater than 5 [uint64.gt]
	//	  uint64 value = 1 [(buf.validate.field).uint64.gt = 5];
	//
	//	  // value must be greater than 5 and less than 10 [uint64.gt_lt]
	//	  uint64 other_value = 2 [(buf.validate.field).uint64 = { gt: 5, lt: 10 }];
	//
	//	  // value must be greater than 10 or less than 5 [uint64.gt_lt_exclusive]
	//	  uint64 another_value = 3 [(buf.validate.field).uint64 = { gt: 10, lt: 5 }];
	//	}
	//
	// ```
	Gt uint64 `protobuf:"varint,4,opt,name=gt,oneof"`
}

type UInt64Rules_Gte struct {
	// `gte` requires the field value to be greater than or equal to the specified
	// value (exclusive). If the value of `gte` is larger than a specified `lt`
	// or `lte`, the range is reversed, and the field value must be outside the
	// specified range. If the field value doesn't meet the required conditions,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MyUInt64 {
	//	  // value must be greater than or equal to 5 [uint64.gte]
	//	  uint64 value = 1 [(buf.validate.field).uint64.gte = 5];
	//
	//	  // value must be greater than or equal to 5 and less than 10 [uint64.gte_lt]
	//	  uint64 other_value = 2 [(buf.validate.field).uint64 = { gte: 5, lt: 10 }];
	//
	//	  // value must be greater than or equal to 10 or less than 5 [uint64.gte_lt_exclusive]
	//	  uint64 another_value = 3 [(buf.validate.field).uint64 = { gte: 10, lt: 5 }];
	//	}
	//
	// ```
	Gte uint64 `protobuf:"varint,5,opt,name=gte,oneof"`
}

func (*UInt64Rules_Gt) isUInt64Rules_GreaterThan() {}

func (*UInt64Rules_Gte) isUInt64Rules_GreaterThan() {}

// SInt32Rules describes the constraints applied to `sint32` values.
type SInt32Rules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// `const` requires the field value to exactly match the specified value. If
	// the field value doesn't match, an error message is generated.
	//
	// ```proto
	//
	//	message MySInt32 {
	//	  // value must equal 42
	//	  sint32 value = 1 [(buf.validate.field).sint32.const = 42];
	//	}
	//
	// ```
	Const *int32 `protobuf:"zigzag32,1,opt,name=const" json:"const,omitempty"`
	// Types that are valid to be assigned to LessThan:
	//
	//	*SInt32Rules_Lt
	//	*SInt32Rules_Lte
	LessThan isSInt32Rules_LessThan `protobuf_oneof:"less_than"`
	// Types that are valid to be assigned to GreaterThan:
	//
	//	*SInt32Rules_Gt
	//	*SInt32Rules_Gte
	GreaterThan isSInt32Rules_GreaterThan `protobuf_oneof:"greater_than"`
	// `in` requires the field value to be equal to one of the specified values.
	// If the field value isn't one of the specified values, an error message is
	// generated.
	//
	// ```proto
	//
	//	message MySInt32 {
	//	  // value must be in list [1, 2, 3]
	//	  sint32 value = 1 [(buf.validate.field).sint32 = { in: [1, 2, 3] }];
	//	}
	//
	// ```
	In []int32 `protobuf:"zigzag32,6,rep,name=in" json:"in,omitempty"`
	// `not_in` requires the field value to not be equal to any of the specified
	// values. If the field value is one of the specified values, an error
	// message is generated.
	//
	// ```proto
	//
	//	message MySInt32 {
	//	  // value must not be in list [1, 2, 3]
	//	  sint32 value = 1 [(buf.validate.field).sint32 = { not_in: [1, 2, 3] }];
	//	}
	//
	// ```
	NotIn []int32 `protobuf:"zigzag32,7,rep,name=not_in,json=notIn" json:"not_in,omitempty"`
	// `example` specifies values that the field may have. These values SHOULD
	// conform to other constraints. `example` values will not impact validation
	// but may be used as helpful guidance on how to populate the given field.
	//
	// ```proto
	//
	//	message MySInt32 {
	//	  sint32 value = 1 [
	//	    (buf.validate.field).sint32.example = 1,
	//	    (buf.validate.field).sint32.example = -10
	//	  ];
	//	}
	//
	// ```
	Example         []int32 `protobuf:"zigzag32,8,rep,name=example" json:"example,omitempty"`
	extensionFields protoimpl.ExtensionFields
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SInt32Rules) Reset() {
	*x = SInt32Rules{}
	mi := &file_buf_validate_validate_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SInt32Rules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SInt32Rules) ProtoMessage() {}

func (x *SInt32Rules) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_validate_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SInt32Rules.ProtoReflect.Descriptor instead.
func (*SInt32Rules) Descriptor() ([]byte, []int) {
	return file_buf_validate_validate_proto_rawDescGZIP(), []int{11}
}

func (x *SInt32Rules) GetConst() int32 {
	if x != nil && x.Const != nil {
		return *x.Const
	}
	return 0
}

func (x *SInt32Rules) GetLessThan() isSInt32Rules_LessThan {
	if x != nil {
		return x.LessThan
	}
	return nil
}

func (x *SInt32Rules) GetLt() int32 {
	if x != nil {
		if x, ok := x.LessThan.(*SInt32Rules_Lt); ok {
			return x.Lt
		}
	}
	return 0
}

func (x *SInt32Rules) GetLte() int32 {
	if x != nil {
		if x, ok := x.LessThan.(*SInt32Rules_Lte); ok {
			return x.Lte
		}
	}
	return 0
}

func (x *SInt32Rules) GetGreaterThan() isSInt32Rules_GreaterThan {
	if x != nil {
		return x.GreaterThan
	}
	return nil
}

func (x *SInt32Rules) GetGt() int32 {
	if x != nil {
		if x, ok := x.GreaterThan.(*SInt32Rules_Gt); ok {
			return x.Gt
		}
	}
	return 0
}

func (x *SInt32Rules) GetGte() int32 {
	if x != nil {
		if x, ok := x.GreaterThan.(*SInt32Rules_Gte); ok {
			return x.Gte
		}
	}
	return 0
}

func (x *SInt32Rules) GetIn() []int32 {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *SInt32Rules) GetNotIn() []int32 {
	if x != nil {
		return x.NotIn
	}
	return nil
}

func (x *SInt32Rules) GetExample() []int32 {
	if x != nil {
		return x.Example
	}
	return nil
}

type isSInt32Rules_LessThan interface {
	isSInt32Rules_LessThan()
}

type SInt32Rules_Lt struct {
	// `lt` requires the field value to be less than the specified value (field
	// < value). If the field value is equal to or greater than the specified
	// value, an error message is generated.
	//
	// ```proto
	//
	//	message MySInt32 {
	//	  // value must be less than 10
	//	  sint32 value = 1 [(buf.validate.field).sint32.lt = 10];
	//	}
	//
	// ```
	Lt int32 `protobuf:"zigzag32,2,opt,name=lt,oneof"`
}

type SInt32Rules_Lte struct {
	// `lte` requires the field value to be less than or equal to the specified
	// value (field <= value). If the field value is greater than the specified
	// value, an error message is generated.
	//
	// ```proto
	//
	//	message MySInt32 {
	//	  // value must be less than or equal to 10
	//	  sint32 value = 1 [(buf.validate.field).sint32.lte = 10];
	//	}
	//
	// ```
	Lte int32 `protobuf:"zigzag32,3,opt,name=lte,oneof"`
}

func (*SInt32Rules_Lt) isSInt32Rules_LessThan() {}

func (*SInt32Rules_Lte) isSInt32Rules_LessThan() {}

type isSInt32Rules_GreaterThan interface {
	isSInt32Rules_GreaterThan()
}

type SInt32Rules_Gt struct {
	// `gt` requires the field value to be greater than the specified value
	// (exclusive). If the value of `gt` is larger than a specified `lt` or
	// `lte`, the range is reversed, and the field value must be outside the
	// specified range. If the field value doesn't meet the required conditions,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MySInt32 {
	//	  // value must be greater than 5 [sint32.gt]
	//	  sint32 value = 1 [(buf.validate.field).sint32.gt = 5];
	//
	//	  // value must be greater than 5 and less than 10 [sint32.gt_lt]
	//	  sint32 other_value = 2 [(buf.validate.field).sint32 = { gt: 5, lt: 10 }];
	//
	//	  // value must be greater than 10 or less than 5 [sint32.gt_lt_exclusive]
	//	  sint32 another_value = 3 [(buf.validate.field).sint32 = { gt: 10, lt: 5 }];
	//	}
	//
	// ```
	Gt int32 `protobuf:"zigzag32,4,opt,name=gt,oneof"`
}

type SInt32Rules_Gte struct {
	// `gte` requires the field value to be greater than or equal to the specified
	// value (exclusive). If the value of `gte` is larger than a specified `lt`
	// or `lte`, the range is reversed, and the field value must be outside the
	// specified range. If the field value doesn't meet the required conditions,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MySInt32 {
	//	 // value must be greater than or equal to 5 [sint32.gte]
	//	 sint32 value = 1 [(buf.validate.field).sint32.gte = 5];
	//
	//	 // value must be greater than or equal to 5 and less than 10 [sint32.gte_lt]
	//	 sint32 other_value = 2 [(buf.validate.field).sint32 = { gte: 5, lt: 10 }];
	//
	//	 // value must be greater than or equal to 10 or less than 5 [sint32.gte_lt_exclusive]
	//	 sint32 another_value = 3 [(buf.validate.field).sint32 = { gte: 10, lt: 5 }];
	//	}
	//
	// ```
	Gte int32 `protobuf:"zigzag32,5,opt,name=gte,oneof"`
}

func (*SInt32Rules_Gt) isSInt32Rules_GreaterThan() {}

func (*SInt32Rules_Gte) isSInt32Rules_GreaterThan() {}

// SInt64Rules describes the constraints applied to `sint64` values.
type SInt64Rules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// `const` requires the field value to exactly match the specified value. If
	// the field value doesn't match, an error message is generated.
	//
	// ```proto
	//
	//	message MySInt64 {
	//	  // value must equal 42
	//	  sint64 value = 1 [(buf.validate.field).sint64.const = 42];
	//	}
	//
	// ```
	Const *int64 `protobuf:"zigzag64,1,opt,name=const" json:"const,omitempty"`
	// Types that are valid to be assigned to LessThan:
	//
	//	*SInt64Rules_Lt
	//	*SInt64Rules_Lte
	LessThan isSInt64Rules_LessThan `protobuf_oneof:"less_than"`
	// Types that are valid to be assigned to GreaterThan:
	//
	//	*SInt64Rules_Gt
	//	*SInt64Rules_Gte
	GreaterThan isSInt64Rules_GreaterThan `protobuf_oneof:"greater_than"`
	// `in` requires the field value to be equal to one of the specified values.
	// If the field value isn't one of the specified values, an error message
	// is generated.
	//
	// ```proto
	//
	//	message MySInt64 {
	//	  // value must be in list [1, 2, 3]
	//	  sint64 value = 1 [(buf.validate.field).sint64 = { in: [1, 2, 3] }];
	//	}
	//
	// ```
	In []int64 `protobuf:"zigzag64,6,rep,name=in" json:"in,omitempty"`
	// `not_in` requires the field value to not be equal to any of the specified
	// values. If the field value is one of the specified values, an error
	// message is generated.
	//
	// ```proto
	//
	//	message MySInt64 {
	//	  // value must not be in list [1, 2, 3]
	//	  sint64 value = 1 [(buf.validate.field).sint64 = { not_in: [1, 2, 3] }];
	//	}
	//
	// ```
	NotIn []int64 `protobuf:"zigzag64,7,rep,name=not_in,json=notIn" json:"not_in,omitempty"`
	// `example` specifies values that the field may have. These values SHOULD
	// conform to other constraints. `example` values will not impact validation
	// but may be used as helpful guidance on how to populate the given field.
	//
	// ```proto
	//
	//	message MySInt64 {
	//	  sint64 value = 1 [
	//	    (buf.validate.field).sint64.example = 1,
	//	    (buf.validate.field).sint64.example = -10
	//	  ];
	//	}
	//
	// ```
	Example         []int64 `protobuf:"zigzag64,8,rep,name=example" json:"example,omitempty"`
	extensionFields protoimpl.ExtensionFields
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SInt64Rules) Reset() {
	*x = SInt64Rules{}
	mi := &file_buf_validate_validate_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SInt64Rules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SInt64Rules) ProtoMessage() {}

func (x *SInt64Rules) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_validate_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SInt64Rules.ProtoReflect.Descriptor instead.
func (*SInt64Rules) Descriptor() ([]byte, []int) {
	return file_buf_validate_validate_proto_rawDescGZIP(), []int{12}
}

func (x *SInt64Rules) GetConst() int64 {
	if x != nil && x.Const != nil {
		return *x.Const
	}
	return 0
}

func (x *SInt64Rules) GetLessThan() isSInt64Rules_LessThan {
	if x != nil {
		return x.LessThan
	}
	return nil
}

func (x *SInt64Rules) GetLt() int64 {
	if x != nil {
		if x, ok := x.LessThan.(*SInt64Rules_Lt); ok {
			return x.Lt
		}
	}
	return 0
}

func (x *SInt64Rules) GetLte() int64 {
	if x != nil {
		if x, ok := x.LessThan.(*SInt64Rules_Lte); ok {
			return x.Lte
		}
	}
	return 0
}

func (x *SInt64Rules) GetGreaterThan() isSInt64Rules_GreaterThan {
	if x != nil {
		return x.GreaterThan
	}
	return nil
}

func (x *SInt64Rules) GetGt() int64 {
	if x != nil {
		if x, ok := x.GreaterThan.(*SInt64Rules_Gt); ok {
			return x.Gt
		}
	}
	return 0
}

func (x *SInt64Rules) GetGte() int64 {
	if x != nil {
		if x, ok := x.GreaterThan.(*SInt64Rules_Gte); ok {
			return x.Gte
		}
	}
	return 0
}

func (x *SInt64Rules) GetIn() []int64 {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *SInt64Rules) GetNotIn() []int64 {
	if x != nil {
		return x.NotIn
	}
	return nil
}

func (x *SInt64Rules) GetExample() []int64 {
	if x != nil {
		return x.Example
	}
	return nil
}

type isSInt64Rules_LessThan interface {
	isSInt64Rules_LessThan()
}

type SInt64Rules_Lt struct {
	// `lt` requires the field value to be less than the specified value (field
	// < value). If the field value is equal to or greater than the specified
	// value, an error message is generated.
	//
	// ```proto
	//
	//	message MySInt64 {
	//	  // value must be less than 10
	//	  sint64 value = 1 [(buf.validate.field).sint64.lt = 10];
	//	}
	//
	// ```
	Lt int64 `protobuf:"zigzag64,2,opt,name=lt,oneof"`
}

type SInt64Rules_Lte struct {
	// `lte` requires the field value to be less than or equal to the specified
	// value (field <= value). If the field value is greater than the specified
	// value, an error message is generated.
	//
	// ```proto
	//
	//	message MySInt64 {
	//	  // value must be less than or equal to 10
	//	  sint64 value = 1 [(buf.validate.field).sint64.lte = 10];
	//	}
	//
	// ```
	Lte int64 `protobuf:"zigzag64,3,opt,name=lte,oneof"`
}

func (*SInt64Rules_Lt) isSInt64Rules_LessThan() {}

func (*SInt64Rules_Lte) isSInt64Rules_LessThan() {}

type isSInt64Rules_GreaterThan interface {
	isSInt64Rules_GreaterThan()
}

type SInt64Rules_Gt struct {
	// `gt` requires the field value to be greater than the specified value
	// (exclusive). If the value of `gt` is larger than a specified `lt` or
	// `lte`, the range is reversed, and the field value must be outside the
	// specified range. If the field value doesn't meet the required conditions,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MySInt64 {
	//	  // value must be greater than 5 [sint64.gt]
	//	  sint64 value = 1 [(buf.validate.field).sint64.gt = 5];
	//
	//	  // value must be greater than 5 and less than 10 [sint64.gt_lt]
	//	  sint64 other_value = 2 [(buf.validate.field).sint64 = { gt: 5, lt: 10 }];
	//
	//	  // value must be greater than 10 or less than 5 [sint64.gt_lt_exclusive]
	//	  sint64 another_value = 3 [(buf.validate.field).sint64 = { gt: 10, lt: 5 }];
	//	}
	//
	// ```
	Gt int64 `protobuf:"zigzag64,4,opt,name=gt,oneof"`
}

type SInt64Rules_Gte struct {
	// `gte` requires the field value to be greater than or equal to the specified
	// value (exclusive). If the value of `gte` is larger than a specified `lt`
	// or `lte`, the range is reversed, and the field value must be outside the
	// specified range. If the field value doesn't meet the required conditions,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MySInt64 {
	//	  // value must be greater than or equal to 5 [sint64.gte]
	//	  sint64 value = 1 [(buf.validate.field).sint64.gte = 5];
	//
	//	  // value must be greater than or equal to 5 and less than 10 [sint64.gte_lt]
	//	  sint64 other_value = 2 [(buf.validate.field).sint64 = { gte: 5, lt: 10 }];
	//
	//	  // value must be greater than or equal to 10 or less than 5 [sint64.gte_lt_exclusive]
	//	  sint64 another_value = 3 [(buf.validate.field).sint64 = { gte: 10, lt: 5 }];
	//	}
	//
	// ```
	Gte int64 `protobuf:"zigzag64,5,opt,name=gte,oneof"`
}

func (*SInt64Rules_Gt) isSInt64Rules_GreaterThan() {}

func (*SInt64Rules_Gte) isSInt64Rules_GreaterThan() {}

// Fixed32Rules describes the constraints applied to `fixed32` values.
type Fixed32Rules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// `const` requires the field value to exactly match the specified value.
	// If the field value doesn't match, an error message is generated.
	//
	// ```proto
	//
	//	message MyFixed32 {
	//	  // value must equal 42
	//	  fixed32 value = 1 [(buf.validate.field).fixed32.const = 42];
	//	}
	//
	// ```
	Const *uint32 `protobuf:"fixed32,1,opt,name=const" json:"const,omitempty"`
	// Types that are valid to be assigned to LessThan:
	//
	//	*Fixed32Rules_Lt
	//	*Fixed32Rules_Lte
	LessThan isFixed32Rules_LessThan `protobuf_oneof:"less_than"`
	// Types that are valid to be assigned to GreaterThan:
	//
	//	*Fixed32Rules_Gt
	//	*Fixed32Rules_Gte
	GreaterThan isFixed32Rules_GreaterThan `protobuf_oneof:"greater_than"`
	// `in` requires the field value to be equal to one of the specified values.
	// If the field value isn't one of the specified values, an error message
	// is generated.
	//
	// ```proto
	//
	//	message MyFixed32 {
	//	  // value must be in list [1, 2, 3]
	//	  fixed32 value = 1 [(buf.validate.field).fixed32 = { in: [1, 2, 3] }];
	//	}
	//
	// ```
	In []uint32 `protobuf:"fixed32,6,rep,name=in" json:"in,omitempty"`
	// `not_in` requires the field value to not be equal to any of the specified
	// values. If the field value is one of the specified values, an error
	// message is generated.
	//
	// ```proto
	//
	//	message MyFixed32 {
	//	  // value must not be in list [1, 2, 3]
	//	  fixed32 value = 1 [(buf.validate.field).fixed32 = { not_in: [1, 2, 3] }];
	//	}
	//
	// ```
	NotIn []uint32 `protobuf:"fixed32,7,rep,name=not_in,json=notIn" json:"not_in,omitempty"`
	// `example` specifies values that the field may have. These values SHOULD
	// conform to other constraints. `example` values will not impact validation
	// but may be used as helpful guidance on how to populate the given field.
	//
	// ```proto
	//
	//	message MyFixed32 {
	//	  fixed32 value = 1 [
	//	    (buf.validate.field).fixed32.example = 1,
	//	    (buf.validate.field).fixed32.example = 2
	//	  ];
	//	}
	//
	// ```
	Example         []uint32 `protobuf:"fixed32,8,rep,name=example" json:"example,omitempty"`
	extensionFields protoimpl.ExtensionFields
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Fixed32Rules) Reset() {
	*x = Fixed32Rules{}
	mi := &file_buf_validate_validate_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Fixed32Rules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fixed32Rules) ProtoMessage() {}

func (x *Fixed32Rules) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_validate_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fixed32Rules.ProtoReflect.Descriptor instead.
func (*Fixed32Rules) Descriptor() ([]byte, []int) {
	return file_buf_validate_validate_proto_rawDescGZIP(), []int{13}
}

func (x *Fixed32Rules) GetConst() uint32 {
	if x != nil && x.Const != nil {
		return *x.Const
	}
	return 0
}

func (x *Fixed32Rules) GetLessThan() isFixed32Rules_LessThan {
	if x != nil {
		return x.LessThan
	}
	return nil
}

func (x *Fixed32Rules) GetLt() uint32 {
	if x != nil {
		if x, ok := x.LessThan.(*Fixed32Rules_Lt); ok {
			return x.Lt
		}
	}
	return 0
}

func (x *Fixed32Rules) GetLte() uint32 {
	if x != nil {
		if x, ok := x.LessThan.(*Fixed32Rules_Lte); ok {
			return x.Lte
		}
	}
	return 0
}

func (x *Fixed32Rules) GetGreaterThan() isFixed32Rules_GreaterThan {
	if x != nil {
		return x.GreaterThan
	}
	return nil
}

func (x *Fixed32Rules) GetGt() uint32 {
	if x != nil {
		if x, ok := x.GreaterThan.(*Fixed32Rules_Gt); ok {
			return x.Gt
		}
	}
	return 0
}

func (x *Fixed32Rules) GetGte() uint32 {
	if x != nil {
		if x, ok := x.GreaterThan.(*Fixed32Rules_Gte); ok {
			return x.Gte
		}
	}
	return 0
}

func (x *Fixed32Rules) GetIn() []uint32 {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *Fixed32Rules) GetNotIn() []uint32 {
	if x != nil {
		return x.NotIn
	}
	return nil
}

func (x *Fixed32Rules) GetExample() []uint32 {
	if x != nil {
		return x.Example
	}
	return nil
}

type isFixed32Rules_LessThan interface {
	isFixed32Rules_LessThan()
}

type Fixed32Rules_Lt struct {
	// `lt` requires the field value to be less than the specified value (field <
	// value). If the field value is equal to or greater than the specified value,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MyFixed32 {
	//	  // value must be less than 10
	//	  fixed32 value = 1 [(buf.validate.field).fixed32.lt = 10];
	//	}
	//
	// ```
	Lt uint32 `protobuf:"fixed32,2,opt,name=lt,oneof"`
}

type Fixed32Rules_Lte struct {
	// `lte` requires the field value to be less than or equal to the specified
	// value (field <= value). If the field value is greater than the specified
	// value, an error message is generated.
	//
	// ```proto
	//
	//	message MyFixed32 {
	//	  // value must be less than or equal to 10
	//	  fixed32 value = 1 [(buf.validate.field).fixed32.lte = 10];
	//	}
	//
	// ```
	Lte uint32 `protobuf:"fixed32,3,opt,name=lte,oneof"`
}

func (*Fixed32Rules_Lt) isFixed32Rules_LessThan() {}

func (*Fixed32Rules_Lte) isFixed32Rules_LessThan() {}

type isFixed32Rules_GreaterThan interface {
	isFixed32Rules_GreaterThan()
}

type Fixed32Rules_Gt struct {
	// `gt` requires the field value to be greater than the specified value
	// (exclusive). If the value of `gt` is larger than a specified `lt` or
	// `lte`, the range is reversed, and the field value must be outside the
	// specified range. If the field value doesn't meet the required conditions,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MyFixed32 {
	//	  // value must be greater than 5 [fixed32.gt]
	//	  fixed32 value = 1 [(buf.validate.field).fixed32.gt = 5];
	//
	//	  // value must be greater than 5 and less than 10 [fixed32.gt_lt]
	//	  fixed32 other_value = 2 [(buf.validate.field).fixed32 = { gt: 5, lt: 10 }];
	//
	//	  // value must be greater than 10 or less than 5 [fixed32.gt_lt_exclusive]
	//	  fixed32 another_value = 3 [(buf.validate.field).fixed32 = { gt: 10, lt: 5 }];
	//	}
	//
	// ```
	Gt uint32 `protobuf:"fixed32,4,opt,name=gt,oneof"`
}

type Fixed32Rules_Gte struct {
	// `gte` requires the field value to be greater than or equal to the specified
	// value (exclusive). If the value of `gte` is larger than a specified `lt`
	// or `lte`, the range is reversed, and the field value must be outside the
	// specified range. If the field value doesn't meet the required conditions,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MyFixed32 {
	//	  // value must be greater than or equal to 5 [fixed32.gte]
	//	  fixed32 value = 1 [(buf.validate.field).fixed32.gte = 5];
	//
	//	  // value must be greater than or equal to 5 and less than 10 [fixed32.gte_lt]
	//	  fixed32 other_value = 2 [(buf.validate.field).fixed32 = { gte: 5, lt: 10 }];
	//
	//	  // value must be greater than or equal to 10 or less than 5 [fixed32.gte_lt_exclusive]
	//	  fixed32 another_value = 3 [(buf.validate.field).fixed32 = { gte: 10, lt: 5 }];
	//	}
	//
	// ```
	Gte uint32 `protobuf:"fixed32,5,opt,name=gte,oneof"`
}

func (*Fixed32Rules_Gt) isFixed32Rules_GreaterThan() {}

func (*Fixed32Rules_Gte) isFixed32Rules_GreaterThan() {}

// Fixed64Rules describes the constraints applied to `fixed64` values.
type Fixed64Rules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// `const` requires the field value to exactly match the specified value. If
	// the field value doesn't match, an error message is generated.
	//
	// ```proto
	//
	//	message MyFixed64 {
	//	  // value must equal 42
	//	  fixed64 value = 1 [(buf.validate.field).fixed64.const = 42];
	//	}
	//
	// ```
	Const *uint64 `protobuf:"fixed64,1,opt,name=const" json:"const,omitempty"`
	// Types that are valid to be assigned to LessThan:
	//
	//	*Fixed64Rules_Lt
	//	*Fixed64Rules_Lte
	LessThan isFixed64Rules_LessThan `protobuf_oneof:"less_than"`
	// Types that are valid to be assigned to GreaterThan:
	//
	//	*Fixed64Rules_Gt
	//	*Fixed64Rules_Gte
	GreaterThan isFixed64Rules_GreaterThan `protobuf_oneof:"greater_than"`
	// `in` requires the field value to be equal to one of the specified values.
	// If the field value isn't one of the specified values, an error message is
	// generated.
	//
	// ```proto
	//
	//	message MyFixed64 {
	//	  // value must be in list [1, 2, 3]
	//	  fixed64 value = 1 [(buf.validate.field).fixed64 = { in: [1, 2, 3] }];
	//	}
	//
	// ```
	In []uint64 `protobuf:"fixed64,6,rep,name=in" json:"in,omitempty"`
	// `not_in` requires the field value to not be equal to any of the specified
	// values. If the field value is one of the specified values, an error
	// message is generated.
	//
	// ```proto
	//
	//	message MyFixed64 {
	//	  // value must not be in list [1, 2, 3]
	//	  fixed64 value = 1 [(buf.validate.field).fixed64 = { not_in: [1, 2, 3] }];
	//	}
	//
	// ```
	NotIn []uint64 `protobuf:"fixed64,7,rep,name=not_in,json=notIn" json:"not_in,omitempty"`
	// `example` specifies values that the field may have. These values SHOULD
	// conform to other constraints. `example` values will not impact validation
	// but may be used as helpful guidance on how to populate the given field.
	//
	// ```proto
	//
	//	message MyFixed64 {
	//	  fixed64 value = 1 [
	//	    (buf.validate.field).fixed64.example = 1,
	//	    (buf.validate.field).fixed64.example = 2
	//	  ];
	//	}
	//
	// ```
	Example         []uint64 `protobuf:"fixed64,8,rep,name=example" json:"example,omitempty"`
	extensionFields protoimpl.ExtensionFields
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Fixed64Rules) Reset() {
	*x = Fixed64Rules{}
	mi := &file_buf_validate_validate_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Fixed64Rules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fixed64Rules) ProtoMessage() {}

func (x *Fixed64Rules) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_validate_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fixed64Rules.ProtoReflect.Descriptor instead.
func (*Fixed64Rules) Descriptor() ([]byte, []int) {
	return file_buf_validate_validate_proto_rawDescGZIP(), []int{14}
}

func (x *Fixed64Rules) GetConst() uint64 {
	if x != nil && x.Const != nil {
		return *x.Const
	}
	return 0
}

func (x *Fixed64Rules) GetLessThan() isFixed64Rules_LessThan {
	if x != nil {
		return x.LessThan
	}
	return nil
}

func (x *Fixed64Rules) GetLt() uint64 {
	if x != nil {
		if x, ok := x.LessThan.(*Fixed64Rules_Lt); ok {
			return x.Lt
		}
	}
	return 0
}

func (x *Fixed64Rules) GetLte() uint64 {
	if x != nil {
		if x, ok := x.LessThan.(*Fixed64Rules_Lte); ok {
			return x.Lte
		}
	}
	return 0
}

func (x *Fixed64Rules) GetGreaterThan() isFixed64Rules_GreaterThan {
	if x != nil {
		return x.GreaterThan
	}
	return nil
}

func (x *Fixed64Rules) GetGt() uint64 {
	if x != nil {
		if x, ok := x.GreaterThan.(*Fixed64Rules_Gt); ok {
			return x.Gt
		}
	}
	return 0
}

func (x *Fixed64Rules) GetGte() uint64 {
	if x != nil {
		if x, ok := x.GreaterThan.(*Fixed64Rules_Gte); ok {
			return x.Gte
		}
	}
	return 0
}

func (x *Fixed64Rules) GetIn() []uint64 {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *Fixed64Rules) GetNotIn() []uint64 {
	if x != nil {
		return x.NotIn
	}
	return nil
}

func (x *Fixed64Rules) GetExample() []uint64 {
	if x != nil {
		return x.Example
	}
	return nil
}

type isFixed64Rules_LessThan interface {
	isFixed64Rules_LessThan()
}

type Fixed64Rules_Lt struct {
	// `lt` requires the field value to be less than the specified value (field <
	// value). If the field value is equal to or greater than the specified value,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MyFixed64 {
	//	  // value must be less than 10
	//	  fixed64 value = 1 [(buf.validate.field).fixed64.lt = 10];
	//	}
	//
	// ```
	Lt uint64 `protobuf:"fixed64,2,opt,name=lt,oneof"`
}

type Fixed64Rules_Lte struct {
	// `lte` requires the field value to be less than or equal to the specified
	// value (field <= value). If the field value is greater than the specified
	// value, an error message is generated.
	//
	// ```proto
	//
	//	message MyFixed64 {
	//	  // value must be less than or equal to 10
	//	  fixed64 value = 1 [(buf.validate.field).fixed64.lte = 10];
	//	}
	//
	// ```
	Lte uint64 `protobuf:"fixed64,3,opt,name=lte,oneof"`
}

func (*Fixed64Rules_Lt) isFixed64Rules_LessThan() {}

func (*Fixed64Rules_Lte) isFixed64Rules_LessThan() {}

type isFixed64Rules_GreaterThan interface {
	isFixed64Rules_GreaterThan()
}

type Fixed64Rules_Gt struct {
	// `gt` requires the field value to be greater than the specified value
	// (exclusive). If the value of `gt` is larger than a specified `lt` or
	// `lte`, the range is reversed, and the field value must be outside the
	// specified range. If the field value doesn't meet the required conditions,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MyFixed64 {
	//	  // value must be greater than 5 [fixed64.gt]
	//	  fixed64 value = 1 [(buf.validate.field).fixed64.gt = 5];
	//
	//	  // value must be greater than 5 and less than 10 [fixed64.gt_lt]
	//	  fixed64 other_value = 2 [(buf.validate.field).fixed64 = { gt: 5, lt: 10 }];
	//
	//	  // value must be greater than 10 or less than 5 [fixed64.gt_lt_exclusive]
	//	  fixed64 another_value = 3 [(buf.validate.field).fixed64 = { gt: 10, lt: 5 }];
	//	}
	//
	// ```
	Gt uint64 `protobuf:"fixed64,4,opt,name=gt,oneof"`
}

type Fixed64Rules_Gte struct {
	// `gte` requires the field value to be greater than or equal to the specified
	// value (exclusive). If the value of `gte` is larger than a specified `lt`
	// or `lte`, the range is reversed, and the field value must be outside the
	// specified range. If the field value doesn't meet the required conditions,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MyFixed64 {
	//	  // value must be greater than or equal to 5 [fixed64.gte]
	//	  fixed64 value = 1 [(buf.validate.field).fixed64.gte = 5];
	//
	//	  // value must be greater than or equal to 5 and less than 10 [fixed64.gte_lt]
	//	  fixed64 other_value = 2 [(buf.validate.field).fixed64 = { gte: 5, lt: 10 }];
	//
	//	  // value must be greater than or equal to 10 or less than 5 [fixed64.gte_lt_exclusive]
	//	  fixed64 another_value = 3 [(buf.validate.field).fixed64 = { gte: 10, lt: 5 }];
	//	}
	//
	// ```
	Gte uint64 `protobuf:"fixed64,5,opt,name=gte,oneof"`
}

func (*Fixed64Rules_Gt) isFixed64Rules_GreaterThan() {}

func (*Fixed64Rules_Gte) isFixed64Rules_GreaterThan() {}

// SFixed32Rules describes the constraints applied to `fixed32` values.
type SFixed32Rules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// `const` requires the field value to exactly match the specified value. If
	// the field value doesn't match, an error message is generated.
	//
	// ```proto
	//
	//	message MySFixed32 {
	//	  // value must equal 42
	//	  sfixed32 value = 1 [(buf.validate.field).sfixed32.const = 42];
	//	}
	//
	// ```
	Const *int32 `protobuf:"fixed32,1,opt,name=const" json:"const,omitempty"`
	// Types that are valid to be assigned to LessThan:
	//
	//	*SFixed32Rules_Lt
	//	*SFixed32Rules_Lte
	LessThan isSFixed32Rules_LessThan `protobuf_oneof:"less_than"`
	// Types that are valid to be assigned to GreaterThan:
	//
	//	*SFixed32Rules_Gt
	//	*SFixed32Rules_Gte
	GreaterThan isSFixed32Rules_GreaterThan `protobuf_oneof:"greater_than"`
	// `in` requires the field value to be equal to one of the specified values.
	// If the field value isn't one of the specified values, an error message is
	// generated.
	//
	// ```proto
	//
	//	message MySFixed32 {
	//	  // value must be in list [1, 2, 3]
	//	  sfixed32 value = 1 [(buf.validate.field).sfixed32 = { in: [1, 2, 3] }];
	//	}
	//
	// ```
	In []int32 `protobuf:"fixed32,6,rep,name=in" json:"in,omitempty"`
	// `not_in` requires the field value to not be equal to any of the specified
	// values. If the field value is one of the specified values, an error
	// message is generated.
	//
	// ```proto
	//
	//	message MySFixed32 {
	//	  // value must not be in list [1, 2, 3]
	//	  sfixed32 value = 1 [(buf.validate.field).sfixed32 = { not_in: [1, 2, 3] }];
	//	}
	//
	// ```
	NotIn []int32 `protobuf:"fixed32,7,rep,name=not_in,json=notIn" json:"not_in,omitempty"`
	// `example` specifies values that the field may have. These values SHOULD
	// conform to other constraints. `example` values will not impact validation
	// but may be used as helpful guidance on how to populate the given field.
	//
	// ```proto
	//
	//	message MySFixed32 {
	//	  sfixed32 value = 1 [
	//	    (buf.validate.field).sfixed32.example = 1,
	//	    (buf.validate.field).sfixed32.example = 2
	//	  ];
	//	}
	//
	// ```
	Example         []int32 `protobuf:"fixed32,8,rep,name=example" json:"example,omitempty"`
	extensionFields protoimpl.ExtensionFields
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SFixed32Rules) Reset() {
	*x = SFixed32Rules{}
	mi := &file_buf_validate_validate_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SFixed32Rules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SFixed32Rules) ProtoMessage() {}

func (x *SFixed32Rules) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_validate_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SFixed32Rules.ProtoReflect.Descriptor instead.
func (*SFixed32Rules) Descriptor() ([]byte, []int) {
	return file_buf_validate_validate_proto_rawDescGZIP(), []int{15}
}

func (x *SFixed32Rules) GetConst() int32 {
	if x != nil && x.Const != nil {
		return *x.Const
	}
	return 0
}

func (x *SFixed32Rules) GetLessThan() isSFixed32Rules_LessThan {
	if x != nil {
		return x.LessThan
	}
	return nil
}

func (x *SFixed32Rules) GetLt() int32 {
	if x != nil {
		if x, ok := x.LessThan.(*SFixed32Rules_Lt); ok {
			return x.Lt
		}
	}
	return 0
}

func (x *SFixed32Rules) GetLte() int32 {
	if x != nil {
		if x, ok := x.LessThan.(*SFixed32Rules_Lte); ok {
			return x.Lte
		}
	}
	return 0
}

func (x *SFixed32Rules) GetGreaterThan() isSFixed32Rules_GreaterThan {
	if x != nil {
		return x.GreaterThan
	}
	return nil
}

func (x *SFixed32Rules) GetGt() int32 {
	if x != nil {
		if x, ok := x.GreaterThan.(*SFixed32Rules_Gt); ok {
			return x.Gt
		}
	}
	return 0
}

func (x *SFixed32Rules) GetGte() int32 {
	if x != nil {
		if x, ok := x.GreaterThan.(*SFixed32Rules_Gte); ok {
			return x.Gte
		}
	}
	return 0
}

func (x *SFixed32Rules) GetIn() []int32 {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *SFixed32Rules) GetNotIn() []int32 {
	if x != nil {
		return x.NotIn
	}
	return nil
}

func (x *SFixed32Rules) GetExample() []int32 {
	if x != nil {
		return x.Example
	}
	return nil
}

type isSFixed32Rules_LessThan interface {
	isSFixed32Rules_LessThan()
}

type SFixed32Rules_Lt struct {
	// `lt` requires the field value to be less than the specified value (field <
	// value). If the field value is equal to or greater than the specified value,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MySFixed32 {
	//	  // value must be less than 10
	//	  sfixed32 value = 1 [(buf.validate.field).sfixed32.lt = 10];
	//	}
	//
	// ```
	Lt int32 `protobuf:"fixed32,2,opt,name=lt,oneof"`
}

type SFixed32Rules_Lte struct {
	// `lte` requires the field value to be less than or equal to the specified
	// value (field <= value). If the field value is greater than the specified
	// value, an error message is generated.
	//
	// ```proto
	//
	//	message MySFixed32 {
	//	  // value must be less than or equal to 10
	//	  sfixed32 value = 1 [(buf.validate.field).sfixed32.lte = 10];
	//	}
	//
	// ```
	Lte int32 `protobuf:"fixed32,3,opt,name=lte,oneof"`
}

func (*SFixed32Rules_Lt) isSFixed32Rules_LessThan() {}

func (*SFixed32Rules_Lte) isSFixed32Rules_LessThan() {}

type isSFixed32Rules_GreaterThan interface {
	isSFixed32Rules_GreaterThan()
}

type SFixed32Rules_Gt struct {
	// `gt` requires the field value to be greater than the specified value
	// (exclusive). If the value of `gt` is larger than a specified `lt` or
	// `lte`, the range is reversed, and the field value must be outside the
	// specified range. If the field value doesn't meet the required conditions,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MySFixed32 {
	//	  // value must be greater than 5 [sfixed32.gt]
	//	  sfixed32 value = 1 [(buf.validate.field).sfixed32.gt = 5];
	//
	//	  // value must be greater than 5 and less than 10 [sfixed32.gt_lt]
	//	  sfixed32 other_value = 2 [(buf.validate.field).sfixed32 = { gt: 5, lt: 10 }];
	//
	//	  // value must be greater than 10 or less than 5 [sfixed32.gt_lt_exclusive]
	//	  sfixed32 another_value = 3 [(buf.validate.field).sfixed32 = { gt: 10, lt: 5 }];
	//	}
	//
	// ```
	Gt int32 `protobuf:"fixed32,4,opt,name=gt,oneof"`
}

type SFixed32Rules_Gte struct {
	// `gte` requires the field value to be greater than or equal to the specified
	// value (exclusive). If the value of `gte` is larger than a specified `lt`
	// or `lte`, the range is reversed, and the field value must be outside the
	// specified range. If the field value doesn't meet the required conditions,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MySFixed32 {
	//	  // value must be greater than or equal to 5 [sfixed32.gte]
	//	  sfixed32 value = 1 [(buf.validate.field).sfixed32.gte = 5];
	//
	//	  // value must be greater than or equal to 5 and less than 10 [sfixed32.gte_lt]
	//	  sfixed32 other_value = 2 [(buf.validate.field).sfixed32 = { gte: 5, lt: 10 }];
	//
	//	  // value must be greater than or equal to 10 or less than 5 [sfixed32.gte_lt_exclusive]
	//	  sfixed32 another_value = 3 [(buf.validate.field).sfixed32 = { gte: 10, lt: 5 }];
	//	}
	//
	// ```
	Gte int32 `protobuf:"fixed32,5,opt,name=gte,oneof"`
}

func (*SFixed32Rules_Gt) isSFixed32Rules_GreaterThan() {}

func (*SFixed32Rules_Gte) isSFixed32Rules_GreaterThan() {}

// SFixed64Rules describes the constraints applied to `fixed64` values.
type SFixed64Rules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// `const` requires the field value to exactly match the specified value. If
	// the field value doesn't match, an error message is generated.
	//
	// ```proto
	//
	//	message MySFixed64 {
	//	  // value must equal 42
	//	  sfixed64 value = 1 [(buf.validate.field).sfixed64.const = 42];
	//	}
	//
	// ```
	Const *int64 `protobuf:"fixed64,1,opt,name=const" json:"const,omitempty"`
	// Types that are valid to be assigned to LessThan:
	//
	//	*SFixed64Rules_Lt
	//	*SFixed64Rules_Lte
	LessThan isSFixed64Rules_LessThan `protobuf_oneof:"less_than"`
	// Types that are valid to be assigned to GreaterThan:
	//
	//	*SFixed64Rules_Gt
	//	*SFixed64Rules_Gte
	GreaterThan isSFixed64Rules_GreaterThan `protobuf_oneof:"greater_than"`
	// `in` requires the field value to be equal to one of the specified values.
	// If the field value isn't one of the specified values, an error message is
	// generated.
	//
	// ```proto
	//
	//	message MySFixed64 {
	//	  // value must be in list [1, 2, 3]
	//	  sfixed64 value = 1 [(buf.validate.field).sfixed64 = { in: [1, 2, 3] }];
	//	}
	//
	// ```
	In []int64 `protobuf:"fixed64,6,rep,name=in" json:"in,omitempty"`
	// `not_in` requires the field value to not be equal to any of the specified
	// values. If the field value is one of the specified values, an error
	// message is generated.
	//
	// ```proto
	//
	//	message MySFixed64 {
	//	  // value must not be in list [1, 2, 3]
	//	  sfixed64 value = 1 [(buf.validate.field).sfixed64 = { not_in: [1, 2, 3] }];
	//	}
	//
	// ```
	NotIn []int64 `protobuf:"fixed64,7,rep,name=not_in,json=notIn" json:"not_in,omitempty"`
	// `example` specifies values that the field may have. These values SHOULD
	// conform to other constraints. `example` values will not impact validation
	// but may be used as helpful guidance on how to populate the given field.
	//
	// ```proto
	//
	//	message MySFixed64 {
	//	  sfixed64 value = 1 [
	//	    (buf.validate.field).sfixed64.example = 1,
	//	    (buf.validate.field).sfixed64.example = 2
	//	  ];
	//	}
	//
	// ```
	Example         []int64 `protobuf:"fixed64,8,rep,name=example" json:"example,omitempty"`
	extensionFields protoimpl.ExtensionFields
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *SFixed64Rules) Reset() {
	*x = SFixed64Rules{}
	mi := &file_buf_validate_validate_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SFixed64Rules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SFixed64Rules) ProtoMessage() {}

func (x *SFixed64Rules) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_validate_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SFixed64Rules.ProtoReflect.Descriptor instead.
func (*SFixed64Rules) Descriptor() ([]byte, []int) {
	return file_buf_validate_validate_proto_rawDescGZIP(), []int{16}
}

func (x *SFixed64Rules) GetConst() int64 {
	if x != nil && x.Const != nil {
		return *x.Const
	}
	return 0
}

func (x *SFixed64Rules) GetLessThan() isSFixed64Rules_LessThan {
	if x != nil {
		return x.LessThan
	}
	return nil
}

func (x *SFixed64Rules) GetLt() int64 {
	if x != nil {
		if x, ok := x.LessThan.(*SFixed64Rules_Lt); ok {
			return x.Lt
		}
	}
	return 0
}

func (x *SFixed64Rules) GetLte() int64 {
	if x != nil {
		if x, ok := x.LessThan.(*SFixed64Rules_Lte); ok {
			return x.Lte
		}
	}
	return 0
}

func (x *SFixed64Rules) GetGreaterThan() isSFixed64Rules_GreaterThan {
	if x != nil {
		return x.GreaterThan
	}
	return nil
}

func (x *SFixed64Rules) GetGt() int64 {
	if x != nil {
		if x, ok := x.GreaterThan.(*SFixed64Rules_Gt); ok {
			return x.Gt
		}
	}
	return 0
}

func (x *SFixed64Rules) GetGte() int64 {
	if x != nil {
		if x, ok := x.GreaterThan.(*SFixed64Rules_Gte); ok {
			return x.Gte
		}
	}
	return 0
}

func (x *SFixed64Rules) GetIn() []int64 {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *SFixed64Rules) GetNotIn() []int64 {
	if x != nil {
		return x.NotIn
	}
	return nil
}

func (x *SFixed64Rules) GetExample() []int64 {
	if x != nil {
		return x.Example
	}
	return nil
}

type isSFixed64Rules_LessThan interface {
	isSFixed64Rules_LessThan()
}

type SFixed64Rules_Lt struct {
	// `lt` requires the field value to be less than the specified value (field <
	// value). If the field value is equal to or greater than the specified value,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MySFixed64 {
	//	  // value must be less than 10
	//	  sfixed64 value = 1 [(buf.validate.field).sfixed64.lt = 10];
	//	}
	//
	// ```
	Lt int64 `protobuf:"fixed64,2,opt,name=lt,oneof"`
}

type SFixed64Rules_Lte struct {
	// `lte` requires the field value to be less than or equal to the specified
	// value (field <= value). If the field value is greater than the specified
	// value, an error message is generated.
	//
	// ```proto
	//
	//	message MySFixed64 {
	//	  // value must be less than or equal to 10
	//	  sfixed64 value = 1 [(buf.validate.field).sfixed64.lte = 10];
	//	}
	//
	// ```
	Lte int64 `protobuf:"fixed64,3,opt,name=lte,oneof"`
}

func (*SFixed64Rules_Lt) isSFixed64Rules_LessThan() {}

func (*SFixed64Rules_Lte) isSFixed64Rules_LessThan() {}

type isSFixed64Rules_GreaterThan interface {
	isSFixed64Rules_GreaterThan()
}

type SFixed64Rules_Gt struct {
	// `gt` requires the field value to be greater than the specified value
	// (exclusive). If the value of `gt` is larger than a specified `lt` or
	// `lte`, the range is reversed, and the field value must be outside the
	// specified range. If the field value doesn't meet the required conditions,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MySFixed64 {
	//	  // value must be greater than 5 [sfixed64.gt]
	//	  sfixed64 value = 1 [(buf.validate.field).sfixed64.gt = 5];
	//
	//	  // value must be greater than 5 and less than 10 [sfixed64.gt_lt]
	//	  sfixed64 other_value = 2 [(buf.validate.field).sfixed64 = { gt: 5, lt: 10 }];
	//
	//	  // value must be greater than 10 or less than 5 [sfixed64.gt_lt_exclusive]
	//	  sfixed64 another_value = 3 [(buf.validate.field).sfixed64 = { gt: 10, lt: 5 }];
	//	}
	//
	// ```
	Gt int64 `protobuf:"fixed64,4,opt,name=gt,oneof"`
}

type SFixed64Rules_Gte struct {
	// `gte` requires the field value to be greater than or equal to the specified
	// value (exclusive). If the value of `gte` is larger than a specified `lt`
	// or `lte`, the range is reversed, and the field value must be outside the
	// specified range. If the field value doesn't meet the required conditions,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MySFixed64 {
	//	  // value must be greater than or equal to 5 [sfixed64.gte]
	//	  sfixed64 value = 1 [(buf.validate.field).sfixed64.gte = 5];
	//
	//	  // value must be greater than or equal to 5 and less than 10 [sfixed64.gte_lt]
	//	  sfixed64 other_value = 2 [(buf.validate.field).sfixed64 = { gte: 5, lt: 10 }];
	//
	//	  // value must be greater than or equal to 10 or less than 5 [sfixed64.gte_lt_exclusive]
	//	  sfixed64 another_value = 3 [(buf.validate.field).sfixed64 = { gte: 10, lt: 5 }];
	//	}
	//
	// ```
	Gte int64 `protobuf:"fixed64,5,opt,name=gte,oneof"`
}

func (*SFixed64Rules_Gt) isSFixed64Rules_GreaterThan() {}

func (*SFixed64Rules_Gte) isSFixed64Rules_GreaterThan() {}

// BoolRules describes the constraints applied to `bool` values. These rules
// may also be applied to the `google.protobuf.BoolValue` Well-Known-Type.
type BoolRules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// `const` requires the field value to exactly match the specified boolean value.
	// If the field value doesn't match, an error message is generated.
	//
	// ```proto
	//
	//	message MyBool {
	//	  // value must equal true
	//	  bool value = 1 [(buf.validate.field).bool.const = true];
	//	}
	//
	// ```
	Const *bool `protobuf:"varint,1,opt,name=const" json:"const,omitempty"`
	// `example` specifies values that the field may have. These values SHOULD
	// conform to other constraints. `example` values will not impact validation
	// but may be used as helpful guidance on how to populate the given field.
	//
	// ```proto
	//
	//	message MyBool {
	//	  bool value = 1 [
	//	    (buf.validate.field).bool.example = 1,
	//	    (buf.validate.field).bool.example = 2
	//	  ];
	//	}
	//
	// ```
	Example         []bool `protobuf:"varint,2,rep,name=example" json:"example,omitempty"`
	extensionFields protoimpl.ExtensionFields
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *BoolRules) Reset() {
	*x = BoolRules{}
	mi := &file_buf_validate_validate_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BoolRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolRules) ProtoMessage() {}

func (x *BoolRules) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_validate_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoolRules.ProtoReflect.Descriptor instead.
func (*BoolRules) Descriptor() ([]byte, []int) {
	return file_buf_validate_validate_proto_rawDescGZIP(), []int{17}
}

func (x *BoolRules) GetConst() bool {
	if x != nil && x.Const != nil {
		return *x.Const
	}
	return false
}

func (x *BoolRules) GetExample() []bool {
	if x != nil {
		return x.Example
	}
	return nil
}

// StringRules describes the constraints applied to `string` values These
// rules may also be applied to the `google.protobuf.StringValue` Well-Known-Type.
type StringRules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// `const` requires the field value to exactly match the specified value. If
	// the field value doesn't match, an error message is generated.
	//
	// ```proto
	//
	//	message MyString {
	//	  // value must equal `hello`
	//	  string value = 1 [(buf.validate.field).string.const = "hello"];
	//	}
	//
	// ```
	Const *string `protobuf:"bytes,1,opt,name=const" json:"const,omitempty"`
	// `len` dictates that the field value must have the specified
	// number of characters (Unicode code points), which may differ from the number
	// of bytes in the string. If the field value does not meet the specified
	// length, an error message will be generated.
	//
	// ```proto
	//
	//	message MyString {
	//	  // value length must be 5 characters
	//	  string value = 1 [(buf.validate.field).string.len = 5];
	//	}
	//
	// ```
	Len *uint64 `protobuf:"varint,19,opt,name=len" json:"len,omitempty"`
	// `min_len` specifies that the field value must have at least the specified
	// number of characters (Unicode code points), which may differ from the number
	// of bytes in the string. If the field value contains fewer characters, an error
	// message will be generated.
	//
	// ```proto
	//
	//	message MyString {
	//	  // value length must be at least 3 characters
	//	  string value = 1 [(buf.validate.field).string.min_len = 3];
	//	}
	//
	// ```
	MinLen *uint64 `protobuf:"varint,2,opt,name=min_len,json=minLen" json:"min_len,omitempty"`
	// `max_len` specifies that the field value must have no more than the specified
	// number of characters (Unicode code points), which may differ from the
	// number of bytes in the string. If the field value contains more characters,
	// an error message will be generated.
	//
	// ```proto
	//
	//	message MyString {
	//	  // value length must be at most 10 characters
	//	  string value = 1 [(buf.validate.field).string.max_len = 10];
	//	}
	//
	// ```
	MaxLen *uint64 `protobuf:"varint,3,opt,name=max_len,json=maxLen" json:"max_len,omitempty"`
	// `len_bytes` dictates that the field value must have the specified number of
	// bytes. If the field value does not match the specified length in bytes,
	// an error message will be generated.
	//
	// ```proto
	//
	//	message MyString {
	//	  // value length must be 6 bytes
	//	  string value = 1 [(buf.validate.field).string.len_bytes = 6];
	//	}
	//
	// ```
	LenBytes *uint64 `protobuf:"varint,20,opt,name=len_bytes,json=lenBytes" json:"len_bytes,omitempty"`
	// `min_bytes` specifies that the field value must have at least the specified
	// number of bytes. If the field value contains fewer bytes, an error message
	// will be generated.
	//
	// ```proto
	//
	//	message MyString {
	//	  // value length must be at least 4 bytes
	//	  string value = 1 [(buf.validate.field).string.min_bytes = 4];
	//	}
	//
	// ```
	MinBytes *uint64 `protobuf:"varint,4,opt,name=min_bytes,json=minBytes" json:"min_bytes,omitempty"`
	// `max_bytes` specifies that the field value must have no more than the
	// specified number of bytes. If the field value contains more bytes, an
	// error message will be generated.
	//
	// ```proto
	//
	//	message MyString {
	//	  // value length must be at most 8 bytes
	//	  string value = 1 [(buf.validate.field).string.max_bytes = 8];
	//	}
	//
	// ```
	MaxBytes *uint64 `protobuf:"varint,5,opt,name=max_bytes,json=maxBytes" json:"max_bytes,omitempty"`
	// `pattern` specifies that the field value must match the specified
	// regular expression (RE2 syntax), with the expression provided without any
	// delimiters. If the field value doesn't match the regular expression, an
	// error message will be generated.
	//
	// ```proto
	//
	//	message MyString {
	//	  // value does not match regex pattern `^[a-zA-Z]//$`
	//	  string value = 1 [(buf.validate.field).string.pattern = "^[a-zA-Z]//$"];
	//	}
	//
	// ```
	Pattern *string `protobuf:"bytes,6,opt,name=pattern" json:"pattern,omitempty"`
	// `prefix` specifies that the field value must have the
	// specified substring at the beginning of the string. If the field value
	// doesn't start with the specified prefix, an error message will be
	// generated.
	//
	// ```proto
	//
	//	message MyString {
	//	  // value does not have prefix `pre`
	//	  string value = 1 [(buf.validate.field).string.prefix = "pre"];
	//	}
	//
	// ```
	Prefix *string `protobuf:"bytes,7,opt,name=prefix" json:"prefix,omitempty"`
	// `suffix` specifies that the field value must have the
	// specified substring at the end of the string. If the field value doesn't
	// end with the specified suffix, an error message will be generated.
	//
	// ```proto
	//
	//	message MyString {
	//	  // value does not have suffix `post`
	//	  string value = 1 [(buf.validate.field).string.suffix = "post"];
	//	}
	//
	// ```
	Suffix *string `protobuf:"bytes,8,opt,name=suffix" json:"suffix,omitempty"`
	// `contains` specifies that the field value must have the
	// specified substring anywhere in the string. If the field value doesn't
	// contain the specified substring, an error message will be generated.
	//
	// ```proto
	//
	//	message MyString {
	//	  // value does not contain substring `inside`.
	//	  string value = 1 [(buf.validate.field).string.contains = "inside"];
	//	}
	//
	// ```
	Contains *string `protobuf:"bytes,9,opt,name=contains" json:"contains,omitempty"`
	// `not_contains` specifies that the field value must not have the
	// specified substring anywhere in the string. If the field value contains
	// the specified substring, an error message will be generated.
	//
	// ```proto
	//
	//	message MyString {
	//	  // value contains substring `inside`.
	//	  string value = 1 [(buf.validate.field).string.not_contains = "inside"];
	//	}
	//
	// ```
	NotContains *string `protobuf:"bytes,23,opt,name=not_contains,json=notContains" json:"not_contains,omitempty"`
	// `in` specifies that the field value must be equal to one of the specified
	// values. If the field value isn't one of the specified values, an error
	// message will be generated.
	//
	// ```proto
	//
	//	message MyString {
	//	  // value must be in list ["apple", "banana"]
	//	  string value = 1 [(buf.validate.field).string.in = "apple", (buf.validate.field).string.in = "banana"];
	//	}
	//
	// ```
	In []string `protobuf:"bytes,10,rep,name=in" json:"in,omitempty"`
	// `not_in` specifies that the field value cannot be equal to any
	// of the specified values. If the field value is one of the specified values,
	// an error message will be generated.
	// ```proto
	//
	//	message MyString {
	//	  // value must not be in list ["orange", "grape"]
	//	  string value = 1 [(buf.validate.field).string.not_in = "orange", (buf.validate.field).string.not_in = "grape"];
	//	}
	//
	// ```
	NotIn []string `protobuf:"bytes,11,rep,name=not_in,json=notIn" json:"not_in,omitempty"`
	// `WellKnown` rules provide advanced constraints against common string
	// patterns
	//
	// Types that are valid to be assigned to WellKnown:
	//
	//	*StringRules_Email
	//	*StringRules_Hostname
	//	*StringRules_Ip
	//	*StringRules_Ipv4
	//	*StringRules_Ipv6
	//	*StringRules_Uri
	//	*StringRules_UriRef
	//	*StringRules_Address
	//	*StringRules_Uuid
	//	*StringRules_Tuuid
	//	*StringRules_IpWithPrefixlen
	//	*StringRules_Ipv4WithPrefixlen
	//	*StringRules_Ipv6WithPrefixlen
	//	*StringRules_IpPrefix
	//	*StringRules_Ipv4Prefix
	//	*StringRules_Ipv6Prefix
	//	*StringRules_HostAndPort
	//	*StringRules_WellKnownRegex
	WellKnown isStringRules_WellKnown `protobuf_oneof:"well_known"`
	// This applies to regexes `HTTP_HEADER_NAME` and `HTTP_HEADER_VALUE` to
	// enable strict header validation. By default, this is true, and HTTP header
	// validations are [RFC-compliant](https://datatracker.ietf.org/doc/html/rfc7230#section-3). Setting to false will enable looser
	// validations that only disallow `\r\n\0` characters, which can be used to
	// bypass header matching rules.
	//
	// ```proto
	//
	//	message MyString {
	//	  // The field `value` must have be a valid HTTP headers, but not enforced with strict rules.
	//	  string value = 1 [(buf.validate.field).string.strict = false];
	//	}
	//
	// ```
	Strict *bool `protobuf:"varint,25,opt,name=strict" json:"strict,omitempty"`
	// `example` specifies values that the field may have. These values SHOULD
	// conform to other constraints. `example` values will not impact validation
	// but may be used as helpful guidance on how to populate the given field.
	//
	// ```proto
	//
	//	message MyString {
	//	  string value = 1 [
	//	    (buf.validate.field).string.example = "hello",
	//	    (buf.validate.field).string.example = "world"
	//	  ];
	//	}
	//
	// ```
	Example         []string `protobuf:"bytes,34,rep,name=example" json:"example,omitempty"`
	extensionFields protoimpl.ExtensionFields
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *StringRules) Reset() {
	*x = StringRules{}
	mi := &file_buf_validate_validate_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StringRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringRules) ProtoMessage() {}

func (x *StringRules) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_validate_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringRules.ProtoReflect.Descriptor instead.
func (*StringRules) Descriptor() ([]byte, []int) {
	return file_buf_validate_validate_proto_rawDescGZIP(), []int{18}
}

func (x *StringRules) GetConst() string {
	if x != nil && x.Const != nil {
		return *x.Const
	}
	return ""
}

func (x *StringRules) GetLen() uint64 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *StringRules) GetMinLen() uint64 {
	if x != nil && x.MinLen != nil {
		return *x.MinLen
	}
	return 0
}

func (x *StringRules) GetMaxLen() uint64 {
	if x != nil && x.MaxLen != nil {
		return *x.MaxLen
	}
	return 0
}

func (x *StringRules) GetLenBytes() uint64 {
	if x != nil && x.LenBytes != nil {
		return *x.LenBytes
	}
	return 0
}

func (x *StringRules) GetMinBytes() uint64 {
	if x != nil && x.MinBytes != nil {
		return *x.MinBytes
	}
	return 0
}

func (x *StringRules) GetMaxBytes() uint64 {
	if x != nil && x.MaxBytes != nil {
		return *x.MaxBytes
	}
	return 0
}

func (x *StringRules) GetPattern() string {
	if x != nil && x.Pattern != nil {
		return *x.Pattern
	}
	return ""
}

func (x *StringRules) GetPrefix() string {
	if x != nil && x.Prefix != nil {
		return *x.Prefix
	}
	return ""
}

func (x *StringRules) GetSuffix() string {
	if x != nil && x.Suffix != nil {
		return *x.Suffix
	}
	return ""
}

func (x *StringRules) GetContains() string {
	if x != nil && x.Contains != nil {
		return *x.Contains
	}
	return ""
}

func (x *StringRules) GetNotContains() string {
	if x != nil && x.NotContains != nil {
		return *x.NotContains
	}
	return ""
}

func (x *StringRules) GetIn() []string {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *StringRules) GetNotIn() []string {
	if x != nil {
		return x.NotIn
	}
	return nil
}

func (x *StringRules) GetWellKnown() isStringRules_WellKnown {
	if x != nil {
		return x.WellKnown
	}
	return nil
}

func (x *StringRules) GetEmail() bool {
	if x != nil {
		if x, ok := x.WellKnown.(*StringRules_Email); ok {
			return x.Email
		}
	}
	return false
}

func (x *StringRules) GetHostname() bool {
	if x != nil {
		if x, ok := x.WellKnown.(*StringRules_Hostname); ok {
			return x.Hostname
		}
	}
	return false
}

func (x *StringRules) GetIp() bool {
	if x != nil {
		if x, ok := x.WellKnown.(*StringRules_Ip); ok {
			return x.Ip
		}
	}
	return false
}

func (x *StringRules) GetIpv4() bool {
	if x != nil {
		if x, ok := x.WellKnown.(*StringRules_Ipv4); ok {
			return x.Ipv4
		}
	}
	return false
}

func (x *StringRules) GetIpv6() bool {
	if x != nil {
		if x, ok := x.WellKnown.(*StringRules_Ipv6); ok {
			return x.Ipv6
		}
	}
	return false
}

func (x *StringRules) GetUri() bool {
	if x != nil {
		if x, ok := x.WellKnown.(*StringRules_Uri); ok {
			return x.Uri
		}
	}
	return false
}

func (x *StringRules) GetUriRef() bool {
	if x != nil {
		if x, ok := x.WellKnown.(*StringRules_UriRef); ok {
			return x.UriRef
		}
	}
	return false
}

func (x *StringRules) GetAddress() bool {
	if x != nil {
		if x, ok := x.WellKnown.(*StringRules_Address); ok {
			return x.Address
		}
	}
	return false
}

func (x *StringRules) GetUuid() bool {
	if x != nil {
		if x, ok := x.WellKnown.(*StringRules_Uuid); ok {
			return x.Uuid
		}
	}
	return false
}

func (x *StringRules) GetTuuid() bool {
	if x != nil {
		if x, ok := x.WellKnown.(*StringRules_Tuuid); ok {
			return x.Tuuid
		}
	}
	return false
}

func (x *StringRules) GetIpWithPrefixlen() bool {
	if x != nil {
		if x, ok := x.WellKnown.(*StringRules_IpWithPrefixlen); ok {
			return x.IpWithPrefixlen
		}
	}
	return false
}

func (x *StringRules) GetIpv4WithPrefixlen() bool {
	if x != nil {
		if x, ok := x.WellKnown.(*StringRules_Ipv4WithPrefixlen); ok {
			return x.Ipv4WithPrefixlen
		}
	}
	return false
}

func (x *StringRules) GetIpv6WithPrefixlen() bool {
	if x != nil {
		if x, ok := x.WellKnown.(*StringRules_Ipv6WithPrefixlen); ok {
			return x.Ipv6WithPrefixlen
		}
	}
	return false
}

func (x *StringRules) GetIpPrefix() bool {
	if x != nil {
		if x, ok := x.WellKnown.(*StringRules_IpPrefix); ok {
			return x.IpPrefix
		}
	}
	return false
}

func (x *StringRules) GetIpv4Prefix() bool {
	if x != nil {
		if x, ok := x.WellKnown.(*StringRules_Ipv4Prefix); ok {
			return x.Ipv4Prefix
		}
	}
	return false
}

func (x *StringRules) GetIpv6Prefix() bool {
	if x != nil {
		if x, ok := x.WellKnown.(*StringRules_Ipv6Prefix); ok {
			return x.Ipv6Prefix
		}
	}
	return false
}

func (x *StringRules) GetHostAndPort() bool {
	if x != nil {
		if x, ok := x.WellKnown.(*StringRules_HostAndPort); ok {
			return x.HostAndPort
		}
	}
	return false
}

func (x *StringRules) GetWellKnownRegex() KnownRegex {
	if x != nil {
		if x, ok := x.WellKnown.(*StringRules_WellKnownRegex); ok {
			return x.WellKnownRegex
		}
	}
	return KnownRegex_KNOWN_REGEX_UNSPECIFIED
}

func (x *StringRules) GetStrict() bool {
	if x != nil && x.Strict != nil {
		return *x.Strict
	}
	return false
}

func (x *StringRules) GetExample() []string {
	if x != nil {
		return x.Example
	}
	return nil
}

type isStringRules_WellKnown interface {
	isStringRules_WellKnown()
}

type StringRules_Email struct {
	// `email` specifies that the field value must be a valid email address
	// (addr-spec only) as defined by [RFC 5322](https://datatracker.ietf.org/doc/html/rfc5322#section-3.4.1).
	// If the field value isn't a valid email address, an error message will be generated.
	//
	// ```proto
	//
	//	message MyString {
	//	  // value must be a valid email address
	//	  string value = 1 [(buf.validate.field).string.email = true];
	//	}
	//
	// ```
	Email bool `protobuf:"varint,12,opt,name=email,oneof"`
}

type StringRules_Hostname struct {
	// `hostname` specifies that the field value must be a valid
	// hostname as defined by [RFC 1034](https://datatracker.ietf.org/doc/html/rfc1034#section-3.5). This constraint doesn't support
	// internationalized domain names (IDNs). If the field value isn't a
	// valid hostname, an error message will be generated.
	//
	// ```proto
	//
	//	message MyString {
	//	  // value must be a valid hostname
	//	  string value = 1 [(buf.validate.field).string.hostname = true];
	//	}
	//
	// ```
	Hostname bool `protobuf:"varint,13,opt,name=hostname,oneof"`
}

type StringRules_Ip struct {
	// `ip` specifies that the field value must be a valid IP
	// (v4 or v6) address, without surrounding square brackets for IPv6 addresses.
	// If the field value isn't a valid IP address, an error message will be
	// generated.
	//
	// ```proto
	//
	//	message MyString {
	//	  // value must be a valid IP address
	//	  string value = 1 [(buf.validate.field).string.ip = true];
	//	}
	//
	// ```
	Ip bool `protobuf:"varint,14,opt,name=ip,oneof"`
}

type StringRules_Ipv4 struct {
	// `ipv4` specifies that the field value must be a valid IPv4
	// address. If the field value isn't a valid IPv4 address, an error message
	// will be generated.
	//
	// ```proto
	//
	//	message MyString {
	//	  // value must be a valid IPv4 address
	//	  string value = 1 [(buf.validate.field).string.ipv4 = true];
	//	}
	//
	// ```
	Ipv4 bool `protobuf:"varint,15,opt,name=ipv4,oneof"`
}

type StringRules_Ipv6 struct {
	// `ipv6` specifies that the field value must be a valid
	// IPv6 address, without surrounding square brackets. If the field value is
	// not a valid IPv6 address, an error message will be generated.
	//
	// ```proto
	//
	//	message MyString {
	//	  // value must be a valid IPv6 address
	//	  string value = 1 [(buf.validate.field).string.ipv6 = true];
	//	}
	//
	// ```
	Ipv6 bool `protobuf:"varint,16,opt,name=ipv6,oneof"`
}

type StringRules_Uri struct {
	// `uri` specifies that the field value must be a valid URI as defined by
	// [RFC 3986](https://datatracker.ietf.org/doc/html/rfc3986#section-3).
	//
	// If the field value isn't a valid URI, an error message will be generated.
	//
	// ```proto
	//
	//	message MyString {
	//	  // value must be a valid URI
	//	  string value = 1 [(buf.validate.field).string.uri = true];
	//	}
	//
	// ```
	Uri bool `protobuf:"varint,17,opt,name=uri,oneof"`
}

type StringRules_UriRef struct {
	// `uri_ref` specifies that the field value must be a valid URI Reference as
	// defined by [RFC 3986](https://datatracker.ietf.org/doc/html/rfc3986#section-4.1).
	//
	// A URI Reference is either a [URI](https://datatracker.ietf.org/doc/html/rfc3986#section-3),
	// or a [Relative Reference](https://datatracker.ietf.org/doc/html/rfc3986#section-4.2).
	//
	// If the field value isn't a valid URI Reference, an error message will be
	// generated.
	//
	// ```proto
	//
	//	message MyString {
	//	  // value must be a valid URI Reference
	//	  string value = 1 [(buf.validate.field).string.uri_ref = true];
	//	}
	//
	// ```
	UriRef bool `protobuf:"varint,18,opt,name=uri_ref,json=uriRef,oneof"`
}

type StringRules_Address struct {
	// `address` specifies that the field value must be either a valid hostname
	// as defined by [RFC 1034](https://datatracker.ietf.org/doc/html/rfc1034#section-3.5)
	// (which doesn't support internationalized domain names or IDNs) or a valid
	// IP (v4 or v6). If the field value isn't a valid hostname or IP, an error
	// message will be generated.
	//
	// ```proto
	//
	//	message MyString {
	//	  // value must be a valid hostname, or ip address
	//	  string value = 1 [(buf.validate.field).string.address = true];
	//	}
	//
	// ```
	Address bool `protobuf:"varint,21,opt,name=address,oneof"`
}

type StringRules_Uuid struct {
	// `uuid` specifies that the field value must be a valid UUID as defined by
	// [RFC 4122](https://datatracker.ietf.org/doc/html/rfc4122#section-4.1.2). If the
	// field value isn't a valid UUID, an error message will be generated.
	//
	// ```proto
	//
	//	message MyString {
	//	  // value must be a valid UUID
	//	  string value = 1 [(buf.validate.field).string.uuid = true];
	//	}
	//
	// ```
	Uuid bool `protobuf:"varint,22,opt,name=uuid,oneof"`
}

type StringRules_Tuuid struct {
	// `tuuid` (trimmed UUID) specifies that the field value must be a valid UUID as
	// defined by [RFC 4122](https://datatracker.ietf.org/doc/html/rfc4122#section-4.1.2) with all dashes
	// omitted. If the field value isn't a valid UUID without dashes, an error message
	// will be generated.
	//
	// ```proto
	//
	//	message MyString {
	//	  // value must be a valid trimmed UUID
	//	  string value = 1 [(buf.validate.field).string.tuuid = true];
	//	}
	//
	// ```
	Tuuid bool `protobuf:"varint,33,opt,name=tuuid,oneof"`
}

type StringRules_IpWithPrefixlen struct {
	// `ip_with_prefixlen` specifies that the field value must be a valid IP (v4 or v6)
	// address with prefix length. If the field value isn't a valid IP with prefix
	// length, an error message will be generated.
	//
	// ```proto
	//
	//	message MyString {
	//	  // value must be a valid IP with prefix length
	//	   string value = 1 [(buf.validate.field).string.ip_with_prefixlen = true];
	//	}
	//
	// ```
	IpWithPrefixlen bool `protobuf:"varint,26,opt,name=ip_with_prefixlen,json=ipWithPrefixlen,oneof"`
}

type StringRules_Ipv4WithPrefixlen struct {
	// `ipv4_with_prefixlen` specifies that the field value must be a valid
	// IPv4 address with prefix.
	// If the field value isn't a valid IPv4 address with prefix length,
	// an error message will be generated.
	//
	// ```proto
	//
	//	message MyString {
	//	  // value must be a valid IPv4 address with prefix length
	//	   string value = 1 [(buf.validate.field).string.ipv4_with_prefixlen = true];
	//	}
	//
	// ```
	Ipv4WithPrefixlen bool `protobuf:"varint,27,opt,name=ipv4_with_prefixlen,json=ipv4WithPrefixlen,oneof"`
}

type StringRules_Ipv6WithPrefixlen struct {
	// `ipv6_with_prefixlen` specifies that the field value must be a valid
	// IPv6 address with prefix length.
	// If the field value is not a valid IPv6 address with prefix length,
	// an error message will be generated.
	//
	// ```proto
	//
	//	message MyString {
	//	  // value must be a valid IPv6 address prefix length
	//	   string value = 1 [(buf.validate.field).string.ipv6_with_prefixlen = true];
	//	}
	//
	// ```
	Ipv6WithPrefixlen bool `protobuf:"varint,28,opt,name=ipv6_with_prefixlen,json=ipv6WithPrefixlen,oneof"`
}

type StringRules_IpPrefix struct {
	// `ip_prefix` specifies that the field value must be a valid IP (v4 or v6) prefix.
	// If the field value isn't a valid IP prefix, an error message will be
	// generated. The prefix must have all zeros for the masked bits of the prefix (e.g.,
	// `127.0.0.0/16`, not `127.0.0.1/16`).
	//
	// ```proto
	//
	//	message MyString {
	//	  // value must be a valid IP prefix
	//	   string value = 1 [(buf.validate.field).string.ip_prefix = true];
	//	}
	//
	// ```
	IpPrefix bool `protobuf:"varint,29,opt,name=ip_prefix,json=ipPrefix,oneof"`
}

type StringRules_Ipv4Prefix struct {
	// `ipv4_prefix` specifies that the field value must be a valid IPv4
	// prefix. If the field value isn't a valid IPv4 prefix, an error message
	// will be generated. The prefix must have all zeros for the masked bits of
	// the prefix (e.g., `127.0.0.0/16`, not `127.0.0.1/16`).
	//
	// ```proto
	//
	//	message MyString {
	//	  // value must be a valid IPv4 prefix
	//	   string value = 1 [(buf.validate.field).string.ipv4_prefix = true];
	//	}
	//
	// ```
	Ipv4Prefix bool `protobuf:"varint,30,opt,name=ipv4_prefix,json=ipv4Prefix,oneof"`
}

type StringRules_Ipv6Prefix struct {
	// `ipv6_prefix` specifies that the field value must be a valid IPv6 prefix.
	// If the field value is not a valid IPv6 prefix, an error message will be
	// generated. The prefix must have all zeros for the masked bits of the prefix
	// (e.g., `2001:db8::/48`, not `2001:db8::1/48`).
	//
	// ```proto
	//
	//	message MyString {
	//	  // value must be a valid IPv6 prefix
	//	   string value = 1 [(buf.validate.field).string.ipv6_prefix = true];
	//	}
	//
	// ```
	Ipv6Prefix bool `protobuf:"varint,31,opt,name=ipv6_prefix,json=ipv6Prefix,oneof"`
}

type StringRules_HostAndPort struct {
	// `host_and_port` specifies the field value must be a valid host and port
	// pair. The host must be a valid hostname or IP address while the port
	// must be in the range of 0-65535, inclusive. IPv6 addresses must be delimited
	// with square brackets (e.g., `[::1]:1234`).
	HostAndPort bool `protobuf:"varint,32,opt,name=host_and_port,json=hostAndPort,oneof"`
}

type StringRules_WellKnownRegex struct {
	// `well_known_regex` specifies a common well-known pattern
	// defined as a regex. If the field value doesn't match the well-known
	// regex, an error message will be generated.
	//
	// ```proto
	//
	//	message MyString {
	//	  // value must be a valid HTTP header value
	//	  string value = 1 [(buf.validate.field).string.well_known_regex = KNOWN_REGEX_HTTP_HEADER_VALUE];
	//	}
	//
	// ```
	//
	// #### KnownRegex
	//
	// `well_known_regex` contains some well-known patterns.
	//
	// | Name                          | Number | Description                               |
	// |-------------------------------|--------|-------------------------------------------|
	// | KNOWN_REGEX_UNSPECIFIED       | 0      |                                           |
	// | KNOWN_REGEX_HTTP_HEADER_NAME  | 1      | HTTP header name as defined by [RFC 7230](https://datatracker.ietf.org/doc/html/rfc7230#section-3.2)  |
	// | KNOWN_REGEX_HTTP_HEADER_VALUE | 2      | HTTP header value as defined by [RFC 7230](https://datatracker.ietf.org/doc/html/rfc7230#section-3.2.4) |
	WellKnownRegex KnownRegex `protobuf:"varint,24,opt,name=well_known_regex,json=wellKnownRegex,enum=buf.validate.KnownRegex,oneof"`
}

func (*StringRules_Email) isStringRules_WellKnown() {}

func (*StringRules_Hostname) isStringRules_WellKnown() {}

func (*StringRules_Ip) isStringRules_WellKnown() {}

func (*StringRules_Ipv4) isStringRules_WellKnown() {}

func (*StringRules_Ipv6) isStringRules_WellKnown() {}

func (*StringRules_Uri) isStringRules_WellKnown() {}

func (*StringRules_UriRef) isStringRules_WellKnown() {}

func (*StringRules_Address) isStringRules_WellKnown() {}

func (*StringRules_Uuid) isStringRules_WellKnown() {}

func (*StringRules_Tuuid) isStringRules_WellKnown() {}

func (*StringRules_IpWithPrefixlen) isStringRules_WellKnown() {}

func (*StringRules_Ipv4WithPrefixlen) isStringRules_WellKnown() {}

func (*StringRules_Ipv6WithPrefixlen) isStringRules_WellKnown() {}

func (*StringRules_IpPrefix) isStringRules_WellKnown() {}

func (*StringRules_Ipv4Prefix) isStringRules_WellKnown() {}

func (*StringRules_Ipv6Prefix) isStringRules_WellKnown() {}

func (*StringRules_HostAndPort) isStringRules_WellKnown() {}

func (*StringRules_WellKnownRegex) isStringRules_WellKnown() {}

// BytesRules describe the constraints applied to `bytes` values. These rules
// may also be applied to the `google.protobuf.BytesValue` Well-Known-Type.
type BytesRules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// `const` requires the field value to exactly match the specified bytes
	// value. If the field value doesn't match, an error message is generated.
	//
	// ```proto
	//
	//	message MyBytes {
	//	  // value must be "\x01\x02\x03\x04"
	//	  bytes value = 1 [(buf.validate.field).bytes.const = "\x01\x02\x03\x04"];
	//	}
	//
	// ```
	Const []byte `protobuf:"bytes,1,opt,name=const" json:"const,omitempty"`
	// `len` requires the field value to have the specified length in bytes.
	// If the field value doesn't match, an error message is generated.
	//
	// ```proto
	//
	//	message MyBytes {
	//	  // value length must be 4 bytes.
	//	  optional bytes value = 1 [(buf.validate.field).bytes.len = 4];
	//	}
	//
	// ```
	Len *uint64 `protobuf:"varint,13,opt,name=len" json:"len,omitempty"`
	// `min_len` requires the field value to have at least the specified minimum
	// length in bytes.
	// If the field value doesn't meet the requirement, an error message is generated.
	//
	// ```proto
	//
	//	message MyBytes {
	//	  // value length must be at least 2 bytes.
	//	  optional bytes value = 1 [(buf.validate.field).bytes.min_len = 2];
	//	}
	//
	// ```
	MinLen *uint64 `protobuf:"varint,2,opt,name=min_len,json=minLen" json:"min_len,omitempty"`
	// `max_len` requires the field value to have at most the specified maximum
	// length in bytes.
	// If the field value exceeds the requirement, an error message is generated.
	//
	// ```proto
	//
	//	message MyBytes {
	//	  // value must be at most 6 bytes.
	//	  optional bytes value = 1 [(buf.validate.field).bytes.max_len = 6];
	//	}
	//
	// ```
	MaxLen *uint64 `protobuf:"varint,3,opt,name=max_len,json=maxLen" json:"max_len,omitempty"`
	// `pattern` requires the field value to match the specified regular
	// expression ([RE2 syntax](https://github.com/google/re2/wiki/Syntax)).
	// The value of the field must be valid UTF-8 or validation will fail with a
	// runtime error.
	// If the field value doesn't match the pattern, an error message is generated.
	//
	// ```proto
	//
	//	message MyBytes {
	//	  // value must match regex pattern "^[a-zA-Z0-9]+$".
	//	  optional bytes value = 1 [(buf.validate.field).bytes.pattern = "^[a-zA-Z0-9]+$"];
	//	}
	//
	// ```
	Pattern *string `protobuf:"bytes,4,opt,name=pattern" json:"pattern,omitempty"`
	// `prefix` requires the field value to have the specified bytes at the
	// beginning of the string.
	// If the field value doesn't meet the requirement, an error message is generated.
	//
	// ```proto
	//
	//	message MyBytes {
	//	  // value does not have prefix \x01\x02
	//	  optional bytes value = 1 [(buf.validate.field).bytes.prefix = "\x01\x02"];
	//	}
	//
	// ```
	Prefix []byte `protobuf:"bytes,5,opt,name=prefix" json:"prefix,omitempty"`
	// `suffix` requires the field value to have the specified bytes at the end
	// of the string.
	// If the field value doesn't meet the requirement, an error message is generated.
	//
	// ```proto
	//
	//	message MyBytes {
	//	  // value does not have suffix \x03\x04
	//	  optional bytes value = 1 [(buf.validate.field).bytes.suffix = "\x03\x04"];
	//	}
	//
	// ```
	Suffix []byte `protobuf:"bytes,6,opt,name=suffix" json:"suffix,omitempty"`
	// `contains` requires the field value to have the specified bytes anywhere in
	// the string.
	// If the field value doesn't meet the requirement, an error message is generated.
	//
	// ```protobuf
	//
	//	message MyBytes {
	//	  // value does not contain \x02\x03
	//	  optional bytes value = 1 [(buf.validate.field).bytes.contains = "\x02\x03"];
	//	}
	//
	// ```
	Contains []byte `protobuf:"bytes,7,opt,name=contains" json:"contains,omitempty"`
	// `in` requires the field value to be equal to one of the specified
	// values. If the field value doesn't match any of the specified values, an
	// error message is generated.
	//
	// ```protobuf
	//
	//	message MyBytes {
	//	  // value must in ["\x01\x02", "\x02\x03", "\x03\x04"]
	//	  optional bytes value = 1 [(buf.validate.field).bytes.in = {"\x01\x02", "\x02\x03", "\x03\x04"}];
	//	}
	//
	// ```
	In [][]byte `protobuf:"bytes,8,rep,name=in" json:"in,omitempty"`
	// `not_in` requires the field value to be not equal to any of the specified
	// values.
	// If the field value matches any of the specified values, an error message is
	// generated.
	//
	// ```proto
	//
	//	message MyBytes {
	//	  // value must not in ["\x01\x02", "\x02\x03", "\x03\x04"]
	//	  optional bytes value = 1 [(buf.validate.field).bytes.not_in = {"\x01\x02", "\x02\x03", "\x03\x04"}];
	//	}
	//
	// ```
	NotIn [][]byte `protobuf:"bytes,9,rep,name=not_in,json=notIn" json:"not_in,omitempty"`
	// WellKnown rules provide advanced constraints against common byte
	// patterns
	//
	// Types that are valid to be assigned to WellKnown:
	//
	//	*BytesRules_Ip
	//	*BytesRules_Ipv4
	//	*BytesRules_Ipv6
	WellKnown isBytesRules_WellKnown `protobuf_oneof:"well_known"`
	// `example` specifies values that the field may have. These values SHOULD
	// conform to other constraints. `example` values will not impact validation
	// but may be used as helpful guidance on how to populate the given field.
	//
	// ```proto
	//
	//	message MyBytes {
	//	  bytes value = 1 [
	//	    (buf.validate.field).bytes.example = "\x01\x02",
	//	    (buf.validate.field).bytes.example = "\x02\x03"
	//	  ];
	//	}
	//
	// ```
	Example         [][]byte `protobuf:"bytes,14,rep,name=example" json:"example,omitempty"`
	extensionFields protoimpl.ExtensionFields
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *BytesRules) Reset() {
	*x = BytesRules{}
	mi := &file_buf_validate_validate_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BytesRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BytesRules) ProtoMessage() {}

func (x *BytesRules) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_validate_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BytesRules.ProtoReflect.Descriptor instead.
func (*BytesRules) Descriptor() ([]byte, []int) {
	return file_buf_validate_validate_proto_rawDescGZIP(), []int{19}
}

func (x *BytesRules) GetConst() []byte {
	if x != nil {
		return x.Const
	}
	return nil
}

func (x *BytesRules) GetLen() uint64 {
	if x != nil && x.Len != nil {
		return *x.Len
	}
	return 0
}

func (x *BytesRules) GetMinLen() uint64 {
	if x != nil && x.MinLen != nil {
		return *x.MinLen
	}
	return 0
}

func (x *BytesRules) GetMaxLen() uint64 {
	if x != nil && x.MaxLen != nil {
		return *x.MaxLen
	}
	return 0
}

func (x *BytesRules) GetPattern() string {
	if x != nil && x.Pattern != nil {
		return *x.Pattern
	}
	return ""
}

func (x *BytesRules) GetPrefix() []byte {
	if x != nil {
		return x.Prefix
	}
	return nil
}

func (x *BytesRules) GetSuffix() []byte {
	if x != nil {
		return x.Suffix
	}
	return nil
}

func (x *BytesRules) GetContains() []byte {
	if x != nil {
		return x.Contains
	}
	return nil
}

func (x *BytesRules) GetIn() [][]byte {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *BytesRules) GetNotIn() [][]byte {
	if x != nil {
		return x.NotIn
	}
	return nil
}

func (x *BytesRules) GetWellKnown() isBytesRules_WellKnown {
	if x != nil {
		return x.WellKnown
	}
	return nil
}

func (x *BytesRules) GetIp() bool {
	if x != nil {
		if x, ok := x.WellKnown.(*BytesRules_Ip); ok {
			return x.Ip
		}
	}
	return false
}

func (x *BytesRules) GetIpv4() bool {
	if x != nil {
		if x, ok := x.WellKnown.(*BytesRules_Ipv4); ok {
			return x.Ipv4
		}
	}
	return false
}

func (x *BytesRules) GetIpv6() bool {
	if x != nil {
		if x, ok := x.WellKnown.(*BytesRules_Ipv6); ok {
			return x.Ipv6
		}
	}
	return false
}

func (x *BytesRules) GetExample() [][]byte {
	if x != nil {
		return x.Example
	}
	return nil
}

type isBytesRules_WellKnown interface {
	isBytesRules_WellKnown()
}

type BytesRules_Ip struct {
	// `ip` ensures that the field `value` is a valid IP address (v4 or v6) in byte format.
	// If the field value doesn't meet this constraint, an error message is generated.
	//
	// ```proto
	//
	//	message MyBytes {
	//	  // value must be a valid IP address
	//	  optional bytes value = 1 [(buf.validate.field).bytes.ip = true];
	//	}
	//
	// ```
	Ip bool `protobuf:"varint,10,opt,name=ip,oneof"`
}

type BytesRules_Ipv4 struct {
	// `ipv4` ensures that the field `value` is a valid IPv4 address in byte format.
	// If the field value doesn't meet this constraint, an error message is generated.
	//
	// ```proto
	//
	//	message MyBytes {
	//	  // value must be a valid IPv4 address
	//	  optional bytes value = 1 [(buf.validate.field).bytes.ipv4 = true];
	//	}
	//
	// ```
	Ipv4 bool `protobuf:"varint,11,opt,name=ipv4,oneof"`
}

type BytesRules_Ipv6 struct {
	// `ipv6` ensures that the field `value` is a valid IPv6 address in byte format.
	// If the field value doesn't meet this constraint, an error message is generated.
	// ```proto
	//
	//	message MyBytes {
	//	  // value must be a valid IPv6 address
	//	  optional bytes value = 1 [(buf.validate.field).bytes.ipv6 = true];
	//	}
	//
	// ```
	Ipv6 bool `protobuf:"varint,12,opt,name=ipv6,oneof"`
}

func (*BytesRules_Ip) isBytesRules_WellKnown() {}

func (*BytesRules_Ipv4) isBytesRules_WellKnown() {}

func (*BytesRules_Ipv6) isBytesRules_WellKnown() {}

// EnumRules describe the constraints applied to `enum` values.
type EnumRules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// `const` requires the field value to exactly match the specified enum value.
	// If the field value doesn't match, an error message is generated.
	//
	// ```proto
	//
	//	enum MyEnum {
	//	  MY_ENUM_UNSPECIFIED = 0;
	//	  MY_ENUM_VALUE1 = 1;
	//	  MY_ENUM_VALUE2 = 2;
	//	}
	//
	//	message MyMessage {
	//	  // The field `value` must be exactly MY_ENUM_VALUE1.
	//	  MyEnum value = 1 [(buf.validate.field).enum.const = 1];
	//	}
	//
	// ```
	Const *int32 `protobuf:"varint,1,opt,name=const" json:"const,omitempty"`
	// `defined_only` requires the field value to be one of the defined values for
	// this enum, failing on any undefined value.
	//
	// ```proto
	//
	//	enum MyEnum {
	//	  MY_ENUM_UNSPECIFIED = 0;
	//	  MY_ENUM_VALUE1 = 1;
	//	  MY_ENUM_VALUE2 = 2;
	//	}
	//
	//	message MyMessage {
	//	  // The field `value` must be a defined value of MyEnum.
	//	  MyEnum value = 1 [(buf.validate.field).enum.defined_only = true];
	//	}
	//
	// ```
	DefinedOnly *bool `protobuf:"varint,2,opt,name=defined_only,json=definedOnly" json:"defined_only,omitempty"`
	// `in` requires the field value to be equal to one of the
	// specified enum values. If the field value doesn't match any of the
	// specified values, an error message is generated.
	//
	// ```proto
	//
	//	enum MyEnum {
	//	  MY_ENUM_UNSPECIFIED = 0;
	//	  MY_ENUM_VALUE1 = 1;
	//	  MY_ENUM_VALUE2 = 2;
	//	}
	//
	//	message MyMessage {
	//	  // The field `value` must be equal to one of the specified values.
	//	  MyEnum value = 1 [(buf.validate.field).enum = { in: [1, 2]}];
	//	}
	//
	// ```
	In []int32 `protobuf:"varint,3,rep,name=in" json:"in,omitempty"`
	// `not_in` requires the field value to be not equal to any of the
	// specified enum values. If the field value matches one of the specified
	// values, an error message is generated.
	//
	// ```proto
	//
	//	enum MyEnum {
	//	  MY_ENUM_UNSPECIFIED = 0;
	//	  MY_ENUM_VALUE1 = 1;
	//	  MY_ENUM_VALUE2 = 2;
	//	}
	//
	//	message MyMessage {
	//	  // The field `value` must not be equal to any of the specified values.
	//	  MyEnum value = 1 [(buf.validate.field).enum = { not_in: [1, 2]}];
	//	}
	//
	// ```
	NotIn []int32 `protobuf:"varint,4,rep,name=not_in,json=notIn" json:"not_in,omitempty"`
	// `example` specifies values that the field may have. These values SHOULD
	// conform to other constraints. `example` values will not impact validation
	// but may be used as helpful guidance on how to populate the given field.
	//
	// ```proto
	//
	//	enum MyEnum {
	//	  MY_ENUM_UNSPECIFIED = 0;
	//	  MY_ENUM_VALUE1 = 1;
	//	  MY_ENUM_VALUE2 = 2;
	//	}
	//
	//	message MyMessage {
	//	    (buf.validate.field).enum.example = 1,
	//	    (buf.validate.field).enum.example = 2
	//	}
	//
	// ```
	Example         []int32 `protobuf:"varint,5,rep,name=example" json:"example,omitempty"`
	extensionFields protoimpl.ExtensionFields
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *EnumRules) Reset() {
	*x = EnumRules{}
	mi := &file_buf_validate_validate_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnumRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumRules) ProtoMessage() {}

func (x *EnumRules) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_validate_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumRules.ProtoReflect.Descriptor instead.
func (*EnumRules) Descriptor() ([]byte, []int) {
	return file_buf_validate_validate_proto_rawDescGZIP(), []int{20}
}

func (x *EnumRules) GetConst() int32 {
	if x != nil && x.Const != nil {
		return *x.Const
	}
	return 0
}

func (x *EnumRules) GetDefinedOnly() bool {
	if x != nil && x.DefinedOnly != nil {
		return *x.DefinedOnly
	}
	return false
}

func (x *EnumRules) GetIn() []int32 {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *EnumRules) GetNotIn() []int32 {
	if x != nil {
		return x.NotIn
	}
	return nil
}

func (x *EnumRules) GetExample() []int32 {
	if x != nil {
		return x.Example
	}
	return nil
}

// RepeatedRules describe the constraints applied to `repeated` values.
type RepeatedRules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// `min_items` requires that this field must contain at least the specified
	// minimum number of items.
	//
	// Note that `min_items = 1` is equivalent to setting a field as `required`.
	//
	// ```proto
	//
	//	message MyRepeated {
	//	  // value must contain at least  2 items
	//	  repeated string value = 1 [(buf.validate.field).repeated.min_items = 2];
	//	}
	//
	// ```
	MinItems *uint64 `protobuf:"varint,1,opt,name=min_items,json=minItems" json:"min_items,omitempty"`
	// `max_items` denotes that this field must not exceed a
	// certain number of items as the upper limit. If the field contains more
	// items than specified, an error message will be generated, requiring the
	// field to maintain no more than the specified number of items.
	//
	// ```proto
	//
	//	message MyRepeated {
	//	  // value must contain no more than 3 item(s)
	//	  repeated string value = 1 [(buf.validate.field).repeated.max_items = 3];
	//	}
	//
	// ```
	MaxItems *uint64 `protobuf:"varint,2,opt,name=max_items,json=maxItems" json:"max_items,omitempty"`
	// `unique` indicates that all elements in this field must
	// be unique. This constraint is strictly applicable to scalar and enum
	// types, with message types not being supported.
	//
	// ```proto
	//
	//	message MyRepeated {
	//	  // repeated value must contain unique items
	//	  repeated string value = 1 [(buf.validate.field).repeated.unique = true];
	//	}
	//
	// ```
	Unique *bool `protobuf:"varint,3,opt,name=unique" json:"unique,omitempty"`
	// `items` details the constraints to be applied to each item
	// in the field. Even for repeated message fields, validation is executed
	// against each item unless skip is explicitly specified.
	//
	// ```proto
	//
	//	message MyRepeated {
	//	  // The items in the field `value` must follow the specified constraints.
	//	  repeated string value = 1 [(buf.validate.field).repeated.items = {
	//	    string: {
	//	      min_len: 3
	//	      max_len: 10
	//	    }
	//	  }];
	//	}
	//
	// ```
	Items           *FieldConstraints `protobuf:"bytes,4,opt,name=items" json:"items,omitempty"`
	extensionFields protoimpl.ExtensionFields
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *RepeatedRules) Reset() {
	*x = RepeatedRules{}
	mi := &file_buf_validate_validate_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RepeatedRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepeatedRules) ProtoMessage() {}

func (x *RepeatedRules) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_validate_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepeatedRules.ProtoReflect.Descriptor instead.
func (*RepeatedRules) Descriptor() ([]byte, []int) {
	return file_buf_validate_validate_proto_rawDescGZIP(), []int{21}
}

func (x *RepeatedRules) GetMinItems() uint64 {
	if x != nil && x.MinItems != nil {
		return *x.MinItems
	}
	return 0
}

func (x *RepeatedRules) GetMaxItems() uint64 {
	if x != nil && x.MaxItems != nil {
		return *x.MaxItems
	}
	return 0
}

func (x *RepeatedRules) GetUnique() bool {
	if x != nil && x.Unique != nil {
		return *x.Unique
	}
	return false
}

func (x *RepeatedRules) GetItems() *FieldConstraints {
	if x != nil {
		return x.Items
	}
	return nil
}

// MapRules describe the constraints applied to `map` values.
type MapRules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Specifies the minimum number of key-value pairs allowed. If the field has
	// fewer key-value pairs than specified, an error message is generated.
	//
	// ```proto
	//
	//	message MyMap {
	//	  // The field `value` must have at least 2 key-value pairs.
	//	  map<string, string> value = 1 [(buf.validate.field).map.min_pairs = 2];
	//	}
	//
	// ```
	MinPairs *uint64 `protobuf:"varint,1,opt,name=min_pairs,json=minPairs" json:"min_pairs,omitempty"`
	// Specifies the maximum number of key-value pairs allowed. If the field has
	// more key-value pairs than specified, an error message is generated.
	//
	// ```proto
	//
	//	message MyMap {
	//	  // The field `value` must have at most 3 key-value pairs.
	//	  map<string, string> value = 1 [(buf.validate.field).map.max_pairs = 3];
	//	}
	//
	// ```
	MaxPairs *uint64 `protobuf:"varint,2,opt,name=max_pairs,json=maxPairs" json:"max_pairs,omitempty"`
	// Specifies the constraints to be applied to each key in the field.
	//
	// ```proto
	//
	//	message MyMap {
	//	  // The keys in the field `value` must follow the specified constraints.
	//	  map<string, string> value = 1 [(buf.validate.field).map.keys = {
	//	    string: {
	//	      min_len: 3
	//	      max_len: 10
	//	    }
	//	  }];
	//	}
	//
	// ```
	Keys *FieldConstraints `protobuf:"bytes,4,opt,name=keys" json:"keys,omitempty"`
	// Specifies the constraints to be applied to the value of each key in the
	// field. Message values will still have their validations evaluated unless
	// skip is specified here.
	//
	// ```proto
	//
	//	message MyMap {
	//	  // The values in the field `value` must follow the specified constraints.
	//	  map<string, string> value = 1 [(buf.validate.field).map.values = {
	//	    string: {
	//	      min_len: 5
	//	      max_len: 20
	//	    }
	//	  }];
	//	}
	//
	// ```
	Values          *FieldConstraints `protobuf:"bytes,5,opt,name=values" json:"values,omitempty"`
	extensionFields protoimpl.ExtensionFields
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *MapRules) Reset() {
	*x = MapRules{}
	mi := &file_buf_validate_validate_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MapRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapRules) ProtoMessage() {}

func (x *MapRules) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_validate_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapRules.ProtoReflect.Descriptor instead.
func (*MapRules) Descriptor() ([]byte, []int) {
	return file_buf_validate_validate_proto_rawDescGZIP(), []int{22}
}

func (x *MapRules) GetMinPairs() uint64 {
	if x != nil && x.MinPairs != nil {
		return *x.MinPairs
	}
	return 0
}

func (x *MapRules) GetMaxPairs() uint64 {
	if x != nil && x.MaxPairs != nil {
		return *x.MaxPairs
	}
	return 0
}

func (x *MapRules) GetKeys() *FieldConstraints {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *MapRules) GetValues() *FieldConstraints {
	if x != nil {
		return x.Values
	}
	return nil
}

// AnyRules describe constraints applied exclusively to the `google.protobuf.Any` well-known type.
type AnyRules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// `in` requires the field's `type_url` to be equal to one of the
	// specified values. If it doesn't match any of the specified values, an error
	// message is generated.
	//
	// ```proto
	//
	//	message MyAny {
	//	  //  The `value` field must have a `type_url` equal to one of the specified values.
	//	  google.protobuf.Any value = 1 [(buf.validate.field).any.in = ["type.googleapis.com/MyType1", "type.googleapis.com/MyType2"]];
	//	}
	//
	// ```
	In []string `protobuf:"bytes,2,rep,name=in" json:"in,omitempty"`
	// requires the field's type_url to be not equal to any of the specified values. If it matches any of the specified values, an error message is generated.
	//
	// ```proto
	//
	//	message MyAny {
	//	  // The field `value` must not have a `type_url` equal to any of the specified values.
	//	  google.protobuf.Any value = 1 [(buf.validate.field).any.not_in = ["type.googleapis.com/ForbiddenType1", "type.googleapis.com/ForbiddenType2"]];
	//	}
	//
	// ```
	NotIn         []string `protobuf:"bytes,3,rep,name=not_in,json=notIn" json:"not_in,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnyRules) Reset() {
	*x = AnyRules{}
	mi := &file_buf_validate_validate_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnyRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnyRules) ProtoMessage() {}

func (x *AnyRules) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_validate_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnyRules.ProtoReflect.Descriptor instead.
func (*AnyRules) Descriptor() ([]byte, []int) {
	return file_buf_validate_validate_proto_rawDescGZIP(), []int{23}
}

func (x *AnyRules) GetIn() []string {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *AnyRules) GetNotIn() []string {
	if x != nil {
		return x.NotIn
	}
	return nil
}

// DurationRules describe the constraints applied exclusively to the `google.protobuf.Duration` well-known type.
type DurationRules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// `const` dictates that the field must match the specified value of the `google.protobuf.Duration` type exactly.
	// If the field's value deviates from the specified value, an error message
	// will be generated.
	//
	// ```proto
	//
	//	message MyDuration {
	//	  // value must equal 5s
	//	  google.protobuf.Duration value = 1 [(buf.validate.field).duration.const = "5s"];
	//	}
	//
	// ```
	Const *durationpb.Duration `protobuf:"bytes,2,opt,name=const" json:"const,omitempty"`
	// Types that are valid to be assigned to LessThan:
	//
	//	*DurationRules_Lt
	//	*DurationRules_Lte
	LessThan isDurationRules_LessThan `protobuf_oneof:"less_than"`
	// Types that are valid to be assigned to GreaterThan:
	//
	//	*DurationRules_Gt
	//	*DurationRules_Gte
	GreaterThan isDurationRules_GreaterThan `protobuf_oneof:"greater_than"`
	// `in` asserts that the field must be equal to one of the specified values of the `google.protobuf.Duration` type.
	// If the field's value doesn't correspond to any of the specified values,
	// an error message will be generated.
	//
	// ```proto
	//
	//	message MyDuration {
	//	  // value must be in list [1s, 2s, 3s]
	//	  google.protobuf.Duration value = 1 [(buf.validate.field).duration.in = ["1s", "2s", "3s"]];
	//	}
	//
	// ```
	In []*durationpb.Duration `protobuf:"bytes,7,rep,name=in" json:"in,omitempty"`
	// `not_in` denotes that the field must not be equal to
	// any of the specified values of the `google.protobuf.Duration` type.
	// If the field's value matches any of these values, an error message will be
	// generated.
	//
	// ```proto
	//
	//	message MyDuration {
	//	  // value must not be in list [1s, 2s, 3s]
	//	  google.protobuf.Duration value = 1 [(buf.validate.field).duration.not_in = ["1s", "2s", "3s"]];
	//	}
	//
	// ```
	NotIn []*durationpb.Duration `protobuf:"bytes,8,rep,name=not_in,json=notIn" json:"not_in,omitempty"`
	// `example` specifies values that the field may have. These values SHOULD
	// conform to other constraints. `example` values will not impact validation
	// but may be used as helpful guidance on how to populate the given field.
	//
	// ```proto
	//
	//	message MyDuration {
	//	  google.protobuf.Duration value = 1 [
	//	    (buf.validate.field).duration.example = { seconds: 1 },
	//	    (buf.validate.field).duration.example = { seconds: 2 },
	//	  ];
	//	}
	//
	// ```
	Example         []*durationpb.Duration `protobuf:"bytes,9,rep,name=example" json:"example,omitempty"`
	extensionFields protoimpl.ExtensionFields
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *DurationRules) Reset() {
	*x = DurationRules{}
	mi := &file_buf_validate_validate_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DurationRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DurationRules) ProtoMessage() {}

func (x *DurationRules) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_validate_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DurationRules.ProtoReflect.Descriptor instead.
func (*DurationRules) Descriptor() ([]byte, []int) {
	return file_buf_validate_validate_proto_rawDescGZIP(), []int{24}
}

func (x *DurationRules) GetConst() *durationpb.Duration {
	if x != nil {
		return x.Const
	}
	return nil
}

func (x *DurationRules) GetLessThan() isDurationRules_LessThan {
	if x != nil {
		return x.LessThan
	}
	return nil
}

func (x *DurationRules) GetLt() *durationpb.Duration {
	if x != nil {
		if x, ok := x.LessThan.(*DurationRules_Lt); ok {
			return x.Lt
		}
	}
	return nil
}

func (x *DurationRules) GetLte() *durationpb.Duration {
	if x != nil {
		if x, ok := x.LessThan.(*DurationRules_Lte); ok {
			return x.Lte
		}
	}
	return nil
}

func (x *DurationRules) GetGreaterThan() isDurationRules_GreaterThan {
	if x != nil {
		return x.GreaterThan
	}
	return nil
}

func (x *DurationRules) GetGt() *durationpb.Duration {
	if x != nil {
		if x, ok := x.GreaterThan.(*DurationRules_Gt); ok {
			return x.Gt
		}
	}
	return nil
}

func (x *DurationRules) GetGte() *durationpb.Duration {
	if x != nil {
		if x, ok := x.GreaterThan.(*DurationRules_Gte); ok {
			return x.Gte
		}
	}
	return nil
}

func (x *DurationRules) GetIn() []*durationpb.Duration {
	if x != nil {
		return x.In
	}
	return nil
}

func (x *DurationRules) GetNotIn() []*durationpb.Duration {
	if x != nil {
		return x.NotIn
	}
	return nil
}

func (x *DurationRules) GetExample() []*durationpb.Duration {
	if x != nil {
		return x.Example
	}
	return nil
}

type isDurationRules_LessThan interface {
	isDurationRules_LessThan()
}

type DurationRules_Lt struct {
	// `lt` stipulates that the field must be less than the specified value of the `google.protobuf.Duration` type,
	// exclusive. If the field's value is greater than or equal to the specified
	// value, an error message will be generated.
	//
	// ```proto
	//
	//	message MyDuration {
	//	  // value must be less than 5s
	//	  google.protobuf.Duration value = 1 [(buf.validate.field).duration.lt = "5s"];
	//	}
	//
	// ```
	Lt *durationpb.Duration `protobuf:"bytes,3,opt,name=lt,oneof"`
}

type DurationRules_Lte struct {
	// `lte` indicates that the field must be less than or equal to the specified
	// value of the `google.protobuf.Duration` type, inclusive. If the field's value is greater than the specified value,
	// an error message will be generated.
	//
	// ```proto
	//
	//	message MyDuration {
	//	  // value must be less than or equal to 10s
	//	  google.protobuf.Duration value = 1 [(buf.validate.field).duration.lte = "10s"];
	//	}
	//
	// ```
	Lte *durationpb.Duration `protobuf:"bytes,4,opt,name=lte,oneof"`
}

func (*DurationRules_Lt) isDurationRules_LessThan() {}

func (*DurationRules_Lte) isDurationRules_LessThan() {}

type isDurationRules_GreaterThan interface {
	isDurationRules_GreaterThan()
}

type DurationRules_Gt struct {
	// `gt` requires the duration field value to be greater than the specified
	// value (exclusive). If the value of `gt` is larger than a specified `lt`
	// or `lte`, the range is reversed, and the field value must be outside the
	// specified range. If the field value doesn't meet the required conditions,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MyDuration {
	//	  // duration must be greater than 5s [duration.gt]
	//	  google.protobuf.Duration value = 1 [(buf.validate.field).duration.gt = { seconds: 5 }];
	//
	//	  // duration must be greater than 5s and less than 10s [duration.gt_lt]
	//	  google.protobuf.Duration another_value = 2 [(buf.validate.field).duration = { gt: { seconds: 5 }, lt: { seconds: 10 } }];
	//
	//	  // duration must be greater than 10s or less than 5s [duration.gt_lt_exclusive]
	//	  google.protobuf.Duration other_value = 3 [(buf.validate.field).duration = { gt: { seconds: 10 }, lt: { seconds: 5 } }];
	//	}
	//
	// ```
	Gt *durationpb.Duration `protobuf:"bytes,5,opt,name=gt,oneof"`
}

type DurationRules_Gte struct {
	// `gte` requires the duration field value to be greater than or equal to the
	// specified value (exclusive). If the value of `gte` is larger than a
	// specified `lt` or `lte`, the range is reversed, and the field value must
	// be outside the specified range. If the field value doesn't meet the
	// required conditions, an error message is generated.
	//
	// ```proto
	//
	//	message MyDuration {
	//	 // duration must be greater than or equal to 5s [duration.gte]
	//	 google.protobuf.Duration value = 1 [(buf.validate.field).duration.gte = { seconds: 5 }];
	//
	//	 // duration must be greater than or equal to 5s and less than 10s [duration.gte_lt]
	//	 google.protobuf.Duration another_value = 2 [(buf.validate.field).duration = { gte: { seconds: 5 }, lt: { seconds: 10 } }];
	//
	//	 // duration must be greater than or equal to 10s or less than 5s [duration.gte_lt_exclusive]
	//	 google.protobuf.Duration other_value = 3 [(buf.validate.field).duration = { gte: { seconds: 10 }, lt: { seconds: 5 } }];
	//	}
	//
	// ```
	Gte *durationpb.Duration `protobuf:"bytes,6,opt,name=gte,oneof"`
}

func (*DurationRules_Gt) isDurationRules_GreaterThan() {}

func (*DurationRules_Gte) isDurationRules_GreaterThan() {}

// TimestampRules describe the constraints applied exclusively to the `google.protobuf.Timestamp` well-known type.
type TimestampRules struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// `const` dictates that this field, of the `google.protobuf.Timestamp` type, must exactly match the specified value. If the field value doesn't correspond to the specified timestamp, an error message will be generated.
	//
	// ```proto
	//
	//	message MyTimestamp {
	//	  // value must equal 2023-05-03T10:00:00Z
	//	  google.protobuf.Timestamp created_at = 1 [(buf.validate.field).timestamp.const = {seconds: 1727998800}];
	//	}
	//
	// ```
	Const *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=const" json:"const,omitempty"`
	// Types that are valid to be assigned to LessThan:
	//
	//	*TimestampRules_Lt
	//	*TimestampRules_Lte
	//	*TimestampRules_LtNow
	LessThan isTimestampRules_LessThan `protobuf_oneof:"less_than"`
	// Types that are valid to be assigned to GreaterThan:
	//
	//	*TimestampRules_Gt
	//	*TimestampRules_Gte
	//	*TimestampRules_GtNow
	GreaterThan isTimestampRules_GreaterThan `protobuf_oneof:"greater_than"`
	// `within` specifies that this field, of the `google.protobuf.Timestamp` type, must be within the specified duration of the current time. If the field value isn't within the duration, an error message is generated.
	//
	// ```proto
	//
	//	message MyTimestamp {
	//	  // value must be within 1 hour of now
	//	  google.protobuf.Timestamp created_at = 1 [(buf.validate.field).timestamp.within = {seconds: 3600}];
	//	}
	//
	// ```
	Within          *durationpb.Duration     `protobuf:"bytes,9,opt,name=within" json:"within,omitempty"`
	Example         []*timestamppb.Timestamp `protobuf:"bytes,10,rep,name=example" json:"example,omitempty"`
	extensionFields protoimpl.ExtensionFields
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *TimestampRules) Reset() {
	*x = TimestampRules{}
	mi := &file_buf_validate_validate_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimestampRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimestampRules) ProtoMessage() {}

func (x *TimestampRules) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_validate_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimestampRules.ProtoReflect.Descriptor instead.
func (*TimestampRules) Descriptor() ([]byte, []int) {
	return file_buf_validate_validate_proto_rawDescGZIP(), []int{25}
}

func (x *TimestampRules) GetConst() *timestamppb.Timestamp {
	if x != nil {
		return x.Const
	}
	return nil
}

func (x *TimestampRules) GetLessThan() isTimestampRules_LessThan {
	if x != nil {
		return x.LessThan
	}
	return nil
}

func (x *TimestampRules) GetLt() *timestamppb.Timestamp {
	if x != nil {
		if x, ok := x.LessThan.(*TimestampRules_Lt); ok {
			return x.Lt
		}
	}
	return nil
}

func (x *TimestampRules) GetLte() *timestamppb.Timestamp {
	if x != nil {
		if x, ok := x.LessThan.(*TimestampRules_Lte); ok {
			return x.Lte
		}
	}
	return nil
}

func (x *TimestampRules) GetLtNow() bool {
	if x != nil {
		if x, ok := x.LessThan.(*TimestampRules_LtNow); ok {
			return x.LtNow
		}
	}
	return false
}

func (x *TimestampRules) GetGreaterThan() isTimestampRules_GreaterThan {
	if x != nil {
		return x.GreaterThan
	}
	return nil
}

func (x *TimestampRules) GetGt() *timestamppb.Timestamp {
	if x != nil {
		if x, ok := x.GreaterThan.(*TimestampRules_Gt); ok {
			return x.Gt
		}
	}
	return nil
}

func (x *TimestampRules) GetGte() *timestamppb.Timestamp {
	if x != nil {
		if x, ok := x.GreaterThan.(*TimestampRules_Gte); ok {
			return x.Gte
		}
	}
	return nil
}

func (x *TimestampRules) GetGtNow() bool {
	if x != nil {
		if x, ok := x.GreaterThan.(*TimestampRules_GtNow); ok {
			return x.GtNow
		}
	}
	return false
}

func (x *TimestampRules) GetWithin() *durationpb.Duration {
	if x != nil {
		return x.Within
	}
	return nil
}

func (x *TimestampRules) GetExample() []*timestamppb.Timestamp {
	if x != nil {
		return x.Example
	}
	return nil
}

type isTimestampRules_LessThan interface {
	isTimestampRules_LessThan()
}

type TimestampRules_Lt struct {
	// requires the duration field value to be less than the specified value (field < value). If the field value doesn't meet the required conditions, an error message is generated.
	//
	// ```proto
	//
	//	message MyDuration {
	//	  // duration must be less than 'P3D' [duration.lt]
	//	  google.protobuf.Duration value = 1 [(buf.validate.field).duration.lt = { seconds: 259200 }];
	//	}
	//
	// ```
	Lt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=lt,oneof"`
}

type TimestampRules_Lte struct {
	// requires the timestamp field value to be less than or equal to the specified value (field <= value). If the field value doesn't meet the required conditions, an error message is generated.
	//
	// ```proto
	//
	//	message MyTimestamp {
	//	  // timestamp must be less than or equal to '2023-05-14T00:00:00Z' [timestamp.lte]
	//	  google.protobuf.Timestamp value = 1 [(buf.validate.field).timestamp.lte = { seconds: 1678867200 }];
	//	}
	//
	// ```
	Lte *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=lte,oneof"`
}

type TimestampRules_LtNow struct {
	// `lt_now` specifies that this field, of the `google.protobuf.Timestamp` type, must be less than the current time. `lt_now` can only be used with the `within` rule.
	//
	// ```proto
	//
	//	message MyTimestamp {
	//	 // value must be less than now
	//	  google.protobuf.Timestamp created_at = 1 [(buf.validate.field).timestamp.lt_now = true];
	//	}
	//
	// ```
	LtNow bool `protobuf:"varint,7,opt,name=lt_now,json=ltNow,oneof"`
}

func (*TimestampRules_Lt) isTimestampRules_LessThan() {}

func (*TimestampRules_Lte) isTimestampRules_LessThan() {}

func (*TimestampRules_LtNow) isTimestampRules_LessThan() {}

type isTimestampRules_GreaterThan interface {
	isTimestampRules_GreaterThan()
}

type TimestampRules_Gt struct {
	// `gt` requires the timestamp field value to be greater than the specified
	// value (exclusive). If the value of `gt` is larger than a specified `lt`
	// or `lte`, the range is reversed, and the field value must be outside the
	// specified range. If the field value doesn't meet the required conditions,
	// an error message is generated.
	//
	// ```proto
	//
	//	message MyTimestamp {
	//	  // timestamp must be greater than '2023-01-01T00:00:00Z' [timestamp.gt]
	//	  google.protobuf.Timestamp value = 1 [(buf.validate.field).timestamp.gt = { seconds: 1672444800 }];
	//
	//	  // timestamp must be greater than '2023-01-01T00:00:00Z' and less than '2023-01-02T00:00:00Z' [timestamp.gt_lt]
	//	  google.protobuf.Timestamp another_value = 2 [(buf.validate.field).timestamp = { gt: { seconds: 1672444800 }, lt: { seconds: 1672531200 } }];
	//
	//	  // timestamp must be greater than '2023-01-02T00:00:00Z' or less than '2023-01-01T00:00:00Z' [timestamp.gt_lt_exclusive]
	//	  google.protobuf.Timestamp other_value = 3 [(buf.validate.field).timestamp = { gt: { seconds: 1672531200 }, lt: { seconds: 1672444800 } }];
	//	}
	//
	// ```
	Gt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=gt,oneof"`
}

type TimestampRules_Gte struct {
	// `gte` requires the timestamp field value to be greater than or equal to the
	// specified value (exclusive). If the value of `gte` is larger than a
	// specified `lt` or `lte`, the range is reversed, and the field value
	// must be outside the specified range. If the field value doesn't meet
	// the required conditions, an error message is generated.
	//
	// ```proto
	//
	//	message MyTimestamp {
	//	  // timestamp must be greater than or equal to '2023-01-01T00:00:00Z' [timestamp.gte]
	//	  google.protobuf.Timestamp value = 1 [(buf.validate.field).timestamp.gte = { seconds: 1672444800 }];
	//
	//	  // timestamp must be greater than or equal to '2023-01-01T00:00:00Z' and less than '2023-01-02T00:00:00Z' [timestamp.gte_lt]
	//	  google.protobuf.Timestamp another_value = 2 [(buf.validate.field).timestamp = { gte: { seconds: 1672444800 }, lt: { seconds: 1672531200 } }];
	//
	//	  // timestamp must be greater than or equal to '2023-01-02T00:00:00Z' or less than '2023-01-01T00:00:00Z' [timestamp.gte_lt_exclusive]
	//	  google.protobuf.Timestamp other_value = 3 [(buf.validate.field).timestamp = { gte: { seconds: 1672531200 }, lt: { seconds: 1672444800 } }];
	//	}
	//
	// ```
	Gte *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=gte,oneof"`
}

type TimestampRules_GtNow struct {
	// `gt_now` specifies that this field, of the `google.protobuf.Timestamp` type, must be greater than the current time. `gt_now` can only be used with the `within` rule.
	//
	// ```proto
	//
	//	message MyTimestamp {
	//	  // value must be greater than now
	//	  google.protobuf.Timestamp created_at = 1 [(buf.validate.field).timestamp.gt_now = true];
	//	}
	//
	// ```
	GtNow bool `protobuf:"varint,8,opt,name=gt_now,json=gtNow,oneof"`
}

func (*TimestampRules_Gt) isTimestampRules_GreaterThan() {}

func (*TimestampRules_Gte) isTimestampRules_GreaterThan() {}

func (*TimestampRules_GtNow) isTimestampRules_GreaterThan() {}

// `Violations` is a collection of `Violation` messages. This message type is returned by
// protovalidate when a proto message fails to meet the requirements set by the `Constraint` validation rules.
// Each individual violation is represented by a `Violation` message.
type Violations struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// `violations` is a repeated field that contains all the `Violation` messages corresponding to the violations detected.
	Violations    []*Violation `protobuf:"bytes,1,rep,name=violations" json:"violations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Violations) Reset() {
	*x = Violations{}
	mi := &file_buf_validate_validate_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Violations) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Violations) ProtoMessage() {}

func (x *Violations) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_validate_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Violations.ProtoReflect.Descriptor instead.
func (*Violations) Descriptor() ([]byte, []int) {
	return file_buf_validate_validate_proto_rawDescGZIP(), []int{26}
}

func (x *Violations) GetViolations() []*Violation {
	if x != nil {
		return x.Violations
	}
	return nil
}

// `Violation` represents a single instance where a validation rule, expressed
// as a `Constraint`, was not met. It provides information about the field that
// caused the violation, the specific constraint that wasn't fulfilled, and a
// human-readable error message.
//
// ```json
//
//	{
//	  "fieldPath": "bar",
//	  "constraintId": "foo.bar",
//	  "message": "bar must be greater than 0"
//	}
//
// ```
type Violation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// `field` is a machine-readable path to the field that failed validation.
	// This could be a nested field, in which case the path will include all the parent fields leading to the actual field that caused the violation.
	//
	// For example, consider the following message:
	//
	// ```proto
	//
	//	message Message {
	//	  bool a = 1 [(buf.validate.field).required = true];
	//	}
	//
	// ```
	//
	// It could produce the following violation:
	//
	// ```textproto
	//
	//	violation {
	//	  field { element { field_number: 1, field_name: "a", field_type: 8 } }
	//	  ...
	//	}
	//
	// ```
	Field *FieldPath `protobuf:"bytes,5,opt,name=field" json:"field,omitempty"`
	// `rule` is a machine-readable path that points to the specific constraint rule that failed validation.
	// This will be a nested field starting from the FieldConstraints of the field that failed validation.
	// For custom constraints, this will provide the path of the constraint, e.g. `cel[0]`.
	//
	// For example, consider the following message:
	//
	// ```proto
	//
	//	message Message {
	//	  bool a = 1 [(buf.validate.field).required = true];
	//	  bool b = 2 [(buf.validate.field).cel = {
	//	    id: "custom_constraint",
	//	    expression: "!this ? 'b must be true': ''"
	//	  }]
	//	}
	//
	// ```
	//
	// It could produce the following violations:
	//
	// ```textproto
	//
	//	violation {
	//	  rule { element { field_number: 25, field_name: "required", field_type: 8 } }
	//	  ...
	//	}
	//
	//	violation {
	//	  rule { element { field_number: 23, field_name: "cel", field_type: 11, index: 0 } }
	//	  ...
	//	}
	//
	// ```
	Rule *FieldPath `protobuf:"bytes,6,opt,name=rule" json:"rule,omitempty"`
	// `constraint_id` is the unique identifier of the `Constraint` that was not fulfilled.
	// This is the same `id` that was specified in the `Constraint` message, allowing easy tracing of which rule was violated.
	ConstraintId *string `protobuf:"bytes,2,opt,name=constraint_id,json=constraintId" json:"constraint_id,omitempty"`
	// `message` is a human-readable error message that describes the nature of the violation.
	// This can be the default error message from the violated `Constraint`, or it can be a custom message that gives more context about the violation.
	Message *string `protobuf:"bytes,3,opt,name=message" json:"message,omitempty"`
	// `for_key` indicates whether the violation was caused by a map key, rather than a value.
	ForKey        *bool `protobuf:"varint,4,opt,name=for_key,json=forKey" json:"for_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Violation) Reset() {
	*x = Violation{}
	mi := &file_buf_validate_validate_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Violation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Violation) ProtoMessage() {}

func (x *Violation) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_validate_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Violation.ProtoReflect.Descriptor instead.
func (*Violation) Descriptor() ([]byte, []int) {
	return file_buf_validate_validate_proto_rawDescGZIP(), []int{27}
}

func (x *Violation) GetField() *FieldPath {
	if x != nil {
		return x.Field
	}
	return nil
}

func (x *Violation) GetRule() *FieldPath {
	if x != nil {
		return x.Rule
	}
	return nil
}

func (x *Violation) GetConstraintId() string {
	if x != nil && x.ConstraintId != nil {
		return *x.ConstraintId
	}
	return ""
}

func (x *Violation) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

func (x *Violation) GetForKey() bool {
	if x != nil && x.ForKey != nil {
		return *x.ForKey
	}
	return false
}

// `FieldPath` provides a path to a nested protobuf field.
//
// This message provides enough information to render a dotted field path even without protobuf descriptors.
// It also provides enough information to resolve a nested field through unknown wire data.
type FieldPath struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// `elements` contains each element of the path, starting from the root and recursing downward.
	Elements      []*FieldPathElement `protobuf:"bytes,1,rep,name=elements" json:"elements,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FieldPath) Reset() {
	*x = FieldPath{}
	mi := &file_buf_validate_validate_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldPath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldPath) ProtoMessage() {}

func (x *FieldPath) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_validate_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldPath.ProtoReflect.Descriptor instead.
func (*FieldPath) Descriptor() ([]byte, []int) {
	return file_buf_validate_validate_proto_rawDescGZIP(), []int{28}
}

func (x *FieldPath) GetElements() []*FieldPathElement {
	if x != nil {
		return x.Elements
	}
	return nil
}

// `FieldPathElement` provides enough information to nest through a single protobuf field.
//
// If the selected field is a map or repeated field, the `subscript` value selects a specific element from it.
// A path that refers to a value nested under a map key or repeated field index will have a `subscript` value.
// The `field_type` field allows unambiguous resolution of a field even if descriptors are not available.
type FieldPathElement struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// `field_number` is the field number this path element refers to.
	FieldNumber *int32 `protobuf:"varint,1,opt,name=field_number,json=fieldNumber" json:"field_number,omitempty"`
	// `field_name` contains the field name this path element refers to.
	// This can be used to display a human-readable path even if the field number is unknown.
	FieldName *string `protobuf:"bytes,2,opt,name=field_name,json=fieldName" json:"field_name,omitempty"`
	// `field_type` specifies the type of this field. When using reflection, this value is not needed.
	//
	// This value is provided to make it possible to traverse unknown fields through wire data.
	// When traversing wire data, be mindful of both packed[1] and delimited[2] encoding schemes.
	//
	// N.B.: Although groups are deprecated, the corresponding delimited encoding scheme is not, and
	// can be explicitly used in Protocol Buffers 2023 Edition.
	//
	// [1]: https://protobuf.dev/programming-guides/encoding/#packed
	// [2]: https://protobuf.dev/programming-guides/encoding/#groups
	FieldType *descriptorpb.FieldDescriptorProto_Type `protobuf:"varint,3,opt,name=field_type,json=fieldType,enum=google.protobuf.FieldDescriptorProto_Type" json:"field_type,omitempty"`
	// `key_type` specifies the map key type of this field. This value is useful when traversing
	// unknown fields through wire data: specifically, it allows handling the differences between
	// different integer encodings.
	KeyType *descriptorpb.FieldDescriptorProto_Type `protobuf:"varint,4,opt,name=key_type,json=keyType,enum=google.protobuf.FieldDescriptorProto_Type" json:"key_type,omitempty"`
	// `value_type` specifies map value type of this field. This is useful if you want to display a
	// value inside unknown fields through wire data.
	ValueType *descriptorpb.FieldDescriptorProto_Type `protobuf:"varint,5,opt,name=value_type,json=valueType,enum=google.protobuf.FieldDescriptorProto_Type" json:"value_type,omitempty"`
	// `subscript` contains a repeated index or map key, if this path element nests into a repeated or map field.
	//
	// Types that are valid to be assigned to Subscript:
	//
	//	*FieldPathElement_Index
	//	*FieldPathElement_BoolKey
	//	*FieldPathElement_IntKey
	//	*FieldPathElement_UintKey
	//	*FieldPathElement_StringKey
	Subscript     isFieldPathElement_Subscript `protobuf_oneof:"subscript"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FieldPathElement) Reset() {
	*x = FieldPathElement{}
	mi := &file_buf_validate_validate_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldPathElement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldPathElement) ProtoMessage() {}

func (x *FieldPathElement) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_validate_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldPathElement.ProtoReflect.Descriptor instead.
func (*FieldPathElement) Descriptor() ([]byte, []int) {
	return file_buf_validate_validate_proto_rawDescGZIP(), []int{29}
}

func (x *FieldPathElement) GetFieldNumber() int32 {
	if x != nil && x.FieldNumber != nil {
		return *x.FieldNumber
	}
	return 0
}

func (x *FieldPathElement) GetFieldName() string {
	if x != nil && x.FieldName != nil {
		return *x.FieldName
	}
	return ""
}

func (x *FieldPathElement) GetFieldType() descriptorpb.FieldDescriptorProto_Type {
	if x != nil && x.FieldType != nil {
		return *x.FieldType
	}
	return descriptorpb.FieldDescriptorProto_Type(1)
}

func (x *FieldPathElement) GetKeyType() descriptorpb.FieldDescriptorProto_Type {
	if x != nil && x.KeyType != nil {
		return *x.KeyType
	}
	return descriptorpb.FieldDescriptorProto_Type(1)
}

func (x *FieldPathElement) GetValueType() descriptorpb.FieldDescriptorProto_Type {
	if x != nil && x.ValueType != nil {
		return *x.ValueType
	}
	return descriptorpb.FieldDescriptorProto_Type(1)
}

func (x *FieldPathElement) GetSubscript() isFieldPathElement_Subscript {
	if x != nil {
		return x.Subscript
	}
	return nil
}

func (x *FieldPathElement) GetIndex() uint64 {
	if x != nil {
		if x, ok := x.Subscript.(*FieldPathElement_Index); ok {
			return x.Index
		}
	}
	return 0
}

func (x *FieldPathElement) GetBoolKey() bool {
	if x != nil {
		if x, ok := x.Subscript.(*FieldPathElement_BoolKey); ok {
			return x.BoolKey
		}
	}
	return false
}

func (x *FieldPathElement) GetIntKey() int64 {
	if x != nil {
		if x, ok := x.Subscript.(*FieldPathElement_IntKey); ok {
			return x.IntKey
		}
	}
	return 0
}

func (x *FieldPathElement) GetUintKey() uint64 {
	if x != nil {
		if x, ok := x.Subscript.(*FieldPathElement_UintKey); ok {
			return x.UintKey
		}
	}
	return 0
}

func (x *FieldPathElement) GetStringKey() string {
	if x != nil {
		if x, ok := x.Subscript.(*FieldPathElement_StringKey); ok {
			return x.StringKey
		}
	}
	return ""
}

type isFieldPathElement_Subscript interface {
	isFieldPathElement_Subscript()
}

type FieldPathElement_Index struct {
	// `index` specifies a 0-based index into a repeated field.
	Index uint64 `protobuf:"varint,6,opt,name=index,oneof"`
}

type FieldPathElement_BoolKey struct {
	// `bool_key` specifies a map key of type bool.
	BoolKey bool `protobuf:"varint,7,opt,name=bool_key,json=boolKey,oneof"`
}

type FieldPathElement_IntKey struct {
	// `int_key` specifies a map key of type int32, int64, sint32, sint64, sfixed32 or sfixed64.
	IntKey int64 `protobuf:"varint,8,opt,name=int_key,json=intKey,oneof"`
}

type FieldPathElement_UintKey struct {
	// `uint_key` specifies a map key of type uint32, uint64, fixed32 or fixed64.
	UintKey uint64 `protobuf:"varint,9,opt,name=uint_key,json=uintKey,oneof"`
}

type FieldPathElement_StringKey struct {
	// `string_key` specifies a map key of type string.
	StringKey string `protobuf:"bytes,10,opt,name=string_key,json=stringKey,oneof"`
}

func (*FieldPathElement_Index) isFieldPathElement_Subscript() {}

func (*FieldPathElement_BoolKey) isFieldPathElement_Subscript() {}

func (*FieldPathElement_IntKey) isFieldPathElement_Subscript() {}

func (*FieldPathElement_UintKey) isFieldPathElement_Subscript() {}

func (*FieldPathElement_StringKey) isFieldPathElement_Subscript() {}

var file_buf_validate_validate_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*descriptorpb.MessageOptions)(nil),
		ExtensionType: (*MessageConstraints)(nil),
		Field:         1159,
		Name:          "buf.validate.message",
		Tag:           "bytes,1159,opt,name=message",
		Filename:      "buf/validate/validate.proto",
	},
	{
		ExtendedType:  (*descriptorpb.OneofOptions)(nil),
		ExtensionType: (*OneofConstraints)(nil),
		Field:         1159,
		Name:          "buf.validate.oneof",
		Tag:           "bytes,1159,opt,name=oneof",
		Filename:      "buf/validate/validate.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*FieldConstraints)(nil),
		Field:         1159,
		Name:          "buf.validate.field",
		Tag:           "bytes,1159,opt,name=field",
		Filename:      "buf/validate/validate.proto",
	},
	{
		ExtendedType:  (*descriptorpb.FieldOptions)(nil),
		ExtensionType: (*PredefinedConstraints)(nil),
		Field:         1160,
		Name:          "buf.validate.predefined",
		Tag:           "bytes,1160,opt,name=predefined",
		Filename:      "buf/validate/validate.proto",
	},
}

// Extension fields to descriptorpb.MessageOptions.
var (
	// Rules specify the validations to be performed on this message. By default,
	// no validation is performed against a message.
	//
	// optional buf.validate.MessageConstraints message = 1159;
	E_Message = &file_buf_validate_validate_proto_extTypes[0]
)

// Extension fields to descriptorpb.OneofOptions.
var (
	// Rules specify the validations to be performed on this oneof. By default,
	// no validation is performed against a oneof.
	//
	// optional buf.validate.OneofConstraints oneof = 1159;
	E_Oneof = &file_buf_validate_validate_proto_extTypes[1]
)

// Extension fields to descriptorpb.FieldOptions.
var (
	// Rules specify the validations to be performed on this field. By default,
	// no validation is performed against a field.
	//
	// optional buf.validate.FieldConstraints field = 1159;
	E_Field = &file_buf_validate_validate_proto_extTypes[2]
	// Specifies predefined rules. When extending a standard constraint message,
	// this adds additional CEL expressions that apply when the extension is used.
	//
	// ```proto
	//
	//	extend buf.validate.Int32Rules {
	//	  bool is_zero [(buf.validate.predefined).cel = {
	//	    id: "int32.is_zero",
	//	    message: "value must be zero",
	//	    expression: "!rule || this == 0",
	//	  }];
	//	}
	//
	//	message Foo {
	//	  int32 reserved = 1 [(buf.validate.field).int32.(is_zero) = true];
	//	}
	//
	// ```
	//
	// optional buf.validate.PredefinedConstraints predefined = 1160;
	E_Predefined = &file_buf_validate_validate_proto_extTypes[3]
)

var File_buf_validate_validate_proto protoreflect.FileDescriptor

const file_buf_validate_validate_proto_rawDesc = "" +
	"\n" +
	"\x1bbuf/validate/validate.proto\x12\fbuf.validate\x1a google/protobuf/descriptor.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x1fgoogle/protobuf/timestamp.proto\"V\n" +
	"\n" +
	"Constraint\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x18\n" +
	"\amessage\x18\x02 \x01(\tR\amessage\x12\x1e\n" +
	"\n" +
	"expression\x18\x03 \x01(\tR\n" +
	"expression\"\\\n" +
	"\x12MessageConstraints\x12\x1a\n" +
	"\bdisabled\x18\x01 \x01(\bR\bdisabled\x12*\n" +
	"\x03cel\x18\x03 \x03(\v2\x18.buf.validate.ConstraintR\x03cel\".\n" +
	"\x10OneofConstraints\x12\x1a\n" +
	"\brequired\x18\x01 \x01(\bR\brequired\"\x89\n" +
	"\n" +
	"\x10FieldConstraints\x12*\n" +
	"\x03cel\x18\x17 \x03(\v2\x18.buf.validate.ConstraintR\x03cel\x12\x1a\n" +
	"\brequired\x18\x19 \x01(\bR\brequired\x12,\n" +
	"\x06ignore\x18\x1b \x01(\x0e2\x14.buf.validate.IgnoreR\x06ignore\x120\n" +
	"\x05float\x18\x01 \x01(\v2\x18.buf.validate.FloatRulesH\x00R\x05float\x123\n" +
	"\x06double\x18\x02 \x01(\v2\x19.buf.validate.DoubleRulesH\x00R\x06double\x120\n" +
	"\x05int32\x18\x03 \x01(\v2\x18.buf.validate.Int32RulesH\x00R\x05int32\x120\n" +
	"\x05int64\x18\x04 \x01(\v2\x18.buf.validate.Int64RulesH\x00R\x05int64\x123\n" +
	"\x06uint32\x18\x05 \x01(\v2\x19.buf.validate.UInt32RulesH\x00R\x06uint32\x123\n" +
	"\x06uint64\x18\x06 \x01(\v2\x19.buf.validate.UInt64RulesH\x00R\x06uint64\x123\n" +
	"\x06sint32\x18\a \x01(\v2\x19.buf.validate.SInt32RulesH\x00R\x06sint32\x123\n" +
	"\x06sint64\x18\b \x01(\v2\x19.buf.validate.SInt64RulesH\x00R\x06sint64\x126\n" +
	"\afixed32\x18\t \x01(\v2\x1a.buf.validate.Fixed32RulesH\x00R\afixed32\x126\n" +
	"\afixed64\x18\n" +
	" \x01(\v2\x1a.buf.validate.Fixed64RulesH\x00R\afixed64\x129\n" +
	"\bsfixed32\x18\v \x01(\v2\x1b.buf.validate.SFixed32RulesH\x00R\bsfixed32\x129\n" +
	"\bsfixed64\x18\f \x01(\v2\x1b.buf.validate.SFixed64RulesH\x00R\bsfixed64\x12-\n" +
	"\x04bool\x18\r \x01(\v2\x17.buf.validate.BoolRulesH\x00R\x04bool\x123\n" +
	"\x06string\x18\x0e \x01(\v2\x19.buf.validate.StringRulesH\x00R\x06string\x120\n" +
	"\x05bytes\x18\x0f \x01(\v2\x18.buf.validate.BytesRulesH\x00R\x05bytes\x12-\n" +
	"\x04enum\x18\x10 \x01(\v2\x17.buf.validate.EnumRulesH\x00R\x04enum\x129\n" +
	"\brepeated\x18\x12 \x01(\v2\x1b.buf.validate.RepeatedRulesH\x00R\brepeated\x12*\n" +
	"\x03map\x18\x13 \x01(\v2\x16.buf.validate.MapRulesH\x00R\x03map\x12*\n" +
	"\x03any\x18\x14 \x01(\v2\x16.buf.validate.AnyRulesH\x00R\x03any\x129\n" +
	"\bduration\x18\x15 \x01(\v2\x1b.buf.validate.DurationRulesH\x00R\bduration\x12<\n" +
	"\ttimestamp\x18\x16 \x01(\v2\x1c.buf.validate.TimestampRulesH\x00R\ttimestampB\x06\n" +
	"\x04typeJ\x04\b\x18\x10\x19J\x04\b\x1a\x10\x1bR\askippedR\fignore_empty\"d\n" +
	"\x15PredefinedConstraints\x12*\n" +
	"\x03cel\x18\x01 \x03(\v2\x18.buf.validate.ConstraintR\x03celJ\x04\b\x18\x10\x19J\x04\b\x1a\x10\x1bR\x13skippedignore_empty\"\xea\x17\n" +
	"\n" +
	"FloatRules\x12p\n" +
	"\x05const\x18\x01 \x01(\x02BZ\xc2HW\n" +
	"U\n" +
	"\vfloat.const\x1aFthis != rules.const ? 'value must equal %s'.format([rules.const]) : ''R\x05const\x12\xa3\x01\n" +
	"\x02lt\x18\x02 \x01(\x02B\x90\x01\xc2H\x8c\x01\n" +
	"\x89\x01\n" +
	"\bfloat.lt\x1a}!has(rules.gte) && !has(rules.gt) && (this.isNan() || this >= rules.lt)? 'value must be less than %s'.format([rules.lt]) : ''H\x00R\x02lt\x12\xb4\x01\n" +
	"\x03lte\x18\x03 \x01(\x02B\x9f\x01\xc2H\x9b\x01\n" +
	"\x98\x01\n" +
	"\tfloat.lte\x1a\x8a\x01!has(rules.gte) && !has(rules.gt) && (this.isNan() || this > rules.lte)? 'value must be less than or equal to %s'.format([rules.lte]) : ''H\x00R\x03lte\x12\xf3\a\n" +
	"\x02gt\x18\x04 \x01(\x02B\xe0\a\xc2H\xdc\a\n" +
	"\x8d\x01\n" +
	"\bfloat.gt\x1a\x80\x01!has(rules.lt) && !has(rules.lte) && (this.isNan() || this <= rules.gt)? 'value must be greater than %s'.format([rules.gt]) : ''\n" +
	"\xc3\x01\n" +
	"\vfloat.gt_lt\x1a\xb3\x01has(rules.lt) && rules.lt >= rules.gt && (this.isNan() || this >= rules.lt || this <= rules.gt)? 'value must be greater than %s and less than %s'.format([rules.gt, rules.lt]) : ''\n" +
	"\xcd\x01\n" +
	"\x15float.gt_lt_exclusive\x1a\xb3\x01has(rules.lt) && rules.lt < rules.gt && (this.isNan() || (rules.lt <= this && this <= rules.gt))? 'value must be greater than %s or less than %s'.format([rules.gt, rules.lt]) : ''\n" +
	"\xd3\x01\n" +
	"\ffloat.gt_lte\x1a\xc2\x01has(rules.lte) && rules.lte >= rules.gt && (this.isNan() || this > rules.lte || this <= rules.gt)? 'value must be greater than %s and less than or equal to %s'.format([rules.gt, rules.lte]) : ''\n" +
	"\xdd\x01\n" +
	"\x16float.gt_lte_exclusive\x1a\xc2\x01has(rules.lte) && rules.lte < rules.gt && (this.isNan() || (rules.lte < this && this <= rules.gt))? 'value must be greater than %s or less than or equal to %s'.format([rules.gt, rules.lte]) : ''H\x01R\x02gt\x12\xbf\b\n" +
	"\x03gte\x18\x05 \x01(\x02B\xaa\b\xc2H\xa6\b\n" +
	"\x9b\x01\n" +
	"\tfloat.gte\x1a\x8d\x01!has(rules.lt) && !has(rules.lte) && (this.isNan() || this < rules.gte)? 'value must be greater than or equal to %s'.format([rules.gte]) : ''\n" +
	"\xd2\x01\n" +
	"\ffloat.gte_lt\x1a\xc1\x01has(rules.lt) && rules.lt >= rules.gte && (this.isNan() || this >= rules.lt || this < rules.gte)? 'value must be greater than or equal to %s and less than %s'.format([rules.gte, rules.lt]) : ''\n" +
	"\xdc\x01\n" +
	"\x16float.gte_lt_exclusive\x1a\xc1\x01has(rules.lt) && rules.lt < rules.gte && (this.isNan() || (rules.lt <= this && this < rules.gte))? 'value must be greater than or equal to %s or less than %s'.format([rules.gte, rules.lt]) : ''\n" +
	"\xe2\x01\n" +
	"\rfloat.gte_lte\x1a\xd0\x01has(rules.lte) && rules.lte >= rules.gte && (this.isNan() || this > rules.lte || this < rules.gte)? 'value must be greater than or equal to %s and less than or equal to %s'.format([rules.gte, rules.lte]) : ''\n" +
	"\xec\x01\n" +
	"\x17float.gte_lte_exclusive\x1a\xd0\x01has(rules.lte) && rules.lte < rules.gte && (this.isNan() || (rules.lte < this && this < rules.gte))? 'value must be greater than or equal to %s or less than or equal to %s'.format([rules.gte, rules.lte]) : ''H\x01R\x03gte\x12y\n" +
	"\x02in\x18\x06 \x03(\x02Bi\xc2Hf\n" +
	"d\n" +
	"\bfloat.in\x1aX!(this in dyn(rules)['in']) ? 'value must be in list %s'.format([dyn(rules)['in']]) : ''R\x02in\x12}\n" +
	"\x06not_in\x18\a \x03(\x02Bf\xc2Hc\n" +
	"a\n" +
	"\ffloat.not_in\x1aQthis in rules.not_in ? 'value must not be in list %s'.format([rules.not_in]) : ''R\x05notIn\x12}\n" +
	"\x06finite\x18\b \x01(\bBe\xc2Hb\n" +
	"`\n" +
	"\ffloat.finite\x1aPrules.finite ? (this.isNan() || this.isInf() ? 'value must be finite' : '') : ''R\x06finite\x124\n" +
	"\aexample\x18\t \x03(\x02B\x1a\xc2H\x17\n" +
	"\x15\n" +
	"\rfloat.example\x1a\x04trueR\aexample*\t\b\xe8\a\x10\x80\x80\x80\x80\x02B\v\n" +
	"\tless_thanB\x0e\n" +
	"\fgreater_than\"\xfc\x17\n" +
	"\vDoubleRules\x12q\n" +
	"\x05const\x18\x01 \x01(\x01B[\xc2HX\n" +
	"V\n" +
	"\fdouble.const\x1aFthis != rules.const ? 'value must equal %s'.format([rules.const]) : ''R\x05const\x12\xa4\x01\n" +
	"\x02lt\x18\x02 \x01(\x01B\x91\x01\xc2H\x8d\x01\n" +
	"\x8a\x01\n" +
	"\tdouble.lt\x1a}!has(rules.gte) && !has(rules.gt) && (this.isNan() || this >= rules.lt)? 'value must be less than %s'.format([rules.lt]) : ''H\x00R\x02lt\x12\xb5\x01\n" +
	"\x03lte\x18\x03 \x01(\x01B\xa0\x01\xc2H\x9c\x01\n" +
	"\x99\x01\n" +
	"\n" +
	"double.lte\x1a\x8a\x01!has(rules.gte) && !has(rules.gt) && (this.isNan() || this > rules.lte)? 'value must be less than or equal to %s'.format([rules.lte]) : ''H\x00R\x03lte\x12\xf8\a\n" +
	"\x02gt\x18\x04 \x01(\x01B\xe5\a\xc2H\xe1\a\n" +
	"\x8e\x01\n" +
	"\tdouble.gt\x1a\x80\x01!has(rules.lt) && !has(rules.lte) && (this.isNan() || this <= rules.gt)? 'value must be greater than %s'.format([rules.gt]) : ''\n" +
	"\xc4\x01\n" +
	"\fdouble.gt_lt\x1a\xb3\x01has(rules.lt) && rules.lt >= rules.gt && (this.isNan() || this >= rules.lt || this <= rules.gt)? 'value must be greater than %s and less than %s'.format([rules.gt, rules.lt]) : ''\n" +
	"\xce\x01\n" +
	"\x16double.gt_lt_exclusive\x1a\xb3\x01has(rules.lt) && rules.lt < rules.gt && (this.isNan() || (rules.lt <= this && this <= rules.gt))? 'value must be greater than %s or less than %s'.format([rules.gt, rules.lt]) : ''\n" +
	"\xd4\x01\n" +
	"\rdouble.gt_lte\x1a\xc2\x01has(rules.lte) && rules.lte >= rules.gt && (this.isNan() || this > rules.lte || this <= rules.gt)? 'value must be greater than %s and less than or equal to %s'.format([rules.gt, rules.lte]) : ''\n" +
	"\xde\x01\n" +
	"\x17double.gt_lte_exclusive\x1a\xc2\x01has(rules.lte) && rules.lte < rules.gt && (this.isNan() || (rules.lte < this && this <= rules.gt))? 'value must be greater than %s or less than or equal to %s'.format([rules.gt, rules.lte]) : ''H\x01R\x02gt\x12\xc4\b\n" +
	"\x03gte\x18\x05 \x01(\x01B\xaf\b\xc2H\xab\b\n" +
	"\x9c\x01\n" +
	"\n" +
	"double.gte\x1a\x8d\x01!has(rules.lt) && !has(rules.lte) && (this.isNan() || this < rules.gte)? 'value must be greater than or equal to %s'.format([rules.gte]) : ''\n" +
	"\xd3\x01\n" +
	"\rdouble.gte_lt\x1a\xc1\x01has(rules.lt) && rules.lt >= rules.gte && (this.isNan() || this >= rules.lt || this < rules.gte)? 'value must be greater than or equal to %s and less than %s'.format([rules.gte, rules.lt]) : ''\n" +
	"\xdd\x01\n" +
	"\x17double.gte_lt_exclusive\x1a\xc1\x01has(rules.lt) && rules.lt < rules.gte && (this.isNan() || (rules.lt <= this && this < rules.gte))? 'value must be greater than or equal to %s or less than %s'.format([rules.gte, rules.lt]) : ''\n" +
	"\xe3\x01\n" +
	"\x0edouble.gte_lte\x1a\xd0\x01has(rules.lte) && rules.lte >= rules.gte && (this.isNan() || this > rules.lte || this < rules.gte)? 'value must be greater than or equal to %s and less than or equal to %s'.format([rules.gte, rules.lte]) : ''\n" +
	"\xed\x01\n" +
	"\x18double.gte_lte_exclusive\x1a\xd0\x01has(rules.lte) && rules.lte < rules.gte && (this.isNan() || (rules.lte < this && this < rules.gte))? 'value must be greater than or equal to %s or less than or equal to %s'.format([rules.gte, rules.lte]) : ''H\x01R\x03gte\x12z\n" +
	"\x02in\x18\x06 \x03(\x01Bj\xc2Hg\n" +
	"e\n" +
	"\tdouble.in\x1aX!(this in dyn(rules)['in']) ? 'value must be in list %s'.format([dyn(rules)['in']]) : ''R\x02in\x12~\n" +
	"\x06not_in\x18\a \x03(\x01Bg\xc2Hd\n" +
	"b\n" +
	"\rdouble.not_in\x1aQthis in rules.not_in ? 'value must not be in list %s'.format([rules.not_in]) : ''R\x05notIn\x12~\n" +
	"\x06finite\x18\b \x01(\bBf\xc2Hc\n" +
	"a\n" +
	"\rdouble.finite\x1aPrules.finite ? (this.isNan() || this.isInf() ? 'value must be finite' : '') : ''R\x06finite\x125\n" +
	"\aexample\x18\t \x03(\x01B\x1b\xc2H\x18\n" +
	"\x16\n" +
	"\x0edouble.example\x1a\x04trueR\aexample*\t\b\xe8\a\x10\x80\x80\x80\x80\x02B\v\n" +
	"\tless_thanB\x0e\n" +
	"\fgreater_than\"\x94\x15\n" +
	"\n" +
	"Int32Rules\x12p\n" +
	"\x05const\x18\x01 \x01(\x05BZ\xc2HW\n" +
	"U\n" +
	"\vint32.const\x1aFthis != rules.const ? 'value must equal %s'.format([rules.const]) : ''R\x05const\x12\x8e\x01\n" +
	"\x02lt\x18\x02 \x01(\x05B|\xc2Hy\n" +
	"w\n" +
	"\bint32.lt\x1ak!has(rules.gte) && !has(rules.gt) && this >= rules.lt? 'value must be less than %s'.format([rules.lt]) : ''H\x00R\x02lt\x12\xa1\x01\n" +
	"\x03lte\x18\x03 \x01(\x05B\x8c\x01\xc2H\x88\x01\n" +
	"\x85\x01\n" +
	"\tint32.lte\x1ax!has(rules.gte) && !has(rules.gt) && this > rules.lte? 'value must be less than or equal to %s'.format([rules.lte]) : ''H\x00R\x03lte\x12\x9b\a\n" +
	"\x02gt\x18\x04 \x01(\x05B\x88\a\xc2H\x84\a\n" +
	"z\n" +
	"\bint32.gt\x1an!has(rules.lt) && !has(rules.lte) && this <= rules.gt? 'value must be greater than %s'.format([rules.gt]) : ''\n" +
	"\xb3\x01\n" +
	"\vint32.gt_lt\x1a\xa3\x01has(rules.lt) && rules.lt >= rules.gt && (this >= rules.lt || this <= rules.gt)? 'value must be greater than %s and less than %s'.format([rules.gt, rules.lt]) : ''\n" +
	"\xbb\x01\n" +
	"\x15int32.gt_lt_exclusive\x1a\xa1\x01has(rules.lt) && rules.lt < rules.gt && (rules.lt <= this && this <= rules.gt)? 'value must be greater than %s or less than %s'.format([rules.gt, rules.lt]) : ''\n" +
	"\xc3\x01\n" +
	"\fint32.gt_lte\x1a\xb2\x01has(rules.lte) && rules.lte >= rules.gt && (this > rules.lte || this <= rules.gt)? 'value must be greater than %s and less than or equal to %s'.format([rules.gt, rules.lte]) : ''\n" +
	"\xcb\x01\n" +
	"\x16int32.gt_lte_exclusive\x1a\xb0\x01has(rules.lte) && rules.lte < rules.gt && (rules.lte < this && this <= rules.gt)? 'value must be greater than %s or less than or equal to %s'.format([rules.gt, rules.lte]) : ''H\x01R\x02gt\x12\xe8\a\n" +
	"\x03gte\x18\x05 \x01(\x05B\xd3\a\xc2H\xcf\a\n" +
	"\x88\x01\n" +
	"\tint32.gte\x1a{!has(rules.lt) && !has(rules.lte) && this < rules.gte? 'value must be greater than or equal to %s'.format([rules.gte]) : ''\n" +
	"\xc2\x01\n" +
	"\fint32.gte_lt\x1a\xb1\x01has(rules.lt) && rules.lt >= rules.gte && (this >= rules.lt || this < rules.gte)? 'value must be greater than or equal to %s and less than %s'.format([rules.gte, rules.lt]) : ''\n" +
	"\xca\x01\n" +
	"\x16int32.gte_lt_exclusive\x1a\xaf\x01has(rules.lt) && rules.lt < rules.gte && (rules.lt <= this && this < rules.gte)? 'value must be greater than or equal to %s or less than %s'.format([rules.gte, rules.lt]) : ''\n" +
	"\xd2\x01\n" +
	"\rint32.gte_lte\x1a\xc0\x01has(rules.lte) && rules.lte >= rules.gte && (this > rules.lte || this < rules.gte)? 'value must be greater than or equal to %s and less than or equal to %s'.format([rules.gte, rules.lte]) : ''\n" +
	"\xda\x01\n" +
	"\x17int32.gte_lte_exclusive\x1a\xbe\x01has(rules.lte) && rules.lte < rules.gte && (rules.lte < this && this < rules.gte)? 'value must be greater than or equal to %s or less than or equal to %s'.format([rules.gte, rules.lte]) : ''H\x01R\x03gte\x12y\n" +
	"\x02in\x18\x06 \x03(\x05Bi\xc2Hf\n" +
	"d\n" +
	"\bint32.in\x1aX!(this in dyn(rules)['in']) ? 'value must be in list %s'.format([dyn(rules)['in']]) : ''R\x02in\x12}\n" +
	"\x06not_in\x18\a \x03(\x05Bf\xc2Hc\n" +
	"a\n" +
	"\fint32.not_in\x1aQthis in rules.not_in ? 'value must not be in list %s'.format([rules.not_in]) : ''R\x05notIn\x124\n" +
	"\aexample\x18\b \x03(\x05B\x1a\xc2H\x17\n" +
	"\x15\n" +
	"\rint32.example\x1a\x04trueR\aexample*\t\b\xe8\a\x10\x80\x80\x80\x80\x02B\v\n" +
	"\tless_thanB\x0e\n" +
	"\fgreater_than\"\x94\x15\n" +
	"\n" +
	"Int64Rules\x12p\n" +
	"\x05const\x18\x01 \x01(\x03BZ\xc2HW\n" +
	"U\n" +
	"\vint64.const\x1aFthis != rules.const ? 'value must equal %s'.format([rules.const]) : ''R\x05const\x12\x8e\x01\n" +
	"\x02lt\x18\x02 \x01(\x03B|\xc2Hy\n" +
	"w\n" +
	"\bint64.lt\x1ak!has(rules.gte) && !has(rules.gt) && this >= rules.lt? 'value must be less than %s'.format([rules.lt]) : ''H\x00R\x02lt\x12\xa1\x01\n" +
	"\x03lte\x18\x03 \x01(\x03B\x8c\x01\xc2H\x88\x01\n" +
	"\x85\x01\n" +
	"\tint64.lte\x1ax!has(rules.gte) && !has(rules.gt) && this > rules.lte? 'value must be less than or equal to %s'.format([rules.lte]) : ''H\x00R\x03lte\x12\x9b\a\n" +
	"\x02gt\x18\x04 \x01(\x03B\x88\a\xc2H\x84\a\n" +
	"z\n" +
	"\bint64.gt\x1an!has(rules.lt) && !has(rules.lte) && this <= rules.gt? 'value must be greater than %s'.format([rules.gt]) : ''\n" +
	"\xb3\x01\n" +
	"\vint64.gt_lt\x1a\xa3\x01has(rules.lt) && rules.lt >= rules.gt && (this >= rules.lt || this <= rules.gt)? 'value must be greater than %s and less than %s'.format([rules.gt, rules.lt]) : ''\n" +
	"\xbb\x01\n" +
	"\x15int64.gt_lt_exclusive\x1a\xa1\x01has(rules.lt) && rules.lt < rules.gt && (rules.lt <= this && this <= rules.gt)? 'value must be greater than %s or less than %s'.format([rules.gt, rules.lt]) : ''\n" +
	"\xc3\x01\n" +
	"\fint64.gt_lte\x1a\xb2\x01has(rules.lte) && rules.lte >= rules.gt && (this > rules.lte || this <= rules.gt)? 'value must be greater than %s and less than or equal to %s'.format([rules.gt, rules.lte]) : ''\n" +
	"\xcb\x01\n" +
	"\x16int64.gt_lte_exclusive\x1a\xb0\x01has(rules.lte) && rules.lte < rules.gt && (rules.lte < this && this <= rules.gt)? 'value must be greater than %s or less than or equal to %s'.format([rules.gt, rules.lte]) : ''H\x01R\x02gt\x12\xe8\a\n" +
	"\x03gte\x18\x05 \x01(\x03B\xd3\a\xc2H\xcf\a\n" +
	"\x88\x01\n" +
	"\tint64.gte\x1a{!has(rules.lt) && !has(rules.lte) && this < rules.gte? 'value must be greater than or equal to %s'.format([rules.gte]) : ''\n" +
	"\xc2\x01\n" +
	"\fint64.gte_lt\x1a\xb1\x01has(rules.lt) && rules.lt >= rules.gte && (this >= rules.lt || this < rules.gte)? 'value must be greater than or equal to %s and less than %s'.format([rules.gte, rules.lt]) : ''\n" +
	"\xca\x01\n" +
	"\x16int64.gte_lt_exclusive\x1a\xaf\x01has(rules.lt) && rules.lt < rules.gte && (rules.lt <= this && this < rules.gte)? 'value must be greater than or equal to %s or less than %s'.format([rules.gte, rules.lt]) : ''\n" +
	"\xd2\x01\n" +
	"\rint64.gte_lte\x1a\xc0\x01has(rules.lte) && rules.lte >= rules.gte && (this > rules.lte || this < rules.gte)? 'value must be greater than or equal to %s and less than or equal to %s'.format([rules.gte, rules.lte]) : ''\n" +
	"\xda\x01\n" +
	"\x17int64.gte_lte_exclusive\x1a\xbe\x01has(rules.lte) && rules.lte < rules.gte && (rules.lte < this && this < rules.gte)? 'value must be greater than or equal to %s or less than or equal to %s'.format([rules.gte, rules.lte]) : ''H\x01R\x03gte\x12y\n" +
	"\x02in\x18\x06 \x03(\x03Bi\xc2Hf\n" +
	"d\n" +
	"\bint64.in\x1aX!(this in dyn(rules)['in']) ? 'value must be in list %s'.format([dyn(rules)['in']]) : ''R\x02in\x12}\n" +
	"\x06not_in\x18\a \x03(\x03Bf\xc2Hc\n" +
	"a\n" +
	"\fint64.not_in\x1aQthis in rules.not_in ? 'value must not be in list %s'.format([rules.not_in]) : ''R\x05notIn\x124\n" +
	"\aexample\x18\t \x03(\x03B\x1a\xc2H\x17\n" +
	"\x15\n" +
	"\rint64.example\x1a\x04trueR\aexample*\t\b\xe8\a\x10\x80\x80\x80\x80\x02B\v\n" +
	"\tless_thanB\x0e\n" +
	"\fgreater_than\"\xa5\x15\n" +
	"\vUInt32Rules\x12q\n" +
	"\x05const\x18\x01 \x01(\rB[\xc2HX\n" +
	"V\n" +
	"\fuint32.const\x1aFthis != rules.const ? 'value must equal %s'.format([rules.const]) : ''R\x05const\x12\x8f\x01\n" +
	"\x02lt\x18\x02 \x01(\rB}\xc2Hz\n" +
	"x\n" +
	"\tuint32.lt\x1ak!has(rules.gte) && !has(rules.gt) && this >= rules.lt? 'value must be less than %s'.format([rules.lt]) : ''H\x00R\x02lt\x12\xa2\x01\n" +
	"\x03lte\x18\x03 \x01(\rB\x8d\x01\xc2H\x89\x01\n" +
	"\x86\x01\n" +
	"\n" +
	"uint32.lte\x1ax!has(rules.gte) && !has(rules.gt) && this > rules.lte? 'value must be less than or equal to %s'.format([rules.lte]) : ''H\x00R\x03lte\x12\xa0\a\n" +
	"\x02gt\x18\x04 \x01(\rB\x8d\a\xc2H\x89\a\n" +
	"{\n" +
	"\tuint32.gt\x1an!has(rules.lt) && !has(rules.lte) && this <= rules.gt? 'value must be greater than %s'.format([rules.gt]) : ''\n" +
	"\xb4\x01\n" +
	"\fuint32.gt_lt\x1a\xa3\x01has(rules.lt) && rules.lt >= rules.gt && (this >= rules.lt || this <= rules.gt)? 'value must be greater than %s and less than %s'.format([rules.gt, rules.lt]) : ''\n" +
	"\xbc\x01\n" +
	"\x16uint32.gt_lt_exclusive\x1a\xa1\x01has(rules.lt) && rules.lt < rules.gt && (rules.lt <= this && this <= rules.gt)? 'value must be greater than %s or less than %s'.format([rules.gt, rules.lt]) : ''\n" +
	"\xc4\x01\n" +
	"\ruint32.gt_lte\x1a\xb2\x01has(rules.lte) && rules.lte >= rules.gt && (this > rules.lte || this <= rules.gt)? 'value must be greater than %s and less than or equal to %s'.format([rules.gt, rules.lte]) : ''\n" +
	"\xcc\x01\n" +
	"\x17uint32.gt_lte_exclusive\x1a\xb0\x01has(rules.lte) && rules.lte < rules.gt && (rules.lte < this && this <= rules.gt)? 'value must be greater than %s or less than or equal to %s'.format([rules.gt, rules.lte]) : ''H\x01R\x02gt\x12\xed\a\n" +
	"\x03gte\x18\x05 \x01(\rB\xd8\a\xc2H\xd4\a\n" +
	"\x89\x01\n" +
	"\n" +
	"uint32.gte\x1a{!has(rules.lt) && !has(rules.lte) && this < rules.gte? 'value must be greater than or equal to %s'.format([rules.gte]) : ''\n" +
	"\xc3\x01\n" +
	"\ruint32.gte_lt\x1a\xb1\x01has(rules.lt) && rules.lt >= rules.gte && (this >= rules.lt || this < rules.gte)? 'value must be greater than or equal to %s and less than %s'.format([rules.gte, rules.lt]) : ''\n" +
	"\xcb\x01\n" +
	"\x17uint32.gte_lt_exclusive\x1a\xaf\x01has(rules.lt) && rules.lt < rules.gte && (rules.lt <= this && this < rules.gte)? 'value must be greater than or equal to %s or less than %s'.format([rules.gte, rules.lt]) : ''\n" +
	"\xd3\x01\n" +
	"\x0euint32.gte_lte\x1a\xc0\x01has(rules.lte) && rules.lte >= rules.gte && (this > rules.lte || this < rules.gte)? 'value must be greater than or equal to %s and less than or equal to %s'.format([rules.gte, rules.lte]) : ''\n" +
	"\xdb\x01\n" +
	"\x18uint32.gte_lte_exclusive\x1a\xbe\x01has(rules.lte) && rules.lte < rules.gte && (rules.lte < this && this < rules.gte)? 'value must be greater than or equal to %s or less than or equal to %s'.format([rules.gte, rules.lte]) : ''H\x01R\x03gte\x12z\n" +
	"\x02in\x18\x06 \x03(\rBj\xc2Hg\n" +
	"e\n" +
	"\tuint32.in\x1aX!(this in dyn(rules)['in']) ? 'value must be in list %s'.format([dyn(rules)['in']]) : ''R\x02in\x12~\n" +
	"\x06not_in\x18\a \x03(\rBg\xc2Hd\n" +
	"b\n" +
	"\ruint32.not_in\x1aQthis in rules.not_in ? 'value must not be in list %s'.format([rules.not_in]) : ''R\x05notIn\x125\n" +
	"\aexample\x18\b \x03(\rB\x1b\xc2H\x18\n" +
	"\x16\n" +
	"\x0euint32.example\x1a\x04trueR\aexample*\t\b\xe8\a\x10\x80\x80\x80\x80\x02B\v\n" +
	"\tless_thanB\x0e\n" +
	"\fgreater_than\"\xa5\x15\n" +
	"\vUInt64Rules\x12q\n" +
	"\x05const\x18\x01 \x01(\x04B[\xc2HX\n" +
	"V\n" +
	"\fuint64.const\x1aFthis != rules.const ? 'value must equal %s'.format([rules.const]) : ''R\x05const\x12\x8f\x01\n" +
	"\x02lt\x18\x02 \x01(\x04B}\xc2Hz\n" +
	"x\n" +
	"\tuint64.lt\x1ak!has(rules.gte) && !has(rules.gt) && this >= rules.lt? 'value must be less than %s'.format([rules.lt]) : ''H\x00R\x02lt\x12\xa2\x01\n" +
	"\x03lte\x18\x03 \x01(\x04B\x8d\x01\xc2H\x89\x01\n" +
	"\x86\x01\n" +
	"\n" +
	"uint64.lte\x1ax!has(rules.gte) && !has(rules.gt) && this > rules.lte? 'value must be less than or equal to %s'.format([rules.lte]) : ''H\x00R\x03lte\x12\xa0\a\n" +
	"\x02gt\x18\x04 \x01(\x04B\x8d\a\xc2H\x89\a\n" +
	"{\n" +
	"\tuint64.gt\x1an!has(rules.lt) && !has(rules.lte) && this <= rules.gt? 'value must be greater than %s'.format([rules.gt]) : ''\n" +
	"\xb4\x01\n" +
	"\fuint64.gt_lt\x1a\xa3\x01has(rules.lt) && rules.lt >= rules.gt && (this >= rules.lt || this <= rules.gt)? 'value must be greater than %s and less than %s'.format([rules.gt, rules.lt]) : ''\n" +
	"\xbc\x01\n" +
	"\x16uint64.gt_lt_exclusive\x1a\xa1\x01has(rules.lt) && rules.lt < rules.gt && (rules.lt <= this && this <= rules.gt)? 'value must be greater than %s or less than %s'.format([rules.gt, rules.lt]) : ''\n" +
	"\xc4\x01\n" +
	"\ruint64.gt_lte\x1a\xb2\x01has(rules.lte) && rules.lte >= rules.gt && (this > rules.lte || this <= rules.gt)? 'value must be greater than %s and less than or equal to %s'.format([rules.gt, rules.lte]) : ''\n" +
	"\xcc\x01\n" +
	"\x17uint64.gt_lte_exclusive\x1a\xb0\x01has(rules.lte) && rules.lte < rules.gt && (rules.lte < this && this <= rules.gt)? 'value must be greater than %s or less than or equal to %s'.format([rules.gt, rules.lte]) : ''H\x01R\x02gt\x12\xed\a\n" +
	"\x03gte\x18\x05 \x01(\x04B\xd8\a\xc2H\xd4\a\n" +
	"\x89\x01\n" +
	"\n" +
	"uint64.gte\x1a{!has(rules.lt) && !has(rules.lte) && this < rules.gte? 'value must be greater than or equal to %s'.format([rules.gte]) : ''\n" +
	"\xc3\x01\n" +
	"\ruint64.gte_lt\x1a\xb1\x01has(rules.lt) && rules.lt >= rules.gte && (this >= rules.lt || this < rules.gte)? 'value must be greater than or equal to %s and less than %s'.format([rules.gte, rules.lt]) : ''\n" +
	"\xcb\x01\n" +
	"\x17uint64.gte_lt_exclusive\x1a\xaf\x01has(rules.lt) && rules.lt < rules.gte && (rules.lt <= this && this < rules.gte)? 'value must be greater than or equal to %s or less than %s'.format([rules.gte, rules.lt]) : ''\n" +
	"\xd3\x01\n" +
	"\x0euint64.gte_lte\x1a\xc0\x01has(rules.lte) && rules.lte >= rules.gte && (this > rules.lte || this < rules.gte)? 'value must be greater than or equal to %s and less than or equal to %s'.format([rules.gte, rules.lte]) : ''\n" +
	"\xdb\x01\n" +
	"\x18uint64.gte_lte_exclusive\x1a\xbe\x01has(rules.lte) && rules.lte < rules.gte && (rules.lte < this && this < rules.gte)? 'value must be greater than or equal to %s or less than or equal to %s'.format([rules.gte, rules.lte]) : ''H\x01R\x03gte\x12z\n" +
	"\x02in\x18\x06 \x03(\x04Bj\xc2Hg\n" +
	"e\n" +
	"\tuint64.in\x1aX!(this in dyn(rules)['in']) ? 'value must be in list %s'.format([dyn(rules)['in']]) : ''R\x02in\x12~\n" +
	"\x06not_in\x18\a \x03(\x04Bg\xc2Hd\n" +
	"b\n" +
	"\ruint64.not_in\x1aQthis in rules.not_in ? 'value must not be in list %s'.format([rules.not_in]) : ''R\x05notIn\x125\n" +
	"\aexample\x18\b \x03(\x04B\x1b\xc2H\x18\n" +
	"\x16\n" +
	"\x0euint64.example\x1a\x04trueR\aexample*\t\b\xe8\a\x10\x80\x80\x80\x80\x02B\v\n" +
	"\tless_thanB\x0e\n" +
	"\fgreater_than\"\xa5\x15\n" +
	"\vSInt32Rules\x12q\n" +
	"\x05const\x18\x01 \x01(\x11B[\xc2HX\n" +
	"V\n" +
	"\fsint32.const\x1aFthis != rules.const ? 'value must equal %s'.format([rules.const]) : ''R\x05const\x12\x8f\x01\n" +
	"\x02lt\x18\x02 \x01(\x11B}\xc2Hz\n" +
	"x\n" +
	"\tsint32.lt\x1ak!has(rules.gte) && !has(rules.gt) && this >= rules.lt? 'value must be less than %s'.format([rules.lt]) : ''H\x00R\x02lt\x12\xa2\x01\n" +
	"\x03lte\x18\x03 \x01(\x11B\x8d\x01\xc2H\x89\x01\n" +
	"\x86\x01\n" +
	"\n" +
	"sint32.lte\x1ax!has(rules.gte) && !has(rules.gt) && this > rules.lte? 'value must be less than or equal to %s'.format([rules.lte]) : ''H\x00R\x03lte\x12\xa0\a\n" +
	"\x02gt\x18\x04 \x01(\x11B\x8d\a\xc2H\x89\a\n" +
	"{\n" +
	"\tsint32.gt\x1an!has(rules.lt) && !has(rules.lte) && this <= rules.gt? 'value must be greater than %s'.format([rules.gt]) : ''\n" +
	"\xb4\x01\n" +
	"\fsint32.gt_lt\x1a\xa3\x01has(rules.lt) && rules.lt >= rules.gt && (this >= rules.lt || this <= rules.gt)? 'value must be greater than %s and less than %s'.format([rules.gt, rules.lt]) : ''\n" +
	"\xbc\x01\n" +
	"\x16sint32.gt_lt_exclusive\x1a\xa1\x01has(rules.lt) && rules.lt < rules.gt && (rules.lt <= this && this <= rules.gt)? 'value must be greater than %s or less than %s'.format([rules.gt, rules.lt]) : ''\n" +
	"\xc4\x01\n" +
	"\rsint32.gt_lte\x1a\xb2\x01has(rules.lte) && rules.lte >= rules.gt && (this > rules.lte || this <= rules.gt)? 'value must be greater than %s and less than or equal to %s'.format([rules.gt, rules.lte]) : ''\n" +
	"\xcc\x01\n" +
	"\x17sint32.gt_lte_exclusive\x1a\xb0\x01has(rules.lte) && rules.lte < rules.gt && (rules.lte < this && this <= rules.gt)? 'value must be greater than %s or less than or equal to %s'.format([rules.gt, rules.lte]) : ''H\x01R\x02gt\x12\xed\a\n" +
	"\x03gte\x18\x05 \x01(\x11B\xd8\a\xc2H\xd4\a\n" +
	"\x89\x01\n" +
	"\n" +
	"sint32.gte\x1a{!has(rules.lt) && !has(rules.lte) && this < rules.gte? 'value must be greater than or equal to %s'.format([rules.gte]) : ''\n" +
	"\xc3\x01\n" +
	"\rsint32.gte_lt\x1a\xb1\x01has(rules.lt) && rules.lt >= rules.gte && (this >= rules.lt || this < rules.gte)? 'value must be greater than or equal to %s and less than %s'.format([rules.gte, rules.lt]) : ''\n" +
	"\xcb\x01\n" +
	"\x17sint32.gte_lt_exclusive\x1a\xaf\x01has(rules.lt) && rules.lt < rules.gte && (rules.lt <= this && this < rules.gte)? 'value must be greater than or equal to %s or less than %s'.format([rules.gte, rules.lt]) : ''\n" +
	"\xd3\x01\n" +
	"\x0esint32.gte_lte\x1a\xc0\x01has(rules.lte) && rules.lte >= rules.gte && (this > rules.lte || this < rules.gte)? 'value must be greater than or equal to %s and less than or equal to %s'.format([rules.gte, rules.lte]) : ''\n" +
	"\xdb\x01\n" +
	"\x18sint32.gte_lte_exclusive\x1a\xbe\x01has(rules.lte) && rules.lte < rules.gte && (rules.lte < this && this < rules.gte)? 'value must be greater than or equal to %s or less than or equal to %s'.format([rules.gte, rules.lte]) : ''H\x01R\x03gte\x12z\n" +
	"\x02in\x18\x06 \x03(\x11Bj\xc2Hg\n" +
	"e\n" +
	"\tsint32.in\x1aX!(this in dyn(rules)['in']) ? 'value must be in list %s'.format([dyn(rules)['in']]) : ''R\x02in\x12~\n" +
	"\x06not_in\x18\a \x03(\x11Bg\xc2Hd\n" +
	"b\n" +
	"\rsint32.not_in\x1aQthis in rules.not_in ? 'value must not be in list %s'.format([rules.not_in]) : ''R\x05notIn\x125\n" +
	"\aexample\x18\b \x03(\x11B\x1b\xc2H\x18\n" +
	"\x16\n" +
	"\x0esint32.example\x1a\x04trueR\aexample*\t\b\xe8\a\x10\x80\x80\x80\x80\x02B\v\n" +
	"\tless_thanB\x0e\n" +
	"\fgreater_than\"\xa5\x15\n" +
	"\vSInt64Rules\x12q\n" +
	"\x05const\x18\x01 \x01(\x12B[\xc2HX\n" +
	"V\n" +
	"\fsint64.const\x1aFthis != rules.const ? 'value must equal %s'.format([rules.const]) : ''R\x05const\x12\x8f\x01\n" +
	"\x02lt\x18\x02 \x01(\x12B}\xc2Hz\n" +
	"x\n" +
	"\tsint64.lt\x1ak!has(rules.gte) && !has(rules.gt) && this >= rules.lt? 'value must be less than %s'.format([rules.lt]) : ''H\x00R\x02lt\x12\xa2\x01\n" +
	"\x03lte\x18\x03 \x01(\x12B\x8d\x01\xc2H\x89\x01\n" +
	"\x86\x01\n" +
	"\n" +
	"sint64.lte\x1ax!has(rules.gte) && !has(rules.gt) && this > rules.lte? 'value must be less than or equal to %s'.format([rules.lte]) : ''H\x00R\x03lte\x12\xa0\a\n" +
	"\x02gt\x18\x04 \x01(\x12B\x8d\a\xc2H\x89\a\n" +
	"{\n" +
	"\tsint64.gt\x1an!has(rules.lt) && !has(rules.lte) && this <= rules.gt? 'value must be greater than %s'.format([rules.gt]) : ''\n" +
	"\xb4\x01\n" +
	"\fsint64.gt_lt\x1a\xa3\x01has(rules.lt) && rules.lt >= rules.gt && (this >= rules.lt || this <= rules.gt)? 'value must be greater than %s and less than %s'.format([rules.gt, rules.lt]) : ''\n" +
	"\xbc\x01\n" +
	"\x16sint64.gt_lt_exclusive\x1a\xa1\x01has(rules.lt) && rules.lt < rules.gt && (rules.lt <= this && this <= rules.gt)? 'value must be greater than %s or less than %s'.format([rules.gt, rules.lt]) : ''\n" +
	"\xc4\x01\n" +
	"\rsint64.gt_lte\x1a\xb2\x01has(rules.lte) && rules.lte >= rules.gt && (this > rules.lte || this <= rules.gt)? 'value must be greater than %s and less than or equal to %s'.format([rules.gt, rules.lte]) : ''\n" +
	"\xcc\x01\n" +
	"\x17sint64.gt_lte_exclusive\x1a\xb0\x01has(rules.lte) && rules.lte < rules.gt && (rules.lte < this && this <= rules.gt)? 'value must be greater than %s or less than or equal to %s'.format([rules.gt, rules.lte]) : ''H\x01R\x02gt\x12\xed\a\n" +
	"\x03gte\x18\x05 \x01(\x12B\xd8\a\xc2H\xd4\a\n" +
	"\x89\x01\n" +
	"\n" +
	"sint64.gte\x1a{!has(rules.lt) && !has(rules.lte) && this < rules.gte? 'value must be greater than or equal to %s'.format([rules.gte]) : ''\n" +
	"\xc3\x01\n" +
	"\rsint64.gte_lt\x1a\xb1\x01has(rules.lt) && rules.lt >= rules.gte && (this >= rules.lt || this < rules.gte)? 'value must be greater than or equal to %s and less than %s'.format([rules.gte, rules.lt]) : ''\n" +
	"\xcb\x01\n" +
	"\x17sint64.gte_lt_exclusive\x1a\xaf\x01has(rules.lt) && rules.lt < rules.gte && (rules.lt <= this && this < rules.gte)? 'value must be greater than or equal to %s or less than %s'.format([rules.gte, rules.lt]) : ''\n" +
	"\xd3\x01\n" +
	"\x0esint64.gte_lte\x1a\xc0\x01has(rules.lte) && rules.lte >= rules.gte && (this > rules.lte || this < rules.gte)? 'value must be greater than or equal to %s and less than or equal to %s'.format([rules.gte, rules.lte]) : ''\n" +
	"\xdb\x01\n" +
	"\x18sint64.gte_lte_exclusive\x1a\xbe\x01has(rules.lte) && rules.lte < rules.gte && (rules.lte < this && this < rules.gte)? 'value must be greater than or equal to %s or less than or equal to %s'.format([rules.gte, rules.lte]) : ''H\x01R\x03gte\x12z\n" +
	"\x02in\x18\x06 \x03(\x12Bj\xc2Hg\n" +
	"e\n" +
	"\tsint64.in\x1aX!(this in dyn(rules)['in']) ? 'value must be in list %s'.format([dyn(rules)['in']]) : ''R\x02in\x12~\n" +
	"\x06not_in\x18\a \x03(\x12Bg\xc2Hd\n" +
	"b\n" +
	"\rsint64.not_in\x1aQthis in rules.not_in ? 'value must not be in list %s'.format([rules.not_in]) : ''R\x05notIn\x125\n" +
	"\aexample\x18\b \x03(\x12B\x1b\xc2H\x18\n" +
	"\x16\n" +
	"\x0esint64.example\x1a\x04trueR\aexample*\t\b\xe8\a\x10\x80\x80\x80\x80\x02B\v\n" +
	"\tless_thanB\x0e\n" +
	"\fgreater_than\"\xb6\x15\n" +
	"\fFixed32Rules\x12r\n" +
	"\x05const\x18\x01 \x01(\aB\\\xc2HY\n" +
	"W\n" +
	"\rfixed32.const\x1aFthis != rules.const ? 'value must equal %s'.format([rules.const]) : ''R\x05const\x12\x90\x01\n" +
	"\x02lt\x18\x02 \x01(\aB~\xc2H{\n" +
	"y\n" +
	"\n" +
	"fixed32.lt\x1ak!has(rules.gte) && !has(rules.gt) && this >= rules.lt? 'value must be less than %s'.format([rules.lt]) : ''H\x00R\x02lt\x12\xa3\x01\n" +
	"\x03lte\x18\x03 \x01(\aB\x8e\x01\xc2H\x8a\x01\n" +
	"\x87\x01\n" +
	"\vfixed32.lte\x1ax!has(rules.gte) && !has(rules.gt) && this > rules.lte? 'value must be less than or equal to %s'.format([rules.lte]) : ''H\x00R\x03lte\x12\xa5\a\n" +
	"\x02gt\x18\x04 \x01(\aB\x92\a\xc2H\x8e\a\n" +
	"|\n" +
	"\n" +
	"fixed32.gt\x1an!has(rules.lt) && !has(rules.lte) && this <= rules.gt? 'value must be greater than %s'.format([rules.gt]) : ''\n" +
	"\xb5\x01\n" +
	"\rfixed32.gt_lt\x1a\xa3\x01has(rules.lt) && rules.lt >= rules.gt && (this >= rules.lt || this <= rules.gt)? 'value must be greater than %s and less than %s'.format([rules.gt, rules.lt]) : ''\n" +
	"\xbd\x01\n" +
	"\x17fixed32.gt_lt_exclusive\x1a\xa1\x01has(rules.lt) && rules.lt < rules.gt && (rules.lt <= this && this <= rules.gt)? 'value must be greater than %s or less than %s'.format([rules.gt, rules.lt]) : ''\n" +
	"\xc5\x01\n" +
	"\x0efixed32.gt_lte\x1a\xb2\x01has(rules.lte) && rules.lte >= rules.gt && (this > rules.lte || this <= rules.gt)? 'value must be greater than %s and less than or equal to %s'.format([rules.gt, rules.lte]) : ''\n" +
	"\xcd\x01\n" +
	"\x18fixed32.gt_lte_exclusive\x1a\xb0\x01has(rules.lte) && rules.lte < rules.gt && (rules.lte < this && this <= rules.gt)? 'value must be greater than %s or less than or equal to %s'.format([rules.gt, rules.lte]) : ''H\x01R\x02gt\x12\xf2\a\n" +
	"\x03gte\x18\x05 \x01(\aB\xdd\a\xc2H\xd9\a\n" +
	"\x8a\x01\n" +
	"\vfixed32.gte\x1a{!has(rules.lt) && !has(rules.lte) && this < rules.gte? 'value must be greater than or equal to %s'.format([rules.gte]) : ''\n" +
	"\xc4\x01\n" +
	"\x0efixed32.gte_lt\x1a\xb1\x01has(rules.lt) && rules.lt >= rules.gte && (this >= rules.lt || this < rules.gte)? 'value must be greater than or equal to %s and less than %s'.format([rules.gte, rules.lt]) : ''\n" +
	"\xcc\x01\n" +
	"\x18fixed32.gte_lt_exclusive\x1a\xaf\x01has(rules.lt) && rules.lt < rules.gte && (rules.lt <= this && this < rules.gte)? 'value must be greater than or equal to %s or less than %s'.format([rules.gte, rules.lt]) : ''\n" +
	"\xd4\x01\n" +
	"\x0ffixed32.gte_lte\x1a\xc0\x01has(rules.lte) && rules.lte >= rules.gte && (this > rules.lte || this < rules.gte)? 'value must be greater than or equal to %s and less than or equal to %s'.format([rules.gte, rules.lte]) : ''\n" +
	"\xdc\x01\n" +
	"\x19fixed32.gte_lte_exclusive\x1a\xbe\x01has(rules.lte) && rules.lte < rules.gte && (rules.lte < this && this < rules.gte)? 'value must be greater than or equal to %s or less than or equal to %s'.format([rules.gte, rules.lte]) : ''H\x01R\x03gte\x12{\n" +
	"\x02in\x18\x06 \x03(\aBk\xc2Hh\n" +
	"f\n" +
	"\n" +
	"fixed32.in\x1aX!(this in dyn(rules)['in']) ? 'value must be in list %s'.format([dyn(rules)['in']]) : ''R\x02in\x12\x7f\n" +
	"\x06not_in\x18\a \x03(\aBh\xc2He\n" +
	"c\n" +
	"\x0efixed32.not_in\x1aQthis in rules.not_in ? 'value must not be in list %s'.format([rules.not_in]) : ''R\x05notIn\x126\n" +
	"\aexample\x18\b \x03(\aB\x1c\xc2H\x19\n" +
	"\x17\n" +
	"\x0ffixed32.example\x1a\x04trueR\aexample*\t\b\xe8\a\x10\x80\x80\x80\x80\x02B\v\n" +
	"\tless_thanB\x0e\n" +
	"\fgreater_than\"\xb6\x15\n" +
	"\fFixed64Rules\x12r\n" +
	"\x05const\x18\x01 \x01(\x06B\\\xc2HY\n" +
	"W\n" +
	"\rfixed64.const\x1aFthis != rules.const ? 'value must equal %s'.format([rules.const]) : ''R\x05const\x12\x90\x01\n" +
	"\x02lt\x18\x02 \x01(\x06B~\xc2H{\n" +
	"y\n" +
	"\n" +
	"fixed64.lt\x1ak!has(rules.gte) && !has(rules.gt) && this >= rules.lt? 'value must be less than %s'.format([rules.lt]) : ''H\x00R\x02lt\x12\xa3\x01\n" +
	"\x03lte\x18\x03 \x01(\x06B\x8e\x01\xc2H\x8a\x01\n" +
	"\x87\x01\n" +
	"\vfixed64.lte\x1ax!has(rules.gte) && !has(rules.gt) && this > rules.lte? 'value must be less than or equal to %s'.format([rules.lte]) : ''H\x00R\x03lte\x12\xa5\a\n" +
	"\x02gt\x18\x04 \x01(\x06B\x92\a\xc2H\x8e\a\n" +
	"|\n" +
	"\n" +
	"fixed64.gt\x1an!has(rules.lt) && !has(rules.lte) && this <= rules.gt? 'value must be greater than %s'.format([rules.gt]) : ''\n" +
	"\xb5\x01\n" +
	"\rfixed64.gt_lt\x1a\xa3\x01has(rules.lt) && rules.lt >= rules.gt && (this >= rules.lt || this <= rules.gt)? 'value must be greater than %s and less than %s'.format([rules.gt, rules.lt]) : ''\n" +
	"\xbd\x01\n" +
	"\x17fixed64.gt_lt_exclusive\x1a\xa1\x01has(rules.lt) && rules.lt < rules.gt && (rules.lt <= this && this <= rules.gt)? 'value must be greater than %s or less than %s'.format([rules.gt, rules.lt]) : ''\n" +
	"\xc5\x01\n" +
	"\x0efixed64.gt_lte\x1a\xb2\x01has(rules.lte) && rules.lte >= rules.gt && (this > rules.lte || this <= rules.gt)? 'value must be greater than %s and less than or equal to %s'.format([rules.gt, rules.lte]) : ''\n" +
	"\xcd\x01\n" +
	"\x18fixed64.gt_lte_exclusive\x1a\xb0\x01has(rules.lte) && rules.lte < rules.gt && (rules.lte < this && this <= rules.gt)? 'value must be greater than %s or less than or equal to %s'.format([rules.gt, rules.lte]) : ''H\x01R\x02gt\x12\xf2\a\n" +
	"\x03gte\x18\x05 \x01(\x06B\xdd\a\xc2H\xd9\a\n" +
	"\x8a\x01\n" +
	"\vfixed64.gte\x1a{!has(rules.lt) && !has(rules.lte) && this < rules.gte? 'value must be greater than or equal to %s'.format([rules.gte]) : ''\n" +
	"\xc4\x01\n" +
	"\x0efixed64.gte_lt\x1a\xb1\x01has(rules.lt) && rules.lt >= rules.gte && (this >= rules.lt || this < rules.gte)? 'value must be greater than or equal to %s and less than %s'.format([rules.gte, rules.lt]) : ''\n" +
	"\xcc\x01\n" +
	"\x18fixed64.gte_lt_exclusive\x1a\xaf\x01has(rules.lt) && rules.lt < rules.gte && (rules.lt <= this && this < rules.gte)? 'value must be greater than or equal to %s or less than %s'.format([rules.gte, rules.lt]) : ''\n" +
	"\xd4\x01\n" +
	"\x0ffixed64.gte_lte\x1a\xc0\x01has(rules.lte) && rules.lte >= rules.gte && (this > rules.lte || this < rules.gte)? 'value must be greater than or equal to %s and less than or equal to %s'.format([rules.gte, rules.lte]) : ''\n" +
	"\xdc\x01\n" +
	"\x19fixed64.gte_lte_exclusive\x1a\xbe\x01has(rules.lte) && rules.lte < rules.gte && (rules.lte < this && this < rules.gte)? 'value must be greater than or equal to %s or less than or equal to %s'.format([rules.gte, rules.lte]) : ''H\x01R\x03gte\x12{\n" +
	"\x02in\x18\x06 \x03(\x06Bk\xc2Hh\n" +
	"f\n" +
	"\n" +
	"fixed64.in\x1aX!(this in dyn(rules)['in']) ? 'value must be in list %s'.format([dyn(rules)['in']]) : ''R\x02in\x12\x7f\n" +
	"\x06not_in\x18\a \x03(\x06Bh\xc2He\n" +
	"c\n" +
	"\x0efixed64.not_in\x1aQthis in rules.not_in ? 'value must not be in list %s'.format([rules.not_in]) : ''R\x05notIn\x126\n" +
	"\aexample\x18\b \x03(\x06B\x1c\xc2H\x19\n" +
	"\x17\n" +
	"\x0ffixed64.example\x1a\x04trueR\aexample*\t\b\xe8\a\x10\x80\x80\x80\x80\x02B\v\n" +
	"\tless_thanB\x0e\n" +
	"\fgreater_than\"\xc8\x15\n" +
	"\rSFixed32Rules\x12s\n" +
	"\x05const\x18\x01 \x01(\x0fB]\xc2HZ\n" +
	"X\n" +
	"\x0esfixed32.const\x1aFthis != rules.const ? 'value must equal %s'.format([rules.const]) : ''R\x05const\x12\x91\x01\n" +
	"\x02lt\x18\x02 \x01(\x0fB\x7f\xc2H|\n" +
	"z\n" +
	"\vsfixed32.lt\x1ak!has(rules.gte) && !has(rules.gt) && this >= rules.lt? 'value must be less than %s'.format([rules.lt]) : ''H\x00R\x02lt\x12\xa4\x01\n" +
	"\x03lte\x18\x03 \x01(\x0fB\x8f\x01\xc2H\x8b\x01\n" +
	"\x88\x01\n" +
	"\fsfixed32.lte\x1ax!has(rules.gte) && !has(rules.gt) && this > rules.lte? 'value must be less than or equal to %s'.format([rules.lte]) : ''H\x00R\x03lte\x12\xaa\a\n" +
	"\x02gt\x18\x04 \x01(\x0fB\x97\a\xc2H\x93\a\n" +
	"}\n" +
	"\vsfixed32.gt\x1an!has(rules.lt) && !has(rules.lte) && this <= rules.gt? 'value must be greater than %s'.format([rules.gt]) : ''\n" +
	"\xb6\x01\n" +
	"\x0esfixed32.gt_lt\x1a\xa3\x01has(rules.lt) && rules.lt >= rules.gt && (this >= rules.lt || this <= rules.gt)? 'value must be greater than %s and less than %s'.format([rules.gt, rules.lt]) : ''\n" +
	"\xbe\x01\n" +
	"\x18sfixed32.gt_lt_exclusive\x1a\xa1\x01has(rules.lt) && rules.lt < rules.gt && (rules.lt <= this && this <= rules.gt)? 'value must be greater than %s or less than %s'.format([rules.gt, rules.lt]) : ''\n" +
	"\xc6\x01\n" +
	"\x0fsfixed32.gt_lte\x1a\xb2\x01has(rules.lte) && rules.lte >= rules.gt && (this > rules.lte || this <= rules.gt)? 'value must be greater than %s and less than or equal to %s'.format([rules.gt, rules.lte]) : ''\n" +
	"\xce\x01\n" +
	"\x19sfixed32.gt_lte_exclusive\x1a\xb0\x01has(rules.lte) && rules.lte < rules.gt && (rules.lte < this && this <= rules.gt)? 'value must be greater than %s or less than or equal to %s'.format([rules.gt, rules.lte]) : ''H\x01R\x02gt\x12\xf7\a\n" +
	"\x03gte\x18\x05 \x01(\x0fB\xe2\a\xc2H\xde\a\n" +
	"\x8b\x01\n" +
	"\fsfixed32.gte\x1a{!has(rules.lt) && !has(rules.lte) && this < rules.gte? 'value must be greater than or equal to %s'.format([rules.gte]) : ''\n" +
	"\xc5\x01\n" +
	"\x0fsfixed32.gte_lt\x1a\xb1\x01has(rules.lt) && rules.lt >= rules.gte && (this >= rules.lt || this < rules.gte)? 'value must be greater than or equal to %s and less than %s'.format([rules.gte, rules.lt]) : ''\n" +
	"\xcd\x01\n" +
	"\x19sfixed32.gte_lt_exclusive\x1a\xaf\x01has(rules.lt) && rules.lt < rules.gte && (rules.lt <= this && this < rules.gte)? 'value must be greater than or equal to %s or less than %s'.format([rules.gte, rules.lt]) : ''\n" +
	"\xd5\x01\n" +
	"\x10sfixed32.gte_lte\x1a\xc0\x01has(rules.lte) && rules.lte >= rules.gte && (this > rules.lte || this < rules.gte)? 'value must be greater than or equal to %s and less than or equal to %s'.format([rules.gte, rules.lte]) : ''\n" +
	"\xdd\x01\n" +
	"\x1asfixed32.gte_lte_exclusive\x1a\xbe\x01has(rules.lte) && rules.lte < rules.gte && (rules.lte < this && this < rules.gte)? 'value must be greater than or equal to %s or less than or equal to %s'.format([rules.gte, rules.lte]) : ''H\x01R\x03gte\x12|\n" +
	"\x02in\x18\x06 \x03(\x0fBl\xc2Hi\n" +
	"g\n" +
	"\vsfixed32.in\x1aX!(this in dyn(rules)['in']) ? 'value must be in list %s'.format([dyn(rules)['in']]) : ''R\x02in\x12\x80\x01\n" +
	"\x06not_in\x18\a \x03(\x0fBi\xc2Hf\n" +
	"d\n" +
	"\x0fsfixed32.not_in\x1aQthis in rules.not_in ? 'value must not be in list %s'.format([rules.not_in]) : ''R\x05notIn\x127\n" +
	"\aexample\x18\b \x03(\x0fB\x1d\xc2H\x1a\n" +
	"\x18\n" +
	"\x10sfixed32.example\x1a\x04trueR\aexample*\t\b\xe8\a\x10\x80\x80\x80\x80\x02B\v\n" +
	"\tless_thanB\x0e\n" +
	"\fgreater_than\"\xc8\x15\n" +
	"\rSFixed64Rules\x12s\n" +
	"\x05const\x18\x01 \x01(\x10B]\xc2HZ\n" +
	"X\n" +
	"\x0esfixed64.const\x1aFthis != rules.const ? 'value must equal %s'.format([rules.const]) : ''R\x05const\x12\x91\x01\n" +
	"\x02lt\x18\x02 \x01(\x10B\x7f\xc2H|\n" +
	"z\n" +
	"\vsfixed64.lt\x1ak!has(rules.gte) && !has(rules.gt) && this >= rules.lt? 'value must be less than %s'.format([rules.lt]) : ''H\x00R\x02lt\x12\xa4\x01\n" +
	"\x03lte\x18\x03 \x01(\x10B\x8f\x01\xc2H\x8b\x01\n" +
	"\x88\x01\n" +
	"\fsfixed64.lte\x1ax!has(rules.gte) && !has(rules.gt) && this > rules.lte? 'value must be less than or equal to %s'.format([rules.lte]) : ''H\x00R\x03lte\x12\xaa\a\n" +
	"\x02gt\x18\x04 \x01(\x10B\x97\a\xc2H\x93\a\n" +
	"}\n" +
	"\vsfixed64.gt\x1an!has(rules.lt) && !has(rules.lte) && this <= rules.gt? 'value must be greater than %s'.format([rules.gt]) : ''\n" +
	"\xb6\x01\n" +
	"\x0esfixed64.gt_lt\x1a\xa3\x01has(rules.lt) && rules.lt >= rules.gt && (this >= rules.lt || this <= rules.gt)? 'value must be greater than %s and less than %s'.format([rules.gt, rules.lt]) : ''\n" +
	"\xbe\x01\n" +
	"\x18sfixed64.gt_lt_exclusive\x1a\xa1\x01has(rules.lt) && rules.lt < rules.gt && (rules.lt <= this && this <= rules.gt)? 'value must be greater than %s or less than %s'.format([rules.gt, rules.lt]) : ''\n" +
	"\xc6\x01\n" +
	"\x0fsfixed64.gt_lte\x1a\xb2\x01has(rules.lte) && rules.lte >= rules.gt && (this > rules.lte || this <= rules.gt)? 'value must be greater than %s and less than or equal to %s'.format([rules.gt, rules.lte]) : ''\n" +
	"\xce\x01\n" +
	"\x19sfixed64.gt_lte_exclusive\x1a\xb0\x01has(rules.lte) && rules.lte < rules.gt && (rules.lte < this && this <= rules.gt)? 'value must be greater than %s or less than or equal to %s'.format([rules.gt, rules.lte]) : ''H\x01R\x02gt\x12\xf7\a\n" +
	"\x03gte\x18\x05 \x01(\x10B\xe2\a\xc2H\xde\a\n" +
	"\x8b\x01\n" +
	"\fsfixed64.gte\x1a{!has(rules.lt) && !has(rules.lte) && this < rules.gte? 'value must be greater than or equal to %s'.format([rules.gte]) : ''\n" +
	"\xc5\x01\n" +
	"\x0fsfixed64.gte_lt\x1a\xb1\x01has(rules.lt) && rules.lt >= rules.gte && (this >= rules.lt || this < rules.gte)? 'value must be greater than or equal to %s and less than %s'.format([rules.gte, rules.lt]) : ''\n" +
	"\xcd\x01\n" +
	"\x19sfixed64.gte_lt_exclusive\x1a\xaf\x01has(rules.lt) && rules.lt < rules.gte && (rules.lt <= this && this < rules.gte)? 'value must be greater than or equal to %s or less than %s'.format([rules.gte, rules.lt]) : ''\n" +
	"\xd5\x01\n" +
	"\x10sfixed64.gte_lte\x1a\xc0\x01has(rules.lte) && rules.lte >= rules.gte && (this > rules.lte || this < rules.gte)? 'value must be greater than or equal to %s and less than or equal to %s'.format([rules.gte, rules.lte]) : ''\n" +
	"\xdd\x01\n" +
	"\x1asfixed64.gte_lte_exclusive\x1a\xbe\x01has(rules.lte) && rules.lte < rules.gte && (rules.lte < this && this < rules.gte)? 'value must be greater than or equal to %s or less than or equal to %s'.format([rules.gte, rules.lte]) : ''H\x01R\x03gte\x12|\n" +
	"\x02in\x18\x06 \x03(\x10Bl\xc2Hi\n" +
	"g\n" +
	"\vsfixed64.in\x1aX!(this in dyn(rules)['in']) ? 'value must be in list %s'.format([dyn(rules)['in']]) : ''R\x02in\x12\x80\x01\n" +
	"\x06not_in\x18\a \x03(\x10Bi\xc2Hf\n" +
	"d\n" +
	"\x0fsfixed64.not_in\x1aQthis in rules.not_in ? 'value must not be in list %s'.format([rules.not_in]) : ''R\x05notIn\x127\n" +
	"\aexample\x18\b \x03(\x10B\x1d\xc2H\x1a\n" +
	"\x18\n" +
	"\x10sfixed64.example\x1a\x04trueR\aexample*\t\b\xe8\a\x10\x80\x80\x80\x80\x02B\v\n" +
	"\tless_thanB\x0e\n" +
	"\fgreater_than\"\xbc\x01\n" +
	"\tBoolRules\x12o\n" +
	"\x05const\x18\x01 \x01(\bBY\xc2HV\n" +
	"T\n" +
	"\n" +
	"bool.const\x1aFthis != rules.const ? 'value must equal %s'.format([rules.const]) : ''R\x05const\x123\n" +
	"\aexample\x18\x02 \x03(\bB\x19\xc2H\x16\n" +
	"\x14\n" +
	"\fbool.example\x1a\x04trueR\aexample*\t\b\xe8\a\x10\x80\x80\x80\x80\x02\"\xab9\n" +
	"\vStringRules\x12s\n" +
	"\x05const\x18\x01 \x01(\tB]\xc2HZ\n" +
	"X\n" +
	"\fstring.const\x1aHthis != rules.const ? 'value must equal `%s`'.format([rules.const]) : ''R\x05const\x12\x83\x01\n" +
	"\x03len\x18\x13 \x01(\x04Bq\xc2Hn\n" +
	"l\n" +
	"\n" +
	"string.len\x1a^uint(this.size()) != rules.len ? 'value length must be %s characters'.format([rules.len]) : ''R\x03len\x12\xa1\x01\n" +
	"\amin_len\x18\x02 \x01(\x04B\x87\x01\xc2H\x83\x01\n" +
	"\x80\x01\n" +
	"\x0estring.min_len\x1anuint(this.size()) < rules.min_len ? 'value length must be at least %s characters'.format([rules.min_len]) : ''R\x06minLen\x12\x9f\x01\n" +
	"\amax_len\x18\x03 \x01(\x04B\x85\x01\xc2H\x81\x01\n" +
	"\x7f\n" +
	"\x0estring.max_len\x1amuint(this.size()) > rules.max_len ? 'value length must be at most %s characters'.format([rules.max_len]) : ''R\x06maxLen\x12\xa5\x01\n" +
	"\tlen_bytes\x18\x14 \x01(\x04B\x87\x01\xc2H\x83\x01\n" +
	"\x80\x01\n" +
	"\x10string.len_bytes\x1aluint(bytes(this).size()) != rules.len_bytes ? 'value length must be %s bytes'.format([rules.len_bytes]) : ''R\blenBytes\x12\xad\x01\n" +
	"\tmin_bytes\x18\x04 \x01(\x04B\x8f\x01\xc2H\x8b\x01\n" +
	"\x88\x01\n" +
	"\x10string.min_bytes\x1atuint(bytes(this).size()) < rules.min_bytes ? 'value length must be at least %s bytes'.format([rules.min_bytes]) : ''R\bminBytes\x12\xac\x01\n" +
	"\tmax_bytes\x18\x05 \x01(\x04B\x8e\x01\xc2H\x8a\x01\n" +
	"\x87\x01\n" +
	"\x10string.max_bytes\x1asuint(bytes(this).size()) > rules.max_bytes ? 'value length must be at most %s bytes'.format([rules.max_bytes]) : ''R\bmaxBytes\x12\x96\x01\n" +
	"\apattern\x18\x06 \x01(\tB|\xc2Hy\n" +
	"w\n" +
	"\x0estring.pattern\x1ae!this.matches(rules.pattern) ? 'value does not match regex pattern `%s`'.format([rules.pattern]) : ''R\apattern\x12\x8c\x01\n" +
	"\x06prefix\x18\a \x01(\tBt\xc2Hq\n" +
	"o\n" +
	"\rstring.prefix\x1a^!this.startsWith(rules.prefix) ? 'value does not have prefix `%s`'.format([rules.prefix]) : ''R\x06prefix\x12\x8a\x01\n" +
	"\x06suffix\x18\b \x01(\tBr\xc2Ho\n" +
	"m\n" +
	"\rstring.suffix\x1a\\!this.endsWith(rules.suffix) ? 'value does not have suffix `%s`'.format([rules.suffix]) : ''R\x06suffix\x12\x9a\x01\n" +
	"\bcontains\x18\t \x01(\tB~\xc2H{\n" +
	"y\n" +
	"\x0fstring.contains\x1af!this.contains(rules.contains) ? 'value does not contain substring `%s`'.format([rules.contains]) : ''R\bcontains\x12\xa5\x01\n" +
	"\fnot_contains\x18\x17 \x01(\tB\x81\x01\xc2H~\n" +
	"|\n" +
	"\x13string.not_contains\x1aethis.contains(rules.not_contains) ? 'value contains substring `%s`'.format([rules.not_contains]) : ''R\vnotContains\x12z\n" +
	"\x02in\x18\n" +
	" \x03(\tBj\xc2Hg\n" +
	"e\n" +
	"\tstring.in\x1aX!(this in dyn(rules)['in']) ? 'value must be in list %s'.format([dyn(rules)['in']]) : ''R\x02in\x12~\n" +
	"\x06not_in\x18\v \x03(\tBg\xc2Hd\n" +
	"b\n" +
	"\rstring.not_in\x1aQthis in rules.not_in ? 'value must not be in list %s'.format([rules.not_in]) : ''R\x05notIn\x12\xe6\x01\n" +
	"\x05email\x18\f \x01(\bB\xcd\x01\xc2H\xc9\x01\n" +
	"a\n" +
	"\fstring.email\x12#value must be a valid email address\x1a,!rules.email || this == '' || this.isEmail()\n" +
	"d\n" +
	"\x12string.email_empty\x122value is empty, which is not a valid email address\x1a\x1a!rules.email || this != ''H\x00R\x05email\x12\xf1\x01\n" +
	"\bhostname\x18\r \x01(\bB\xd2\x01\xc2H\xce\x01\n" +
	"e\n" +
	"\x0fstring.hostname\x12\x1evalue must be a valid hostname\x1a2!rules.hostname || this == '' || this.isHostname()\n" +
	"e\n" +
	"\x15string.hostname_empty\x12-value is empty, which is not a valid hostname\x1a\x1d!rules.hostname || this != ''H\x00R\bhostname\x12\xcb\x01\n" +
	"\x02ip\x18\x0e \x01(\bB\xb8\x01\xc2H\xb4\x01\n" +
	"U\n" +
	"\tstring.ip\x12 value must be a valid IP address\x1a&!rules.ip || this == '' || this.isIp()\n" +
	"[\n" +
	"\x0fstring.ip_empty\x12/value is empty, which is not a valid IP address\x1a\x17!rules.ip || this != ''H\x00R\x02ip\x12\xdc\x01\n" +
	"\x04ipv4\x18\x0f \x01(\bB\xc5\x01\xc2H\xc1\x01\n" +
	"\\\n" +
	"\vstring.ipv4\x12\"value must be a valid IPv4 address\x1a)!rules.ipv4 || this == '' || this.isIp(4)\n" +
	"a\n" +
	"\x11string.ipv4_empty\x121value is empty, which is not a valid IPv4 address\x1a\x19!rules.ipv4 || this != ''H\x00R\x04ipv4\x12\xdc\x01\n" +
	"\x04ipv6\x18\x10 \x01(\bB\xc5\x01\xc2H\xc1\x01\n" +
	"\\\n" +
	"\vstring.ipv6\x12\"value must be a valid IPv6 address\x1a)!rules.ipv6 || this == '' || this.isIp(6)\n" +
	"a\n" +
	"\x11string.ipv6_empty\x121value is empty, which is not a valid IPv6 address\x1a\x19!rules.ipv6 || this != ''H\x00R\x04ipv6\x12\xc4\x01\n" +
	"\x03uri\x18\x11 \x01(\bB\xaf\x01\xc2H\xab\x01\n" +
	"Q\n" +
	"\n" +
	"string.uri\x12\x19value must be a valid URI\x1a(!rules.uri || this == '' || this.isUri()\n" +
	"V\n" +
	"\x10string.uri_empty\x12(value is empty, which is not a valid URI\x1a\x18!rules.uri || this != ''H\x00R\x03uri\x12x\n" +
	"\auri_ref\x18\x12 \x01(\bB]\xc2HZ\n" +
	"X\n" +
	"\x0estring.uri_ref\x12#value must be a valid URI Reference\x1a!!rules.uri_ref || this.isUriRef()H\x00R\x06uriRef\x12\x99\x02\n" +
	"\aaddress\x18\x15 \x01(\bB\xfc\x01\xc2H\xf8\x01\n" +
	"\x81\x01\n" +
	"\x0estring.address\x12-value must be a valid hostname, or ip address\x1a@!rules.address || this == '' || this.isHostname() || this.isIp()\n" +
	"r\n" +
	"\x14string.address_empty\x12<value is empty, which is not a valid hostname, or ip address\x1a\x1c!rules.address || this != ''H\x00R\aaddress\x12\x9e\x02\n" +
	"\x04uuid\x18\x16 \x01(\bB\x87\x02\xc2H\x83\x02\n" +
	"\xa5\x01\n" +
	"\vstring.uuid\x12\x1avalue must be a valid UUID\x1az!rules.uuid || this == '' || this.matches('^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$')\n" +
	"Y\n" +
	"\x11string.uuid_empty\x12)value is empty, which is not a valid UUID\x1a\x19!rules.uuid || this != ''H\x00R\x04uuid\x12\xf7\x01\n" +
	"\x05tuuid\x18! \x01(\bB\xde\x01\xc2H\xda\x01\n" +
	"s\n" +
	"\fstring.tuuid\x12\"value must be a valid trimmed UUID\x1a?!rules.tuuid || this == '' || this.matches('^[0-9a-fA-F]{32}$')\n" +
	"c\n" +
	"\x12string.tuuid_empty\x121value is empty, which is not a valid trimmed UUID\x1a\x1a!rules.tuuid || this != ''H\x00R\x05tuuid\x12\xa7\x02\n" +
	"\x11ip_with_prefixlen\x18\x1a \x01(\bB\xf8\x01\xc2H\xf4\x01\n" +
	"x\n" +
	"\x18string.ip_with_prefixlen\x12\x1fvalue must be a valid IP prefix\x1a;!rules.ip_with_prefixlen || this == '' || this.isIpPrefix()\n" +
	"x\n" +
	"\x1estring.ip_with_prefixlen_empty\x12.value is empty, which is not a valid IP prefix\x1a&!rules.ip_with_prefixlen || this != ''H\x00R\x0fipWithPrefixlen\x12\xe2\x02\n" +
	"\x13ipv4_with_prefixlen\x18\x1b \x01(\bB\xaf\x02\xc2H\xab\x02\n" +
	"\x93\x01\n" +
	"\x1astring.ipv4_with_prefixlen\x125value must be a valid IPv4 address with prefix length\x1a>!rules.ipv4_with_prefixlen || this == '' || this.isIpPrefix(4)\n" +
	"\x92\x01\n" +
	" string.ipv4_with_prefixlen_empty\x12Dvalue is empty, which is not a valid IPv4 address with prefix length\x1a(!rules.ipv4_with_prefixlen || this != ''H\x00R\x11ipv4WithPrefixlen\x12\xe2\x02\n" +
	"\x13ipv6_with_prefixlen\x18\x1c \x01(\bB\xaf\x02\xc2H\xab\x02\n" +
	"\x93\x01\n" +
	"\x1astring.ipv6_with_prefixlen\x125value must be a valid IPv6 address with prefix length\x1a>!rules.ipv6_with_prefixlen || this == '' || this.isIpPrefix(6)\n" +
	"\x92\x01\n" +
	" string.ipv6_with_prefixlen_empty\x12Dvalue is empty, which is not a valid IPv6 address with prefix length\x1a(!rules.ipv6_with_prefixlen || this != ''H\x00R\x11ipv6WithPrefixlen\x12\xfc\x01\n" +
	"\tip_prefix\x18\x1d \x01(\bB\xdc\x01\xc2H\xd8\x01\n" +
	"l\n" +
	"\x10string.ip_prefix\x12\x1fvalue must be a valid IP prefix\x1a7!rules.ip_prefix || this == '' || this.isIpPrefix(true)\n" +
	"h\n" +
	"\x16string.ip_prefix_empty\x12.value is empty, which is not a valid IP prefix\x1a\x1e!rules.ip_prefix || this != ''H\x00R\bipPrefix\x12\x8f\x02\n" +
	"\vipv4_prefix\x18\x1e \x01(\bB\xeb\x01\xc2H\xe7\x01\n" +
	"u\n" +
	"\x12string.ipv4_prefix\x12!value must be a valid IPv4 prefix\x1a<!rules.ipv4_prefix || this == '' || this.isIpPrefix(4, true)\n" +
	"n\n" +
	"\x18string.ipv4_prefix_empty\x120value is empty, which is not a valid IPv4 prefix\x1a !rules.ipv4_prefix || this != ''H\x00R\n" +
	"ipv4Prefix\x12\x8f\x02\n" +
	"\vipv6_prefix\x18\x1f \x01(\bB\xeb\x01\xc2H\xe7\x01\n" +
	"u\n" +
	"\x12string.ipv6_prefix\x12!value must be a valid IPv6 prefix\x1a<!rules.ipv6_prefix || this == '' || this.isIpPrefix(6, true)\n" +
	"n\n" +
	"\x18string.ipv6_prefix_empty\x120value is empty, which is not a valid IPv6 prefix\x1a !rules.ipv6_prefix || this != ''H\x00R\n" +
	"ipv6Prefix\x12\xc2\x02\n" +
	"\rhost_and_port\x18  \x01(\bB\x9b\x02\xc2H\x97\x02\n" +
	"\x99\x01\n" +
	"\x14string.host_and_port\x12Avalue must be a valid host (hostname or IP address) and port pair\x1a>!rules.host_and_port || this == '' || this.isHostAndPort(true)\n" +
	"y\n" +
	"\x1astring.host_and_port_empty\x127value is empty, which is not a valid host and port pair\x1a\"!rules.host_and_port || this != ''H\x00R\vhostAndPort\x12\xb8\x05\n" +
	"\x10well_known_regex\x18\x18 \x01(\x0e2\x18.buf.validate.KnownRegexB\xf1\x04\xc2H\xed\x04\n" +
	"\xf0\x01\n" +
	"#string.well_known_regex.header_name\x12&value must be a valid HTTP header name\x1a\xa0\x01rules.well_known_regex != 1 || this == '' || this.matches(!has(rules.strict) || rules.strict ?'^:?[0-9a-zA-Z!#$%&\\'*+-.^_|~\\x60]+$' :'^[^\\u0000\\u000A\\u000D]+$')\n" +
	"\x8d\x01\n" +
	")string.well_known_regex.header_name_empty\x125value is empty, which is not a valid HTTP header name\x1a)rules.well_known_regex != 1 || this != ''\n" +
	"\xe7\x01\n" +
	"$string.well_known_regex.header_value\x12'value must be a valid HTTP header value\x1a\x95\x01rules.well_known_regex != 2 || this.matches(!has(rules.strict) || rules.strict ?'^[^\\u0000-\\u0008\\u000A-\\u001F\\u007F]*$' :'^[^\\u0000\\u000A\\u000D]*$')H\x00R\x0ewellKnownRegex\x12\x16\n" +
	"\x06strict\x18\x19 \x01(\bR\x06strict\x125\n" +
	"\aexample\x18\" \x03(\tB\x1b\xc2H\x18\n" +
	"\x16\n" +
	"\x0estring.example\x1a\x04trueR\aexample*\t\b\xe8\a\x10\x80\x80\x80\x80\x02B\f\n" +
	"\n" +
	"well_known\"\xa3\x11\n" +
	"\n" +
	"BytesRules\x12m\n" +
	"\x05const\x18\x01 \x01(\fBW\xc2HT\n" +
	"R\n" +
	"\vbytes.const\x1aCthis != rules.const ? 'value must be %x'.format([rules.const]) : ''R\x05const\x12}\n" +
	"\x03len\x18\r \x01(\x04Bk\xc2Hh\n" +
	"f\n" +
	"\tbytes.len\x1aYuint(this.size()) != rules.len ? 'value length must be %s bytes'.format([rules.len]) : ''R\x03len\x12\x98\x01\n" +
	"\amin_len\x18\x02 \x01(\x04B\x7f\xc2H|\n" +
	"z\n" +
	"\rbytes.min_len\x1aiuint(this.size()) < rules.min_len ? 'value length must be at least %s bytes'.format([rules.min_len]) : ''R\x06minLen\x12\x90\x01\n" +
	"\amax_len\x18\x03 \x01(\x04Bw\xc2Ht\n" +
	"r\n" +
	"\rbytes.max_len\x1aauint(this.size()) > rules.max_len ? 'value must be at most %s bytes'.format([rules.max_len]) : ''R\x06maxLen\x12\x99\x01\n" +
	"\apattern\x18\x04 \x01(\tB\x7f\xc2H|\n" +
	"z\n" +
	"\rbytes.pattern\x1ai!string(this).matches(rules.pattern) ? 'value must match regex pattern `%s`'.format([rules.pattern]) : ''R\apattern\x12\x89\x01\n" +
	"\x06prefix\x18\x05 \x01(\fBq\xc2Hn\n" +
	"l\n" +
	"\fbytes.prefix\x1a\\!this.startsWith(rules.prefix) ? 'value does not have prefix %x'.format([rules.prefix]) : ''R\x06prefix\x12\x87\x01\n" +
	"\x06suffix\x18\x06 \x01(\fBo\xc2Hl\n" +
	"j\n" +
	"\fbytes.suffix\x1aZ!this.endsWith(rules.suffix) ? 'value does not have suffix %x'.format([rules.suffix]) : ''R\x06suffix\x12\x8d\x01\n" +
	"\bcontains\x18\a \x01(\fBq\xc2Hn\n" +
	"l\n" +
	"\x0ebytes.contains\x1aZ!this.contains(rules.contains) ? 'value does not contain %x'.format([rules.contains]) : ''R\bcontains\x12\x9b\x01\n" +
	"\x02in\x18\b \x03(\fB\x8a\x01\xc2H\x86\x01\n" +
	"\x83\x01\n" +
	"\bbytes.in\x1awdyn(rules)['in'].size() > 0 && !(this in dyn(rules)['in']) ? 'value must be in list %s'.format([dyn(rules)['in']]) : ''R\x02in\x12}\n" +
	"\x06not_in\x18\t \x03(\fBf\xc2Hc\n" +
	"a\n" +
	"\fbytes.not_in\x1aQthis in rules.not_in ? 'value must not be in list %s'.format([rules.not_in]) : ''R\x05notIn\x12\xef\x01\n" +
	"\x02ip\x18\n" +
	" \x01(\bB\xdc\x01\xc2H\xd8\x01\n" +
	"t\n" +
	"\bbytes.ip\x12 value must be a valid IP address\x1aF!rules.ip || this.size() == 0 || this.size() == 4 || this.size() == 16\n" +
	"`\n" +
	"\x0ebytes.ip_empty\x12/value is empty, which is not a valid IP address\x1a\x1d!rules.ip || this.size() != 0H\x00R\x02ip\x12\xea\x01\n" +
	"\x04ipv4\x18\v \x01(\bB\xd3\x01\xc2H\xcf\x01\n" +
	"e\n" +
	"\n" +
	"bytes.ipv4\x12\"value must be a valid IPv4 address\x1a3!rules.ipv4 || this.size() == 0 || this.size() == 4\n" +
	"f\n" +
	"\x10bytes.ipv4_empty\x121value is empty, which is not a valid IPv4 address\x1a\x1f!rules.ipv4 || this.size() != 0H\x00R\x04ipv4\x12\xeb\x01\n" +
	"\x04ipv6\x18\f \x01(\bB\xd4\x01\xc2H\xd0\x01\n" +
	"f\n" +
	"\n" +
	"bytes.ipv6\x12\"value must be a valid IPv6 address\x1a4!rules.ipv6 || this.size() == 0 || this.size() == 16\n" +
	"f\n" +
	"\x10bytes.ipv6_empty\x121value is empty, which is not a valid IPv6 address\x1a\x1f!rules.ipv6 || this.size() != 0H\x00R\x04ipv6\x124\n" +
	"\aexample\x18\x0e \x03(\fB\x1a\xc2H\x17\n" +
	"\x15\n" +
	"\rbytes.example\x1a\x04trueR\aexample*\t\b\xe8\a\x10\x80\x80\x80\x80\x02B\f\n" +
	"\n" +
	"well_known\"\xd7\x03\n" +
	"\tEnumRules\x12o\n" +
	"\x05const\x18\x01 \x01(\x05BY\xc2HV\n" +
	"T\n" +
	"\n" +
	"enum.const\x1aFthis != rules.const ? 'value must equal %s'.format([rules.const]) : ''R\x05const\x12!\n" +
	"\fdefined_only\x18\x02 \x01(\bR\vdefinedOnly\x12x\n" +
	"\x02in\x18\x03 \x03(\x05Bh\xc2He\n" +
	"c\n" +
	"\aenum.in\x1aX!(this in dyn(rules)['in']) ? 'value must be in list %s'.format([dyn(rules)['in']]) : ''R\x02in\x12|\n" +
	"\x06not_in\x18\x04 \x03(\x05Be\xc2Hb\n" +
	"`\n" +
	"\venum.not_in\x1aQthis in rules.not_in ? 'value must not be in list %s'.format([rules.not_in]) : ''R\x05notIn\x123\n" +
	"\aexample\x18\x05 \x03(\x05B\x19\xc2H\x16\n" +
	"\x14\n" +
	"\fenum.example\x1a\x04trueR\aexample*\t\b\xe8\a\x10\x80\x80\x80\x80\x02\"\xa4\x04\n" +
	"\rRepeatedRules\x12\xa8\x01\n" +
	"\tmin_items\x18\x01 \x01(\x04B\x8a\x01\xc2H\x86\x01\n" +
	"\x83\x01\n" +
	"\x12repeated.min_items\x1amuint(this.size()) < rules.min_items ? 'value must contain at least %d item(s)'.format([rules.min_items]) : ''R\bminItems\x12\xac\x01\n" +
	"\tmax_items\x18\x02 \x01(\x04B\x8e\x01\xc2H\x8a\x01\n" +
	"\x87\x01\n" +
	"\x12repeated.max_items\x1aquint(this.size()) > rules.max_items ? 'value must contain no more than %s item(s)'.format([rules.max_items]) : ''R\bmaxItems\x12x\n" +
	"\x06unique\x18\x03 \x01(\bB`\xc2H]\n" +
	"[\n" +
	"\x0frepeated.unique\x12(repeated value must contain unique items\x1a\x1e!rules.unique || this.unique()R\x06unique\x124\n" +
	"\x05items\x18\x04 \x01(\v2\x1e.buf.validate.FieldConstraintsR\x05items*\t\b\xe8\a\x10\x80\x80\x80\x80\x02\"\xb8\x03\n" +
	"\bMapRules\x12\x99\x01\n" +
	"\tmin_pairs\x18\x01 \x01(\x04B|\xc2Hy\n" +
	"w\n" +
	"\rmap.min_pairs\x1afuint(this.size()) < rules.min_pairs ? 'map must be at least %d entries'.format([rules.min_pairs]) : ''R\bminPairs\x12\x98\x01\n" +
	"\tmax_pairs\x18\x02 \x01(\x04B{\xc2Hx\n" +
	"v\n" +
	"\rmap.max_pairs\x1aeuint(this.size()) > rules.max_pairs ? 'map must be at most %d entries'.format([rules.max_pairs]) : ''R\bmaxPairs\x122\n" +
	"\x04keys\x18\x04 \x01(\v2\x1e.buf.validate.FieldConstraintsR\x04keys\x126\n" +
	"\x06values\x18\x05 \x01(\v2\x1e.buf.validate.FieldConstraintsR\x06values*\t\b\xe8\a\x10\x80\x80\x80\x80\x02\"1\n" +
	"\bAnyRules\x12\x0e\n" +
	"\x02in\x18\x02 \x03(\tR\x02in\x12\x15\n" +
	"\x06not_in\x18\x03 \x03(\tR\x05notIn\"\xa2\x17\n" +
	"\rDurationRules\x12\x8e\x01\n" +
	"\x05const\x18\x02 \x01(\v2\x19.google.protobuf.DurationB]\xc2HZ\n" +
	"X\n" +
	"\x0eduration.const\x1aFthis != rules.const ? 'value must equal %s'.format([rules.const]) : ''R\x05const\x12\xac\x01\n" +
	"\x02lt\x18\x03 \x01(\v2\x19.google.protobuf.DurationB\x7f\xc2H|\n" +
	"z\n" +
	"\vduration.lt\x1ak!has(rules.gte) && !has(rules.gt) && this >= rules.lt? 'value must be less than %s'.format([rules.lt]) : ''H\x00R\x02lt\x12\xbf\x01\n" +
	"\x03lte\x18\x04 \x01(\v2\x19.google.protobuf.DurationB\x8f\x01\xc2H\x8b\x01\n" +
	"\x88\x01\n" +
	"\fduration.lte\x1ax!has(rules.gte) && !has(rules.gt) && this > rules.lte? 'value must be less than or equal to %s'.format([rules.lte]) : ''H\x00R\x03lte\x12\xc5\a\n" +
	"\x02gt\x18\x05 \x01(\v2\x19.google.protobuf.DurationB\x97\a\xc2H\x93\a\n" +
	"}\n" +
	"\vduration.gt\x1an!has(rules.lt) && !has(rules.lte) && this <= rules.gt? 'value must be greater than %s'.format([rules.gt]) : ''\n" +
	"\xb6\x01\n" +
	"\x0eduration.gt_lt\x1a\xa3\x01has(rules.lt) && rules.lt >= rules.gt && (this >= rules.lt || this <= rules.gt)? 'value must be greater than %s and less than %s'.format([rules.gt, rules.lt]) : ''\n" +
	"\xbe\x01\n" +
	"\x18duration.gt_lt_exclusive\x1a\xa1\x01has(rules.lt) && rules.lt < rules.gt && (rules.lt <= this && this <= rules.gt)? 'value must be greater than %s or less than %s'.format([rules.gt, rules.lt]) : ''\n" +
	"\xc6\x01\n" +
	"\x0fduration.gt_lte\x1a\xb2\x01has(rules.lte) && rules.lte >= rules.gt && (this > rules.lte || this <= rules.gt)? 'value must be greater than %s and less than or equal to %s'.format([rules.gt, rules.lte]) : ''\n" +
	"\xce\x01\n" +
	"\x19duration.gt_lte_exclusive\x1a\xb0\x01has(rules.lte) && rules.lte < rules.gt && (rules.lte < this && this <= rules.gt)? 'value must be greater than %s or less than or equal to %s'.format([rules.gt, rules.lte]) : ''H\x01R\x02gt\x12\x92\b\n" +
	"\x03gte\x18\x06 \x01(\v2\x19.google.protobuf.DurationB\xe2\a\xc2H\xde\a\n" +
	"\x8b\x01\n" +
	"\fduration.gte\x1a{!has(rules.lt) && !has(rules.lte) && this < rules.gte? 'value must be greater than or equal to %s'.format([rules.gte]) : ''\n" +
	"\xc5\x01\n" +
	"\x0fduration.gte_lt\x1a\xb1\x01has(rules.lt) && rules.lt >= rules.gte && (this >= rules.lt || this < rules.gte)? 'value must be greater than or equal to %s and less than %s'.format([rules.gte, rules.lt]) : ''\n" +
	"\xcd\x01\n" +
	"\x19duration.gte_lt_exclusive\x1a\xaf\x01has(rules.lt) && rules.lt < rules.gte && (rules.lt <= this && this < rules.gte)? 'value must be greater than or equal to %s or less than %s'.format([rules.gte, rules.lt]) : ''\n" +
	"\xd5\x01\n" +
	"\x10duration.gte_lte\x1a\xc0\x01has(rules.lte) && rules.lte >= rules.gte && (this > rules.lte || this < rules.gte)? 'value must be greater than or equal to %s and less than or equal to %s'.format([rules.gte, rules.lte]) : ''\n" +
	"\xdd\x01\n" +
	"\x1aduration.gte_lte_exclusive\x1a\xbe\x01has(rules.lte) && rules.lte < rules.gte && (rules.lte < this && this < rules.gte)? 'value must be greater than or equal to %s or less than or equal to %s'.format([rules.gte, rules.lte]) : ''H\x01R\x03gte\x12\x97\x01\n" +
	"\x02in\x18\a \x03(\v2\x19.google.protobuf.DurationBl\xc2Hi\n" +
	"g\n" +
	"\vduration.in\x1aX!(this in dyn(rules)['in']) ? 'value must be in list %s'.format([dyn(rules)['in']]) : ''R\x02in\x12\x9b\x01\n" +
	"\x06not_in\x18\b \x03(\v2\x19.google.protobuf.DurationBi\xc2Hf\n" +
	"d\n" +
	"\x0fduration.not_in\x1aQthis in rules.not_in ? 'value must not be in list %s'.format([rules.not_in]) : ''R\x05notIn\x12R\n" +
	"\aexample\x18\t \x03(\v2\x19.google.protobuf.DurationB\x1d\xc2H\x1a\n" +
	"\x18\n" +
	"\x10duration.example\x1a\x04trueR\aexample*\t\b\xe8\a\x10\x80\x80\x80\x80\x02B\v\n" +
	"\tless_thanB\x0e\n" +
	"\fgreater_than\"\xb0\x18\n" +
	"\x0eTimestampRules\x12\x90\x01\n" +
	"\x05const\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampB^\xc2H[\n" +
	"Y\n" +
	"\x0ftimestamp.const\x1aFthis != rules.const ? 'value must equal %s'.format([rules.const]) : ''R\x05const\x12\xaf\x01\n" +
	"\x02lt\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampB\x80\x01\xc2H}\n" +
	"{\n" +
	"\ftimestamp.lt\x1ak!has(rules.gte) && !has(rules.gt) && this >= rules.lt? 'value must be less than %s'.format([rules.lt]) : ''H\x00R\x02lt\x12\xc1\x01\n" +
	"\x03lte\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampB\x90\x01\xc2H\x8c\x01\n" +
	"\x89\x01\n" +
	"\rtimestamp.lte\x1ax!has(rules.gte) && !has(rules.gt) && this > rules.lte? 'value must be less than or equal to %s'.format([rules.lte]) : ''H\x00R\x03lte\x12s\n" +
	"\x06lt_now\x18\a \x01(\bBZ\xc2HW\n" +
	"U\n" +
	"\x10timestamp.lt_now\x1aA(rules.lt_now && this > now) ? 'value must be less than now' : ''H\x00R\x05ltNow\x12\xcb\a\n" +
	"\x02gt\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampB\x9c\a\xc2H\x98\a\n" +
	"~\n" +
	"\ftimestamp.gt\x1an!has(rules.lt) && !has(rules.lte) && this <= rules.gt? 'value must be greater than %s'.format([rules.gt]) : ''\n" +
	"\xb7\x01\n" +
	"\x0ftimestamp.gt_lt\x1a\xa3\x01has(rules.lt) && rules.lt >= rules.gt && (this >= rules.lt || this <= rules.gt)? 'value must be greater than %s and less than %s'.format([rules.gt, rules.lt]) : ''\n" +
	"\xbf\x01\n" +
	"\x19timestamp.gt_lt_exclusive\x1a\xa1\x01has(rules.lt) && rules.lt < rules.gt && (rules.lt <= this && this <= rules.gt)? 'value must be greater than %s or less than %s'.format([rules.gt, rules.lt]) : ''\n" +
	"\xc7\x01\n" +
	"\x10timestamp.gt_lte\x1a\xb2\x01has(rules.lte) && rules.lte >= rules.gt && (this > rules.lte || this <= rules.gt)? 'value must be greater than %s and less than or equal to %s'.format([rules.gt, rules.lte]) : ''\n" +
	"\xcf\x01\n" +
	"\x1atimestamp.gt_lte_exclusive\x1a\xb0\x01has(rules.lte) && rules.lte < rules.gt && (rules.lte < this && this <= rules.gt)? 'value must be greater than %s or less than or equal to %s'.format([rules.gt, rules.lte]) : ''H\x01R\x02gt\x12\x98\b\n" +
	"\x03gte\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampB\xe7\a\xc2H\xe3\a\n" +
	"\x8c\x01\n" +
	"\rtimestamp.gte\x1a{!has(rules.lt) && !has(rules.lte) && this < rules.gte? 'value must be greater than or equal to %s'.format([rules.gte]) : ''\n" +
	"\xc6\x01\n" +
	"\x10timestamp.gte_lt\x1a\xb1\x01has(rules.lt) && rules.lt >= rules.gte && (this >= rules.lt || this < rules.gte)? 'value must be greater than or equal to %s and less than %s'.format([rules.gte, rules.lt]) : ''\n" +
	"\xce\x01\n" +
	"\x1atimestamp.gte_lt_exclusive\x1a\xaf\x01has(rules.lt) && rules.lt < rules.gte && (rules.lt <= this && this < rules.gte)? 'value must be greater than or equal to %s or less than %s'.format([rules.gte, rules.lt]) : ''\n" +
	"\xd6\x01\n" +
	"\x11timestamp.gte_lte\x1a\xc0\x01has(rules.lte) && rules.lte >= rules.gte && (this > rules.lte || this < rules.gte)? 'value must be greater than or equal to %s and less than or equal to %s'.format([rules.gte, rules.lte]) : ''\n" +
	"\xde\x01\n" +
	"\x1btimestamp.gte_lte_exclusive\x1a\xbe\x01has(rules.lte) && rules.lte < rules.gte && (rules.lte < this && this < rules.gte)? 'value must be greater than or equal to %s or less than or equal to %s'.format([rules.gte, rules.lte]) : ''H\x01R\x03gte\x12v\n" +
	"\x06gt_now\x18\b \x01(\bB]\xc2HZ\n" +
	"X\n" +
	"\x10timestamp.gt_now\x1aD(rules.gt_now && this < now) ? 'value must be greater than now' : ''H\x01R\x05gtNow\x12\xc0\x01\n" +
	"\x06within\x18\t \x01(\v2\x19.google.protobuf.DurationB\x8c\x01\xc2H\x88\x01\n" +
	"\x85\x01\n" +
	"\x10timestamp.within\x1aqthis < now-rules.within || this > now+rules.within ? 'value must be within %s of now'.format([rules.within]) : ''R\x06within\x12T\n" +
	"\aexample\x18\n" +
	" \x03(\v2\x1a.google.protobuf.TimestampB\x1e\xc2H\x1b\n" +
	"\x19\n" +
	"\x11timestamp.example\x1a\x04trueR\aexample*\t\b\xe8\a\x10\x80\x80\x80\x80\x02B\v\n" +
	"\tless_thanB\x0e\n" +
	"\fgreater_than\"E\n" +
	"\n" +
	"Violations\x127\n" +
	"\n" +
	"violations\x18\x01 \x03(\v2\x17.buf.validate.ViolationR\n" +
	"violations\"\xd1\x01\n" +
	"\tViolation\x12-\n" +
	"\x05field\x18\x05 \x01(\v2\x17.buf.validate.FieldPathR\x05field\x12+\n" +
	"\x04rule\x18\x06 \x01(\v2\x17.buf.validate.FieldPathR\x04rule\x12#\n" +
	"\rconstraint_id\x18\x02 \x01(\tR\fconstraintId\x12\x18\n" +
	"\amessage\x18\x03 \x01(\tR\amessage\x12\x17\n" +
	"\afor_key\x18\x04 \x01(\bR\x06forKeyJ\x04\b\x01\x10\x02R\n" +
	"field_path\"G\n" +
	"\tFieldPath\x12:\n" +
	"\belements\x18\x01 \x03(\v2\x1e.buf.validate.FieldPathElementR\belements\"\xcc\x03\n" +
	"\x10FieldPathElement\x12!\n" +
	"\ffield_number\x18\x01 \x01(\x05R\vfieldNumber\x12\x1d\n" +
	"\n" +
	"field_name\x18\x02 \x01(\tR\tfieldName\x12I\n" +
	"\n" +
	"field_type\x18\x03 \x01(\x0e2*.google.protobuf.FieldDescriptorProto.TypeR\tfieldType\x12E\n" +
	"\bkey_type\x18\x04 \x01(\x0e2*.google.protobuf.FieldDescriptorProto.TypeR\akeyType\x12I\n" +
	"\n" +
	"value_type\x18\x05 \x01(\x0e2*.google.protobuf.FieldDescriptorProto.TypeR\tvalueType\x12\x16\n" +
	"\x05index\x18\x06 \x01(\x04H\x00R\x05index\x12\x1b\n" +
	"\bbool_key\x18\a \x01(\bH\x00R\aboolKey\x12\x19\n" +
	"\aint_key\x18\b \x01(\x03H\x00R\x06intKey\x12\x1b\n" +
	"\buint_key\x18\t \x01(\x04H\x00R\auintKey\x12\x1f\n" +
	"\n" +
	"string_key\x18\n" +
	" \x01(\tH\x00R\tstringKeyB\v\n" +
	"\tsubscript*\x87\x01\n" +
	"\x06Ignore\x12\x16\n" +
	"\x12IGNORE_UNSPECIFIED\x10\x00\x12\x19\n" +
	"\x15IGNORE_IF_UNPOPULATED\x10\x01\x12\x1b\n" +
	"\x17IGNORE_IF_DEFAULT_VALUE\x10\x02\x12\x11\n" +
	"\rIGNORE_ALWAYS\x10\x03*\x1aIGNORE_EMPTYIGNORE_DEFAULT*n\n" +
	"\n" +
	"KnownRegex\x12\x1b\n" +
	"\x17KNOWN_REGEX_UNSPECIFIED\x10\x00\x12 \n" +
	"\x1cKNOWN_REGEX_HTTP_HEADER_NAME\x10\x01\x12!\n" +
	"\x1dKNOWN_REGEX_HTTP_HEADER_VALUE\x10\x02:\\\n" +
	"\amessage\x12\x1f.google.protobuf.MessageOptions\x18\x87\t \x01(\v2 .buf.validate.MessageConstraintsR\amessage:T\n" +
	"\x05oneof\x12\x1d.google.protobuf.OneofOptions\x18\x87\t \x01(\v2\x1e.buf.validate.OneofConstraintsR\x05oneof:T\n" +
	"\x05field\x12\x1d.google.protobuf.FieldOptions\x18\x87\t \x01(\v2\x1e.buf.validate.FieldConstraintsR\x05field:c\n" +
	"\n" +
	"predefined\x12\x1d.google.protobuf.FieldOptions\x18\x88\t \x01(\v2#.buf.validate.PredefinedConstraintsR\n" +
	"predefinedB\xb5\x01\n" +
	"\x10com.buf.validateB\rValidateProtoP\x01ZAgithub.com/bufbuild/protovalidate/tools/internal/gen/buf/validate\xa2\x02\x03BVX\xaa\x02\fBuf.Validate\xca\x02\fBuf\\Validate\xe2\x02\x18Buf\\Validate\\GPBMetadata\xea\x02\rBuf::Validate"

var (
	file_buf_validate_validate_proto_rawDescOnce sync.Once
	file_buf_validate_validate_proto_rawDescData []byte
)

func file_buf_validate_validate_proto_rawDescGZIP() []byte {
	file_buf_validate_validate_proto_rawDescOnce.Do(func() {
		file_buf_validate_validate_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_buf_validate_validate_proto_rawDesc), len(file_buf_validate_validate_proto_rawDesc)))
	})
	return file_buf_validate_validate_proto_rawDescData
}

var file_buf_validate_validate_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_buf_validate_validate_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_buf_validate_validate_proto_goTypes = []any{
	(Ignore)(0),                                 // 0: buf.validate.Ignore
	(KnownRegex)(0),                             // 1: buf.validate.KnownRegex
	(*Constraint)(nil),                          // 2: buf.validate.Constraint
	(*MessageConstraints)(nil),                  // 3: buf.validate.MessageConstraints
	(*OneofConstraints)(nil),                    // 4: buf.validate.OneofConstraints
	(*FieldConstraints)(nil),                    // 5: buf.validate.FieldConstraints
	(*PredefinedConstraints)(nil),               // 6: buf.validate.PredefinedConstraints
	(*FloatRules)(nil),                          // 7: buf.validate.FloatRules
	(*DoubleRules)(nil),                         // 8: buf.validate.DoubleRules
	(*Int32Rules)(nil),                          // 9: buf.validate.Int32Rules
	(*Int64Rules)(nil),                          // 10: buf.validate.Int64Rules
	(*UInt32Rules)(nil),                         // 11: buf.validate.UInt32Rules
	(*UInt64Rules)(nil),                         // 12: buf.validate.UInt64Rules
	(*SInt32Rules)(nil),                         // 13: buf.validate.SInt32Rules
	(*SInt64Rules)(nil),                         // 14: buf.validate.SInt64Rules
	(*Fixed32Rules)(nil),                        // 15: buf.validate.Fixed32Rules
	(*Fixed64Rules)(nil),                        // 16: buf.validate.Fixed64Rules
	(*SFixed32Rules)(nil),                       // 17: buf.validate.SFixed32Rules
	(*SFixed64Rules)(nil),                       // 18: buf.validate.SFixed64Rules
	(*BoolRules)(nil),                           // 19: buf.validate.BoolRules
	(*StringRules)(nil),                         // 20: buf.validate.StringRules
	(*BytesRules)(nil),                          // 21: buf.validate.BytesRules
	(*EnumRules)(nil),                           // 22: buf.validate.EnumRules
	(*RepeatedRules)(nil),                       // 23: buf.validate.RepeatedRules
	(*MapRules)(nil),                            // 24: buf.validate.MapRules
	(*AnyRules)(nil),                            // 25: buf.validate.AnyRules
	(*DurationRules)(nil),                       // 26: buf.validate.DurationRules
	(*TimestampRules)(nil),                      // 27: buf.validate.TimestampRules
	(*Violations)(nil),                          // 28: buf.validate.Violations
	(*Violation)(nil),                           // 29: buf.validate.Violation
	(*FieldPath)(nil),                           // 30: buf.validate.FieldPath
	(*FieldPathElement)(nil),                    // 31: buf.validate.FieldPathElement
	(*durationpb.Duration)(nil),                 // 32: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),               // 33: google.protobuf.Timestamp
	(descriptorpb.FieldDescriptorProto_Type)(0), // 34: google.protobuf.FieldDescriptorProto.Type
	(*descriptorpb.MessageOptions)(nil),         // 35: google.protobuf.MessageOptions
	(*descriptorpb.OneofOptions)(nil),           // 36: google.protobuf.OneofOptions
	(*descriptorpb.FieldOptions)(nil),           // 37: google.protobuf.FieldOptions
}
var file_buf_validate_validate_proto_depIdxs = []int32{
	2,  // 0: buf.validate.MessageConstraints.cel:type_name -> buf.validate.Constraint
	2,  // 1: buf.validate.FieldConstraints.cel:type_name -> buf.validate.Constraint
	0,  // 2: buf.validate.FieldConstraints.ignore:type_name -> buf.validate.Ignore
	7,  // 3: buf.validate.FieldConstraints.float:type_name -> buf.validate.FloatRules
	8,  // 4: buf.validate.FieldConstraints.double:type_name -> buf.validate.DoubleRules
	9,  // 5: buf.validate.FieldConstraints.int32:type_name -> buf.validate.Int32Rules
	10, // 6: buf.validate.FieldConstraints.int64:type_name -> buf.validate.Int64Rules
	11, // 7: buf.validate.FieldConstraints.uint32:type_name -> buf.validate.UInt32Rules
	12, // 8: buf.validate.FieldConstraints.uint64:type_name -> buf.validate.UInt64Rules
	13, // 9: buf.validate.FieldConstraints.sint32:type_name -> buf.validate.SInt32Rules
	14, // 10: buf.validate.FieldConstraints.sint64:type_name -> buf.validate.SInt64Rules
	15, // 11: buf.validate.FieldConstraints.fixed32:type_name -> buf.validate.Fixed32Rules
	16, // 12: buf.validate.FieldConstraints.fixed64:type_name -> buf.validate.Fixed64Rules
	17, // 13: buf.validate.FieldConstraints.sfixed32:type_name -> buf.validate.SFixed32Rules
	18, // 14: buf.validate.FieldConstraints.sfixed64:type_name -> buf.validate.SFixed64Rules
	19, // 15: buf.validate.FieldConstraints.bool:type_name -> buf.validate.BoolRules
	20, // 16: buf.validate.FieldConstraints.string:type_name -> buf.validate.StringRules
	21, // 17: buf.validate.FieldConstraints.bytes:type_name -> buf.validate.BytesRules
	22, // 18: buf.validate.FieldConstraints.enum:type_name -> buf.validate.EnumRules
	23, // 19: buf.validate.FieldConstraints.repeated:type_name -> buf.validate.RepeatedRules
	24, // 20: buf.validate.FieldConstraints.map:type_name -> buf.validate.MapRules
	25, // 21: buf.validate.FieldConstraints.any:type_name -> buf.validate.AnyRules
	26, // 22: buf.validate.FieldConstraints.duration:type_name -> buf.validate.DurationRules
	27, // 23: buf.validate.FieldConstraints.timestamp:type_name -> buf.validate.TimestampRules
	2,  // 24: buf.validate.PredefinedConstraints.cel:type_name -> buf.validate.Constraint
	1,  // 25: buf.validate.StringRules.well_known_regex:type_name -> buf.validate.KnownRegex
	5,  // 26: buf.validate.RepeatedRules.items:type_name -> buf.validate.FieldConstraints
	5,  // 27: buf.validate.MapRules.keys:type_name -> buf.validate.FieldConstraints
	5,  // 28: buf.validate.MapRules.values:type_name -> buf.validate.FieldConstraints
	32, // 29: buf.validate.DurationRules.const:type_name -> google.protobuf.Duration
	32, // 30: buf.validate.DurationRules.lt:type_name -> google.protobuf.Duration
	32, // 31: buf.validate.DurationRules.lte:type_name -> google.protobuf.Duration
	32, // 32: buf.validate.DurationRules.gt:type_name -> google.protobuf.Duration
	32, // 33: buf.validate.DurationRules.gte:type_name -> google.protobuf.Duration
	32, // 34: buf.validate.DurationRules.in:type_name -> google.protobuf.Duration
	32, // 35: buf.validate.DurationRules.not_in:type_name -> google.protobuf.Duration
	32, // 36: buf.validate.DurationRules.example:type_name -> google.protobuf.Duration
	33, // 37: buf.validate.TimestampRules.const:type_name -> google.protobuf.Timestamp
	33, // 38: buf.validate.TimestampRules.lt:type_name -> google.protobuf.Timestamp
	33, // 39: buf.validate.TimestampRules.lte:type_name -> google.protobuf.Timestamp
	33, // 40: buf.validate.TimestampRules.gt:type_name -> google.protobuf.Timestamp
	33, // 41: buf.validate.TimestampRules.gte:type_name -> google.protobuf.Timestamp
	32, // 42: buf.validate.TimestampRules.within:type_name -> google.protobuf.Duration
	33, // 43: buf.validate.TimestampRules.example:type_name -> google.protobuf.Timestamp
	29, // 44: buf.validate.Violations.violations:type_name -> buf.validate.Violation
	30, // 45: buf.validate.Violation.field:type_name -> buf.validate.FieldPath
	30, // 46: buf.validate.Violation.rule:type_name -> buf.validate.FieldPath
	31, // 47: buf.validate.FieldPath.elements:type_name -> buf.validate.FieldPathElement
	34, // 48: buf.validate.FieldPathElement.field_type:type_name -> google.protobuf.FieldDescriptorProto.Type
	34, // 49: buf.validate.FieldPathElement.key_type:type_name -> google.protobuf.FieldDescriptorProto.Type
	34, // 50: buf.validate.FieldPathElement.value_type:type_name -> google.protobuf.FieldDescriptorProto.Type
	35, // 51: buf.validate.message:extendee -> google.protobuf.MessageOptions
	36, // 52: buf.validate.oneof:extendee -> google.protobuf.OneofOptions
	37, // 53: buf.validate.field:extendee -> google.protobuf.FieldOptions
	37, // 54: buf.validate.predefined:extendee -> google.protobuf.FieldOptions
	3,  // 55: buf.validate.message:type_name -> buf.validate.MessageConstraints
	4,  // 56: buf.validate.oneof:type_name -> buf.validate.OneofConstraints
	5,  // 57: buf.validate.field:type_name -> buf.validate.FieldConstraints
	6,  // 58: buf.validate.predefined:type_name -> buf.validate.PredefinedConstraints
	59, // [59:59] is the sub-list for method output_type
	59, // [59:59] is the sub-list for method input_type
	55, // [55:59] is the sub-list for extension type_name
	51, // [51:55] is the sub-list for extension extendee
	0,  // [0:51] is the sub-list for field type_name
}

func init() { file_buf_validate_validate_proto_init() }
func file_buf_validate_validate_proto_init() {
	if File_buf_validate_validate_proto != nil {
		return
	}
	file_buf_validate_validate_proto_msgTypes[3].OneofWrappers = []any{
		(*FieldConstraints_Float)(nil),
		(*FieldConstraints_Double)(nil),
		(*FieldConstraints_Int32)(nil),
		(*FieldConstraints_Int64)(nil),
		(*FieldConstraints_Uint32)(nil),
		(*FieldConstraints_Uint64)(nil),
		(*FieldConstraints_Sint32)(nil),
		(*FieldConstraints_Sint64)(nil),
		(*FieldConstraints_Fixed32)(nil),
		(*FieldConstraints_Fixed64)(nil),
		(*FieldConstraints_Sfixed32)(nil),
		(*FieldConstraints_Sfixed64)(nil),
		(*FieldConstraints_Bool)(nil),
		(*FieldConstraints_String_)(nil),
		(*FieldConstraints_Bytes)(nil),
		(*FieldConstraints_Enum)(nil),
		(*FieldConstraints_Repeated)(nil),
		(*FieldConstraints_Map)(nil),
		(*FieldConstraints_Any)(nil),
		(*FieldConstraints_Duration)(nil),
		(*FieldConstraints_Timestamp)(nil),
	}
	file_buf_validate_validate_proto_msgTypes[5].OneofWrappers = []any{
		(*FloatRules_Lt)(nil),
		(*FloatRules_Lte)(nil),
		(*FloatRules_Gt)(nil),
		(*FloatRules_Gte)(nil),
	}
	file_buf_validate_validate_proto_msgTypes[6].OneofWrappers = []any{
		(*DoubleRules_Lt)(nil),
		(*DoubleRules_Lte)(nil),
		(*DoubleRules_Gt)(nil),
		(*DoubleRules_Gte)(nil),
	}
	file_buf_validate_validate_proto_msgTypes[7].OneofWrappers = []any{
		(*Int32Rules_Lt)(nil),
		(*Int32Rules_Lte)(nil),
		(*Int32Rules_Gt)(nil),
		(*Int32Rules_Gte)(nil),
	}
	file_buf_validate_validate_proto_msgTypes[8].OneofWrappers = []any{
		(*Int64Rules_Lt)(nil),
		(*Int64Rules_Lte)(nil),
		(*Int64Rules_Gt)(nil),
		(*Int64Rules_Gte)(nil),
	}
	file_buf_validate_validate_proto_msgTypes[9].OneofWrappers = []any{
		(*UInt32Rules_Lt)(nil),
		(*UInt32Rules_Lte)(nil),
		(*UInt32Rules_Gt)(nil),
		(*UInt32Rules_Gte)(nil),
	}
	file_buf_validate_validate_proto_msgTypes[10].OneofWrappers = []any{
		(*UInt64Rules_Lt)(nil),
		(*UInt64Rules_Lte)(nil),
		(*UInt64Rules_Gt)(nil),
		(*UInt64Rules_Gte)(nil),
	}
	file_buf_validate_validate_proto_msgTypes[11].OneofWrappers = []any{
		(*SInt32Rules_Lt)(nil),
		(*SInt32Rules_Lte)(nil),
		(*SInt32Rules_Gt)(nil),
		(*SInt32Rules_Gte)(nil),
	}
	file_buf_validate_validate_proto_msgTypes[12].OneofWrappers = []any{
		(*SInt64Rules_Lt)(nil),
		(*SInt64Rules_Lte)(nil),
		(*SInt64Rules_Gt)(nil),
		(*SInt64Rules_Gte)(nil),
	}
	file_buf_validate_validate_proto_msgTypes[13].OneofWrappers = []any{
		(*Fixed32Rules_Lt)(nil),
		(*Fixed32Rules_Lte)(nil),
		(*Fixed32Rules_Gt)(nil),
		(*Fixed32Rules_Gte)(nil),
	}
	file_buf_validate_validate_proto_msgTypes[14].OneofWrappers = []any{
		(*Fixed64Rules_Lt)(nil),
		(*Fixed64Rules_Lte)(nil),
		(*Fixed64Rules_Gt)(nil),
		(*Fixed64Rules_Gte)(nil),
	}
	file_buf_validate_validate_proto_msgTypes[15].OneofWrappers = []any{
		(*SFixed32Rules_Lt)(nil),
		(*SFixed32Rules_Lte)(nil),
		(*SFixed32Rules_Gt)(nil),
		(*SFixed32Rules_Gte)(nil),
	}
	file_buf_validate_validate_proto_msgTypes[16].OneofWrappers = []any{
		(*SFixed64Rules_Lt)(nil),
		(*SFixed64Rules_Lte)(nil),
		(*SFixed64Rules_Gt)(nil),
		(*SFixed64Rules_Gte)(nil),
	}
	file_buf_validate_validate_proto_msgTypes[18].OneofWrappers = []any{
		(*StringRules_Email)(nil),
		(*StringRules_Hostname)(nil),
		(*StringRules_Ip)(nil),
		(*StringRules_Ipv4)(nil),
		(*StringRules_Ipv6)(nil),
		(*StringRules_Uri)(nil),
		(*StringRules_UriRef)(nil),
		(*StringRules_Address)(nil),
		(*StringRules_Uuid)(nil),
		(*StringRules_Tuuid)(nil),
		(*StringRules_IpWithPrefixlen)(nil),
		(*StringRules_Ipv4WithPrefixlen)(nil),
		(*StringRules_Ipv6WithPrefixlen)(nil),
		(*StringRules_IpPrefix)(nil),
		(*StringRules_Ipv4Prefix)(nil),
		(*StringRules_Ipv6Prefix)(nil),
		(*StringRules_HostAndPort)(nil),
		(*StringRules_WellKnownRegex)(nil),
	}
	file_buf_validate_validate_proto_msgTypes[19].OneofWrappers = []any{
		(*BytesRules_Ip)(nil),
		(*BytesRules_Ipv4)(nil),
		(*BytesRules_Ipv6)(nil),
	}
	file_buf_validate_validate_proto_msgTypes[24].OneofWrappers = []any{
		(*DurationRules_Lt)(nil),
		(*DurationRules_Lte)(nil),
		(*DurationRules_Gt)(nil),
		(*DurationRules_Gte)(nil),
	}
	file_buf_validate_validate_proto_msgTypes[25].OneofWrappers = []any{
		(*TimestampRules_Lt)(nil),
		(*TimestampRules_Lte)(nil),
		(*TimestampRules_LtNow)(nil),
		(*TimestampRules_Gt)(nil),
		(*TimestampRules_Gte)(nil),
		(*TimestampRules_GtNow)(nil),
	}
	file_buf_validate_validate_proto_msgTypes[29].OneofWrappers = []any{
		(*FieldPathElement_Index)(nil),
		(*FieldPathElement_BoolKey)(nil),
		(*FieldPathElement_IntKey)(nil),
		(*FieldPathElement_UintKey)(nil),
		(*FieldPathElement_StringKey)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_buf_validate_validate_proto_rawDesc), len(file_buf_validate_validate_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   30,
			NumExtensions: 4,
			NumServices:   0,
		},
		GoTypes:           file_buf_validate_validate_proto_goTypes,
		DependencyIndexes: file_buf_validate_validate_proto_depIdxs,
		EnumInfos:         file_buf_validate_validate_proto_enumTypes,
		MessageInfos:      file_buf_validate_validate_proto_msgTypes,
		ExtensionInfos:    file_buf_validate_validate_proto_extTypes,
	}.Build()
	File_buf_validate_validate_proto = out.File
	file_buf_validate_validate_proto_goTypes = nil
	file_buf_validate_validate_proto_depIdxs = nil
}
