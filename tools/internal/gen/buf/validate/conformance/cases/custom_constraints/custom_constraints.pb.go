// Copyright 2023-2025 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        (unknown)
// source: buf/validate/conformance/cases/custom_constraints/custom_constraints.proto

package custom_constraints

import (
	_ "github.com/bufbuild/protovalidate/tools/internal/gen/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Enum int32

const (
	Enum_ENUM_UNSPECIFIED Enum = 0
	Enum_ENUM_ONE         Enum = 1
)

// Enum value maps for Enum.
var (
	Enum_name = map[int32]string{
		0: "ENUM_UNSPECIFIED",
		1: "ENUM_ONE",
	}
	Enum_value = map[string]int32{
		"ENUM_UNSPECIFIED": 0,
		"ENUM_ONE":         1,
	}
)

func (x Enum) Enum() *Enum {
	p := new(Enum)
	*p = x
	return p
}

func (x Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_enumTypes[0].Descriptor()
}

func (Enum) Type() protoreflect.EnumType {
	return &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_enumTypes[0]
}

func (x Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Enum.Descriptor instead.
func (Enum) EnumDescriptor() ([]byte, []int) {
	return file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_rawDescGZIP(), []int{0}
}

// A message that does not contain any expressions
type NoExpressions struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	A             int32                  `protobuf:"varint,1,opt,name=a,proto3" json:"a,omitempty"`
	B             Enum                   `protobuf:"varint,2,opt,name=b,proto3,enum=buf.validate.conformance.cases.custom_constraints.Enum" json:"b,omitempty"`
	C             *NoExpressions_Nested  `protobuf:"bytes,3,opt,name=c,proto3" json:"c,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NoExpressions) Reset() {
	*x = NoExpressions{}
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NoExpressions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoExpressions) ProtoMessage() {}

func (x *NoExpressions) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoExpressions.ProtoReflect.Descriptor instead.
func (*NoExpressions) Descriptor() ([]byte, []int) {
	return file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_rawDescGZIP(), []int{0}
}

func (x *NoExpressions) GetA() int32 {
	if x != nil {
		return x.A
	}
	return 0
}

func (x *NoExpressions) GetB() Enum {
	if x != nil {
		return x.B
	}
	return Enum_ENUM_UNSPECIFIED
}

func (x *NoExpressions) GetC() *NoExpressions_Nested {
	if x != nil {
		return x.C
	}
	return nil
}

// A message with message-level custom expressions
type MessageExpressions struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	A             int32                      `protobuf:"varint,1,opt,name=a,proto3" json:"a,omitempty"`
	B             int32                      `protobuf:"varint,2,opt,name=b,proto3" json:"b,omitempty"`
	C             Enum                       `protobuf:"varint,3,opt,name=c,proto3,enum=buf.validate.conformance.cases.custom_constraints.Enum" json:"c,omitempty"`
	D             Enum                       `protobuf:"varint,4,opt,name=d,proto3,enum=buf.validate.conformance.cases.custom_constraints.Enum" json:"d,omitempty"`
	E             *MessageExpressions_Nested `protobuf:"bytes,5,opt,name=e,proto3" json:"e,omitempty"`
	F             *MessageExpressions_Nested `protobuf:"bytes,6,opt,name=f,proto3" json:"f,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessageExpressions) Reset() {
	*x = MessageExpressions{}
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageExpressions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageExpressions) ProtoMessage() {}

func (x *MessageExpressions) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageExpressions.ProtoReflect.Descriptor instead.
func (*MessageExpressions) Descriptor() ([]byte, []int) {
	return file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_rawDescGZIP(), []int{1}
}

func (x *MessageExpressions) GetA() int32 {
	if x != nil {
		return x.A
	}
	return 0
}

func (x *MessageExpressions) GetB() int32 {
	if x != nil {
		return x.B
	}
	return 0
}

func (x *MessageExpressions) GetC() Enum {
	if x != nil {
		return x.C
	}
	return Enum_ENUM_UNSPECIFIED
}

func (x *MessageExpressions) GetD() Enum {
	if x != nil {
		return x.D
	}
	return Enum_ENUM_UNSPECIFIED
}

func (x *MessageExpressions) GetE() *MessageExpressions_Nested {
	if x != nil {
		return x.E
	}
	return nil
}

func (x *MessageExpressions) GetF() *MessageExpressions_Nested {
	if x != nil {
		return x.F
	}
	return nil
}

type MissingField struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	A             int32                  `protobuf:"varint,1,opt,name=a,proto3" json:"a,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MissingField) Reset() {
	*x = MissingField{}
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MissingField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MissingField) ProtoMessage() {}

func (x *MissingField) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MissingField.ProtoReflect.Descriptor instead.
func (*MissingField) Descriptor() ([]byte, []int) {
	return file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_rawDescGZIP(), []int{2}
}

func (x *MissingField) GetA() int32 {
	if x != nil {
		return x.A
	}
	return 0
}

type IncorrectType struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	A             int32                  `protobuf:"varint,1,opt,name=a,proto3" json:"a,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *IncorrectType) Reset() {
	*x = IncorrectType{}
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *IncorrectType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncorrectType) ProtoMessage() {}

func (x *IncorrectType) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncorrectType.ProtoReflect.Descriptor instead.
func (*IncorrectType) Descriptor() ([]byte, []int) {
	return file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_rawDescGZIP(), []int{3}
}

func (x *IncorrectType) GetA() int32 {
	if x != nil {
		return x.A
	}
	return 0
}

type DynRuntimeError struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	A             int32                  `protobuf:"varint,1,opt,name=a,proto3" json:"a,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DynRuntimeError) Reset() {
	*x = DynRuntimeError{}
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DynRuntimeError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynRuntimeError) ProtoMessage() {}

func (x *DynRuntimeError) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynRuntimeError.ProtoReflect.Descriptor instead.
func (*DynRuntimeError) Descriptor() ([]byte, []int) {
	return file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_rawDescGZIP(), []int{4}
}

func (x *DynRuntimeError) GetA() int32 {
	if x != nil {
		return x.A
	}
	return 0
}

type NowEqualsNow struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NowEqualsNow) Reset() {
	*x = NowEqualsNow{}
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NowEqualsNow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NowEqualsNow) ProtoMessage() {}

func (x *NowEqualsNow) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NowEqualsNow.ProtoReflect.Descriptor instead.
func (*NowEqualsNow) Descriptor() ([]byte, []int) {
	return file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_rawDescGZIP(), []int{5}
}

type FieldExpressionMultipleScalar struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Val           int32                  `protobuf:"varint,1,opt,name=val,proto3" json:"val,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FieldExpressionMultipleScalar) Reset() {
	*x = FieldExpressionMultipleScalar{}
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldExpressionMultipleScalar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldExpressionMultipleScalar) ProtoMessage() {}

func (x *FieldExpressionMultipleScalar) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldExpressionMultipleScalar.ProtoReflect.Descriptor instead.
func (*FieldExpressionMultipleScalar) Descriptor() ([]byte, []int) {
	return file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_rawDescGZIP(), []int{6}
}

func (x *FieldExpressionMultipleScalar) GetVal() int32 {
	if x != nil {
		return x.Val
	}
	return 0
}

type FieldExpressionNestedScalar struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Nested        *FieldExpressionScalar `protobuf:"bytes,1,opt,name=nested,proto3" json:"nested,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FieldExpressionNestedScalar) Reset() {
	*x = FieldExpressionNestedScalar{}
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldExpressionNestedScalar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldExpressionNestedScalar) ProtoMessage() {}

func (x *FieldExpressionNestedScalar) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldExpressionNestedScalar.ProtoReflect.Descriptor instead.
func (*FieldExpressionNestedScalar) Descriptor() ([]byte, []int) {
	return file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_rawDescGZIP(), []int{7}
}

func (x *FieldExpressionNestedScalar) GetNested() *FieldExpressionScalar {
	if x != nil {
		return x.Nested
	}
	return nil
}

type FieldExpressionOptionalScalar struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Val           *int32                 `protobuf:"varint,1,opt,name=val,proto3,oneof" json:"val,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FieldExpressionOptionalScalar) Reset() {
	*x = FieldExpressionOptionalScalar{}
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldExpressionOptionalScalar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldExpressionOptionalScalar) ProtoMessage() {}

func (x *FieldExpressionOptionalScalar) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldExpressionOptionalScalar.ProtoReflect.Descriptor instead.
func (*FieldExpressionOptionalScalar) Descriptor() ([]byte, []int) {
	return file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_rawDescGZIP(), []int{8}
}

func (x *FieldExpressionOptionalScalar) GetVal() int32 {
	if x != nil && x.Val != nil {
		return *x.Val
	}
	return 0
}

type FieldExpressionScalar struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Val           int32                  `protobuf:"varint,1,opt,name=val,proto3" json:"val,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FieldExpressionScalar) Reset() {
	*x = FieldExpressionScalar{}
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldExpressionScalar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldExpressionScalar) ProtoMessage() {}

func (x *FieldExpressionScalar) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldExpressionScalar.ProtoReflect.Descriptor instead.
func (*FieldExpressionScalar) Descriptor() ([]byte, []int) {
	return file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_rawDescGZIP(), []int{9}
}

func (x *FieldExpressionScalar) GetVal() int32 {
	if x != nil {
		return x.Val
	}
	return 0
}

type FieldExpressionEnum struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Val           Enum                   `protobuf:"varint,1,opt,name=val,proto3,enum=buf.validate.conformance.cases.custom_constraints.Enum" json:"val,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FieldExpressionEnum) Reset() {
	*x = FieldExpressionEnum{}
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldExpressionEnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldExpressionEnum) ProtoMessage() {}

func (x *FieldExpressionEnum) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldExpressionEnum.ProtoReflect.Descriptor instead.
func (*FieldExpressionEnum) Descriptor() ([]byte, []int) {
	return file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_rawDescGZIP(), []int{10}
}

func (x *FieldExpressionEnum) GetVal() Enum {
	if x != nil {
		return x.Val
	}
	return Enum_ENUM_UNSPECIFIED
}

type FieldExpressionMessage struct {
	state         protoimpl.MessageState      `protogen:"open.v1"`
	Val           *FieldExpressionMessage_Msg `protobuf:"bytes,1,opt,name=val,proto3" json:"val,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FieldExpressionMessage) Reset() {
	*x = FieldExpressionMessage{}
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldExpressionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldExpressionMessage) ProtoMessage() {}

func (x *FieldExpressionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldExpressionMessage.ProtoReflect.Descriptor instead.
func (*FieldExpressionMessage) Descriptor() ([]byte, []int) {
	return file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_rawDescGZIP(), []int{11}
}

func (x *FieldExpressionMessage) GetVal() *FieldExpressionMessage_Msg {
	if x != nil {
		return x.Val
	}
	return nil
}

type FieldExpressionMapScalar struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Val           map[int32]int32        `protobuf:"bytes,1,rep,name=val,proto3" json:"val,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FieldExpressionMapScalar) Reset() {
	*x = FieldExpressionMapScalar{}
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldExpressionMapScalar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldExpressionMapScalar) ProtoMessage() {}

func (x *FieldExpressionMapScalar) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldExpressionMapScalar.ProtoReflect.Descriptor instead.
func (*FieldExpressionMapScalar) Descriptor() ([]byte, []int) {
	return file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_rawDescGZIP(), []int{12}
}

func (x *FieldExpressionMapScalar) GetVal() map[int32]int32 {
	if x != nil {
		return x.Val
	}
	return nil
}

type FieldExpressionMapEnum struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Val           map[int32]Enum         `protobuf:"bytes,1,rep,name=val,proto3" json:"val,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=buf.validate.conformance.cases.custom_constraints.Enum"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FieldExpressionMapEnum) Reset() {
	*x = FieldExpressionMapEnum{}
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldExpressionMapEnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldExpressionMapEnum) ProtoMessage() {}

func (x *FieldExpressionMapEnum) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldExpressionMapEnum.ProtoReflect.Descriptor instead.
func (*FieldExpressionMapEnum) Descriptor() ([]byte, []int) {
	return file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_rawDescGZIP(), []int{13}
}

func (x *FieldExpressionMapEnum) GetVal() map[int32]Enum {
	if x != nil {
		return x.Val
	}
	return nil
}

type FieldExpressionMapMessage struct {
	state         protoimpl.MessageState                   `protogen:"open.v1"`
	Val           map[int32]*FieldExpressionMapMessage_Msg `protobuf:"bytes,1,rep,name=val,proto3" json:"val,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FieldExpressionMapMessage) Reset() {
	*x = FieldExpressionMapMessage{}
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldExpressionMapMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldExpressionMapMessage) ProtoMessage() {}

func (x *FieldExpressionMapMessage) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldExpressionMapMessage.ProtoReflect.Descriptor instead.
func (*FieldExpressionMapMessage) Descriptor() ([]byte, []int) {
	return file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_rawDescGZIP(), []int{14}
}

func (x *FieldExpressionMapMessage) GetVal() map[int32]*FieldExpressionMapMessage_Msg {
	if x != nil {
		return x.Val
	}
	return nil
}

type FieldExpressionMapKeys struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Val           map[int32]int32        `protobuf:"bytes,1,rep,name=val,proto3" json:"val,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FieldExpressionMapKeys) Reset() {
	*x = FieldExpressionMapKeys{}
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldExpressionMapKeys) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldExpressionMapKeys) ProtoMessage() {}

func (x *FieldExpressionMapKeys) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldExpressionMapKeys.ProtoReflect.Descriptor instead.
func (*FieldExpressionMapKeys) Descriptor() ([]byte, []int) {
	return file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_rawDescGZIP(), []int{15}
}

func (x *FieldExpressionMapKeys) GetVal() map[int32]int32 {
	if x != nil {
		return x.Val
	}
	return nil
}

type FieldExpressionMapScalarValues struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Val           map[int32]int32        `protobuf:"bytes,1,rep,name=val,proto3" json:"val,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FieldExpressionMapScalarValues) Reset() {
	*x = FieldExpressionMapScalarValues{}
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldExpressionMapScalarValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldExpressionMapScalarValues) ProtoMessage() {}

func (x *FieldExpressionMapScalarValues) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldExpressionMapScalarValues.ProtoReflect.Descriptor instead.
func (*FieldExpressionMapScalarValues) Descriptor() ([]byte, []int) {
	return file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_rawDescGZIP(), []int{16}
}

func (x *FieldExpressionMapScalarValues) GetVal() map[int32]int32 {
	if x != nil {
		return x.Val
	}
	return nil
}

type FieldExpressionMapEnumValues struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Val           map[int32]Enum         `protobuf:"bytes,1,rep,name=val,proto3" json:"val,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=buf.validate.conformance.cases.custom_constraints.Enum"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FieldExpressionMapEnumValues) Reset() {
	*x = FieldExpressionMapEnumValues{}
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldExpressionMapEnumValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldExpressionMapEnumValues) ProtoMessage() {}

func (x *FieldExpressionMapEnumValues) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldExpressionMapEnumValues.ProtoReflect.Descriptor instead.
func (*FieldExpressionMapEnumValues) Descriptor() ([]byte, []int) {
	return file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_rawDescGZIP(), []int{17}
}

func (x *FieldExpressionMapEnumValues) GetVal() map[int32]Enum {
	if x != nil {
		return x.Val
	}
	return nil
}

type FieldExpressionMapMessageValues struct {
	state         protoimpl.MessageState                         `protogen:"open.v1"`
	Val           map[int32]*FieldExpressionMapMessageValues_Msg `protobuf:"bytes,1,rep,name=val,proto3" json:"val,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FieldExpressionMapMessageValues) Reset() {
	*x = FieldExpressionMapMessageValues{}
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldExpressionMapMessageValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldExpressionMapMessageValues) ProtoMessage() {}

func (x *FieldExpressionMapMessageValues) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldExpressionMapMessageValues.ProtoReflect.Descriptor instead.
func (*FieldExpressionMapMessageValues) Descriptor() ([]byte, []int) {
	return file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_rawDescGZIP(), []int{18}
}

func (x *FieldExpressionMapMessageValues) GetVal() map[int32]*FieldExpressionMapMessageValues_Msg {
	if x != nil {
		return x.Val
	}
	return nil
}

type FieldExpressionRepeatedScalar struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Val           []int32                `protobuf:"varint,1,rep,packed,name=val,proto3" json:"val,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FieldExpressionRepeatedScalar) Reset() {
	*x = FieldExpressionRepeatedScalar{}
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldExpressionRepeatedScalar) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldExpressionRepeatedScalar) ProtoMessage() {}

func (x *FieldExpressionRepeatedScalar) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldExpressionRepeatedScalar.ProtoReflect.Descriptor instead.
func (*FieldExpressionRepeatedScalar) Descriptor() ([]byte, []int) {
	return file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_rawDescGZIP(), []int{19}
}

func (x *FieldExpressionRepeatedScalar) GetVal() []int32 {
	if x != nil {
		return x.Val
	}
	return nil
}

type FieldExpressionRepeatedEnum struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Val           []Enum                 `protobuf:"varint,1,rep,packed,name=val,proto3,enum=buf.validate.conformance.cases.custom_constraints.Enum" json:"val,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FieldExpressionRepeatedEnum) Reset() {
	*x = FieldExpressionRepeatedEnum{}
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldExpressionRepeatedEnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldExpressionRepeatedEnum) ProtoMessage() {}

func (x *FieldExpressionRepeatedEnum) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldExpressionRepeatedEnum.ProtoReflect.Descriptor instead.
func (*FieldExpressionRepeatedEnum) Descriptor() ([]byte, []int) {
	return file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_rawDescGZIP(), []int{20}
}

func (x *FieldExpressionRepeatedEnum) GetVal() []Enum {
	if x != nil {
		return x.Val
	}
	return nil
}

type FieldExpressionRepeatedMessage struct {
	state         protoimpl.MessageState                `protogen:"open.v1"`
	Val           []*FieldExpressionRepeatedMessage_Msg `protobuf:"bytes,1,rep,name=val,proto3" json:"val,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FieldExpressionRepeatedMessage) Reset() {
	*x = FieldExpressionRepeatedMessage{}
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldExpressionRepeatedMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldExpressionRepeatedMessage) ProtoMessage() {}

func (x *FieldExpressionRepeatedMessage) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldExpressionRepeatedMessage.ProtoReflect.Descriptor instead.
func (*FieldExpressionRepeatedMessage) Descriptor() ([]byte, []int) {
	return file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_rawDescGZIP(), []int{21}
}

func (x *FieldExpressionRepeatedMessage) GetVal() []*FieldExpressionRepeatedMessage_Msg {
	if x != nil {
		return x.Val
	}
	return nil
}

type FieldExpressionRepeatedScalarItems struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Val           []int32                `protobuf:"varint,1,rep,packed,name=val,proto3" json:"val,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FieldExpressionRepeatedScalarItems) Reset() {
	*x = FieldExpressionRepeatedScalarItems{}
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldExpressionRepeatedScalarItems) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldExpressionRepeatedScalarItems) ProtoMessage() {}

func (x *FieldExpressionRepeatedScalarItems) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldExpressionRepeatedScalarItems.ProtoReflect.Descriptor instead.
func (*FieldExpressionRepeatedScalarItems) Descriptor() ([]byte, []int) {
	return file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_rawDescGZIP(), []int{22}
}

func (x *FieldExpressionRepeatedScalarItems) GetVal() []int32 {
	if x != nil {
		return x.Val
	}
	return nil
}

type FieldExpressionRepeatedEnumItems struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Val           []Enum                 `protobuf:"varint,1,rep,packed,name=val,proto3,enum=buf.validate.conformance.cases.custom_constraints.Enum" json:"val,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FieldExpressionRepeatedEnumItems) Reset() {
	*x = FieldExpressionRepeatedEnumItems{}
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldExpressionRepeatedEnumItems) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldExpressionRepeatedEnumItems) ProtoMessage() {}

func (x *FieldExpressionRepeatedEnumItems) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldExpressionRepeatedEnumItems.ProtoReflect.Descriptor instead.
func (*FieldExpressionRepeatedEnumItems) Descriptor() ([]byte, []int) {
	return file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_rawDescGZIP(), []int{23}
}

func (x *FieldExpressionRepeatedEnumItems) GetVal() []Enum {
	if x != nil {
		return x.Val
	}
	return nil
}

type FieldExpressionRepeatedMessageItems struct {
	state         protoimpl.MessageState                     `protogen:"open.v1"`
	Val           []*FieldExpressionRepeatedMessageItems_Msg `protobuf:"bytes,1,rep,name=val,proto3" json:"val,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FieldExpressionRepeatedMessageItems) Reset() {
	*x = FieldExpressionRepeatedMessageItems{}
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldExpressionRepeatedMessageItems) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldExpressionRepeatedMessageItems) ProtoMessage() {}

func (x *FieldExpressionRepeatedMessageItems) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldExpressionRepeatedMessageItems.ProtoReflect.Descriptor instead.
func (*FieldExpressionRepeatedMessageItems) Descriptor() ([]byte, []int) {
	return file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_rawDescGZIP(), []int{24}
}

func (x *FieldExpressionRepeatedMessageItems) GetVal() []*FieldExpressionRepeatedMessageItems_Msg {
	if x != nil {
		return x.Val
	}
	return nil
}

type NoExpressions_Nested struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NoExpressions_Nested) Reset() {
	*x = NoExpressions_Nested{}
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NoExpressions_Nested) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoExpressions_Nested) ProtoMessage() {}

func (x *NoExpressions_Nested) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoExpressions_Nested.ProtoReflect.Descriptor instead.
func (*NoExpressions_Nested) Descriptor() ([]byte, []int) {
	return file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_rawDescGZIP(), []int{0, 0}
}

type MessageExpressions_Nested struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	A             int32                  `protobuf:"varint,1,opt,name=a,proto3" json:"a,omitempty"`
	B             int32                  `protobuf:"varint,2,opt,name=b,proto3" json:"b,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessageExpressions_Nested) Reset() {
	*x = MessageExpressions_Nested{}
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageExpressions_Nested) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageExpressions_Nested) ProtoMessage() {}

func (x *MessageExpressions_Nested) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageExpressions_Nested.ProtoReflect.Descriptor instead.
func (*MessageExpressions_Nested) Descriptor() ([]byte, []int) {
	return file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_rawDescGZIP(), []int{1, 0}
}

func (x *MessageExpressions_Nested) GetA() int32 {
	if x != nil {
		return x.A
	}
	return 0
}

func (x *MessageExpressions_Nested) GetB() int32 {
	if x != nil {
		return x.B
	}
	return 0
}

type FieldExpressionMessage_Msg struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	A             int32                  `protobuf:"varint,1,opt,name=a,proto3" json:"a,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FieldExpressionMessage_Msg) Reset() {
	*x = FieldExpressionMessage_Msg{}
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldExpressionMessage_Msg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldExpressionMessage_Msg) ProtoMessage() {}

func (x *FieldExpressionMessage_Msg) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldExpressionMessage_Msg.ProtoReflect.Descriptor instead.
func (*FieldExpressionMessage_Msg) Descriptor() ([]byte, []int) {
	return file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_rawDescGZIP(), []int{11, 0}
}

func (x *FieldExpressionMessage_Msg) GetA() int32 {
	if x != nil {
		return x.A
	}
	return 0
}

type FieldExpressionMapMessage_Msg struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	A             int32                  `protobuf:"varint,1,opt,name=a,proto3" json:"a,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FieldExpressionMapMessage_Msg) Reset() {
	*x = FieldExpressionMapMessage_Msg{}
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldExpressionMapMessage_Msg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldExpressionMapMessage_Msg) ProtoMessage() {}

func (x *FieldExpressionMapMessage_Msg) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldExpressionMapMessage_Msg.ProtoReflect.Descriptor instead.
func (*FieldExpressionMapMessage_Msg) Descriptor() ([]byte, []int) {
	return file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_rawDescGZIP(), []int{14, 1}
}

func (x *FieldExpressionMapMessage_Msg) GetA() int32 {
	if x != nil {
		return x.A
	}
	return 0
}

type FieldExpressionMapMessageValues_Msg struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	A             int32                  `protobuf:"varint,1,opt,name=a,proto3" json:"a,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FieldExpressionMapMessageValues_Msg) Reset() {
	*x = FieldExpressionMapMessageValues_Msg{}
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[36]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldExpressionMapMessageValues_Msg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldExpressionMapMessageValues_Msg) ProtoMessage() {}

func (x *FieldExpressionMapMessageValues_Msg) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[36]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldExpressionMapMessageValues_Msg.ProtoReflect.Descriptor instead.
func (*FieldExpressionMapMessageValues_Msg) Descriptor() ([]byte, []int) {
	return file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_rawDescGZIP(), []int{18, 1}
}

func (x *FieldExpressionMapMessageValues_Msg) GetA() int32 {
	if x != nil {
		return x.A
	}
	return 0
}

type FieldExpressionRepeatedMessage_Msg struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	A             int32                  `protobuf:"varint,1,opt,name=a,proto3" json:"a,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FieldExpressionRepeatedMessage_Msg) Reset() {
	*x = FieldExpressionRepeatedMessage_Msg{}
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[37]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldExpressionRepeatedMessage_Msg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldExpressionRepeatedMessage_Msg) ProtoMessage() {}

func (x *FieldExpressionRepeatedMessage_Msg) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[37]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldExpressionRepeatedMessage_Msg.ProtoReflect.Descriptor instead.
func (*FieldExpressionRepeatedMessage_Msg) Descriptor() ([]byte, []int) {
	return file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_rawDescGZIP(), []int{21, 0}
}

func (x *FieldExpressionRepeatedMessage_Msg) GetA() int32 {
	if x != nil {
		return x.A
	}
	return 0
}

type FieldExpressionRepeatedMessageItems_Msg struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	A             int32                  `protobuf:"varint,1,opt,name=a,proto3" json:"a,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FieldExpressionRepeatedMessageItems_Msg) Reset() {
	*x = FieldExpressionRepeatedMessageItems_Msg{}
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[38]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FieldExpressionRepeatedMessageItems_Msg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldExpressionRepeatedMessageItems_Msg) ProtoMessage() {}

func (x *FieldExpressionRepeatedMessageItems_Msg) ProtoReflect() protoreflect.Message {
	mi := &file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[38]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldExpressionRepeatedMessageItems_Msg.ProtoReflect.Descriptor instead.
func (*FieldExpressionRepeatedMessageItems_Msg) Descriptor() ([]byte, []int) {
	return file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_rawDescGZIP(), []int{24, 0}
}

func (x *FieldExpressionRepeatedMessageItems_Msg) GetA() int32 {
	if x != nil {
		return x.A
	}
	return 0
}

var File_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto protoreflect.FileDescriptor

var file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_rawDesc = string([]byte{
	0x0a, 0x4a, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x63,
	0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x63, 0x61, 0x73, 0x65, 0x73,
	0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x73, 0x2f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x31, 0x62, 0x75,
	0x66, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x1a,
	0x1b, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc5, 0x01, 0x0a,
	0x0d, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0c,
	0x0a, 0x01, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x61, 0x12, 0x45, 0x0a, 0x01,
	0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x52, 0x01, 0x62, 0x12, 0x55, 0x0a, 0x01, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47,
	0x2e, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x73, 0x2e, 0x4e, 0x6f, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x01, 0x63, 0x1a, 0x08, 0x0a, 0x06, 0x4e, 0x65,
	0x73, 0x74, 0x65, 0x64, 0x22, 0xc3, 0x05, 0x0a, 0x12, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x61,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x61, 0x12, 0x0c, 0x0a, 0x01, 0x62, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x62, 0x12, 0x45, 0x0a, 0x01, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x37, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x63, 0x61,
	0x73, 0x65, 0x73, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x01, 0x63, 0x12, 0x45,
	0x0a, 0x01, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x62, 0x75, 0x66, 0x2e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x01, 0x64, 0x12, 0x5a, 0x0a, 0x01, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x4c, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x63, 0x61, 0x73, 0x65,
	0x73, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x73, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x01,
	0x65, 0x12, 0x5a, 0x0a, 0x01, 0x66, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4c, 0x2e, 0x62,
	0x75, 0x66, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x01, 0x66, 0x1a, 0x78, 0x0a,
	0x06, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x01, 0x61, 0x12, 0x0c, 0x0a, 0x01, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x01, 0x62, 0x3a, 0x52, 0xba, 0x48, 0x4f, 0x1a, 0x4d, 0x0a, 0x19, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x1a, 0x30, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x61, 0x20, 0x3e, 0x20,
	0x74, 0x68, 0x69, 0x73, 0x2e, 0x62, 0x20, 0x3f, 0x20, 0x27, 0x27, 0x3a, 0x20, 0x27, 0x61, 0x20,
	0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x20,
	0x74, 0x68, 0x61, 0x6e, 0x20, 0x62, 0x27, 0x3a, 0xd0, 0x01, 0xba, 0x48, 0xcc, 0x01, 0x1a, 0x43,
	0x0a, 0x19, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x12, 0x15, 0x61, 0x20, 0x6d,
	0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x6c, 0x65, 0x73, 0x73, 0x20, 0x74, 0x68, 0x61, 0x6e,
	0x20, 0x62, 0x1a, 0x0f, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x61, 0x20, 0x3c, 0x20, 0x74, 0x68, 0x69,
	0x73, 0x2e, 0x62, 0x1a, 0x3f, 0x0a, 0x17, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x12, 0x12,
	0x63, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x65, 0x71, 0x75, 0x61, 0x6c,
	0x20, 0x64, 0x1a, 0x10, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x63, 0x20, 0x21, 0x3d, 0x20, 0x74, 0x68,
	0x69, 0x73, 0x2e, 0x64, 0x1a, 0x44, 0x0a, 0x18, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64,
	0x12, 0x12, 0x65, 0x2e, 0x61, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x65, 0x71, 0x75, 0x61, 0x6c,
	0x20, 0x66, 0x2e, 0x61, 0x1a, 0x14, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x65, 0x2e, 0x61, 0x20, 0x3d,
	0x3d, 0x20, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x66, 0x2e, 0x61, 0x22, 0x52, 0x0a, 0x0c, 0x4d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x61, 0x3a, 0x34, 0xba, 0x48, 0x31, 0x1a, 0x2f, 0x0a,
	0x0d, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x12,
	0x62, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x62, 0x65, 0x20, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x1a, 0x0a, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x62, 0x20, 0x3e, 0x20, 0x30, 0x22, 0x67,
	0x0a, 0x0d, 0x49, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0c, 0x0a, 0x01, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x61, 0x3a, 0x48, 0xba,
	0x48, 0x45, 0x1a, 0x43, 0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x61, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x27, 0x66, 0x6f, 0x6f, 0x27, 0x1a, 0x18, 0x74,
	0x68, 0x69, 0x73, 0x2e, 0x61, 0x2e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x73, 0x57, 0x69, 0x74, 0x68,
	0x28, 0x27, 0x66, 0x6f, 0x6f, 0x27, 0x29, 0x22, 0x7d, 0x0a, 0x0f, 0x44, 0x79, 0x6e, 0x52, 0x75,
	0x6e, 0x74, 0x69, 0x6d, 0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x0c, 0x0a, 0x01, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x61, 0x3a, 0x5c, 0xba, 0x48, 0x59, 0x1a, 0x57, 0x0a,
	0x0f, 0x64, 0x79, 0x6e, 0x5f, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x65, 0x72, 0x72,
	0x12, 0x2e, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x75, 0x73, 0x65, 0x20, 0x61, 0x20, 0x6e, 0x6f,
	0x6e, 0x2d, 0x65, 0x78, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x1a, 0x14, 0x64, 0x79, 0x6e, 0x28, 0x74, 0x68, 0x69, 0x73, 0x29, 0x2e, 0x62, 0x20, 0x3d, 0x3d,
	0x20, 0x27, 0x66, 0x6f, 0x6f, 0x27, 0x22, 0x5c, 0x0a, 0x0c, 0x4e, 0x6f, 0x77, 0x45, 0x71, 0x75,
	0x61, 0x6c, 0x73, 0x4e, 0x6f, 0x77, 0x3a, 0x4c, 0xba, 0x48, 0x49, 0x1a, 0x47, 0x0a, 0x0e, 0x6e,
	0x6f, 0x77, 0x5f, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x73, 0x5f, 0x6e, 0x6f, 0x77, 0x12, 0x29, 0x6e,
	0x6f, 0x77, 0x20, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x20,
	0x6e, 0x6f, 0x77, 0x20, 0x77, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x20, 0x61, 0x6e, 0x20, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x1a, 0x0a, 0x6e, 0x6f, 0x77, 0x20, 0x3d, 0x3d,
	0x20, 0x6e, 0x6f, 0x77, 0x22, 0xdf, 0x02, 0x0a, 0x1d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65,
	0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x12, 0xbd, 0x02, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x42, 0xaa, 0x02, 0xba, 0x48, 0xa6, 0x02, 0xba, 0x01, 0x5f, 0x0a, 0x22,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72,
	0x2e, 0x31, 0x12, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61,
	0x72, 0x2e, 0x31, 0x1a, 0x08, 0x74, 0x68, 0x69, 0x73, 0x20, 0x3e, 0x20, 0x30, 0xba, 0x01, 0x5f,
	0x0a, 0x22, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2e, 0x73, 0x63, 0x61, 0x6c,
	0x61, 0x72, 0x2e, 0x32, 0x12, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2e, 0x73, 0x63, 0x61,
	0x6c, 0x61, 0x72, 0x2e, 0x32, 0x1a, 0x08, 0x74, 0x68, 0x69, 0x73, 0x20, 0x3e, 0x20, 0x31, 0xba,
	0x01, 0x5f, 0x0a, 0x22, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2e, 0x73, 0x63,
	0x61, 0x6c, 0x61, 0x72, 0x2e, 0x33, 0x12, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x20, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x2e, 0x73,
	0x63, 0x61, 0x6c, 0x61, 0x72, 0x2e, 0x33, 0x1a, 0x08, 0x74, 0x68, 0x69, 0x73, 0x20, 0x3e, 0x20,
	0x32, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x22, 0x7f, 0x0a, 0x1b, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x53,
	0x63, 0x61, 0x6c, 0x61, 0x72, 0x12, 0x60, 0x0a, 0x06, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65,
	0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x52,
	0x06, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x22, 0xa2, 0x01, 0x0a, 0x1d, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x12, 0x79, 0x0a, 0x03, 0x76, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x62, 0xba, 0x48, 0x5f, 0xba, 0x01, 0x5c, 0x0a, 0x20,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72,
	0x12, 0x2d, 0x74, 0x65, 0x73, 0x74, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x1a,
	0x09, 0x74, 0x68, 0x69, 0x73, 0x20, 0x3d, 0x3d, 0x20, 0x31, 0x48, 0x00, 0x52, 0x03, 0x76, 0x61,
	0x6c, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x76, 0x61, 0x6c, 0x22, 0x7b, 0x0a, 0x15,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53,
	0x63, 0x61, 0x6c, 0x61, 0x72, 0x12, 0x62, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x42, 0x50, 0xba, 0x48, 0x4d, 0xba, 0x01, 0x4a, 0x0a, 0x17, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x61,
	0x6c, 0x61, 0x72, 0x12, 0x24, 0x74, 0x65, 0x73, 0x74, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x1a, 0x09, 0x74, 0x68, 0x69, 0x73, 0x20,
	0x3d, 0x3d, 0x20, 0x31, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x22, 0xaf, 0x01, 0x0a, 0x13, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75,
	0x6d, 0x12, 0x97, 0x01, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x37, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x4c, 0xba, 0x48, 0x49, 0xba, 0x01, 0x46,
	0x0a, 0x15, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x12, 0x22, 0x74, 0x65, 0x73, 0x74, 0x20, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x1a, 0x09, 0x74, 0x68, 0x69,
	0x73, 0x20, 0x3d, 0x3d, 0x20, 0x31, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x22, 0xe5, 0x01, 0x0a, 0x16,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0xb5, 0x01, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x4d, 0x73, 0x67, 0x42, 0x54, 0xba, 0x48, 0x51, 0xba, 0x01, 0x4e, 0x0a, 0x18, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x25, 0x74, 0x65, 0x73, 0x74, 0x20, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0b, 0x74, 0x68,
	0x69, 0x73, 0x2e, 0x61, 0x20, 0x3d, 0x3d, 0x20, 0x31, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x1a, 0x13,
	0x0a, 0x03, 0x4d, 0x73, 0x67, 0x12, 0x0c, 0x0a, 0x01, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x01, 0x61, 0x22, 0xa5, 0x02, 0x0a, 0x18, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72,
	0x12, 0xd0, 0x01, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x54,
	0x2e, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x73, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x2e, 0x56, 0x61, 0x6c, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x68, 0xba, 0x48, 0x65, 0xba, 0x01, 0x62, 0x0a, 0x1b, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x6d,
	0x61, 0x70, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x12, 0x28, 0x74, 0x65, 0x73, 0x74, 0x20,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x70, 0x2e, 0x73, 0x63, 0x61,
	0x6c, 0x61, 0x72, 0x1a, 0x19, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x6c, 0x28, 0x6b, 0x2c,
	0x20, 0x74, 0x68, 0x69, 0x73, 0x5b, 0x6b, 0x5d, 0x20, 0x3d, 0x3d, 0x20, 0x31, 0x29, 0x52, 0x03,
	0x76, 0x61, 0x6c, 0x1a, 0x36, 0x0a, 0x08, 0x56, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd6, 0x02, 0x0a, 0x16,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0xca, 0x01, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x75, 0x6d, 0x2e,
	0x56, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x64, 0xba, 0x48, 0x61, 0xba, 0x01, 0x5e,
	0x0a, 0x19, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x70, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x12, 0x26, 0x74, 0x65, 0x73,
	0x74, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x70, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x1a, 0x19, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x6c, 0x28, 0x6b, 0x2c,
	0x20, 0x74, 0x68, 0x69, 0x73, 0x5b, 0x6b, 0x5d, 0x20, 0x3d, 0x3d, 0x20, 0x31, 0x29, 0x52, 0x03,
	0x76, 0x61, 0x6c, 0x1a, 0x6f, 0x0a, 0x08, 0x56, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x4d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x37, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x63, 0x61, 0x73, 0x65,
	0x73, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x93, 0x03, 0x0a, 0x19, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0xd5, 0x01, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x55, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x63, 0x61, 0x73, 0x65,
	0x73, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x73, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x56,
	0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x6c, 0xba, 0x48, 0x69, 0xba, 0x01, 0x66, 0x0a,
	0x1c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x6d, 0x61, 0x70, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x29, 0x74,
	0x65, 0x73, 0x74, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x70,
	0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1b, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x61,
	0x6c, 0x6c, 0x28, 0x6b, 0x2c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x5b, 0x6b, 0x5d, 0x2e, 0x61, 0x20,
	0x3d, 0x3d, 0x20, 0x31, 0x29, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x1a, 0x88, 0x01, 0x0a, 0x08, 0x56,
	0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x66, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x50, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x73, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x13, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x12, 0x0c, 0x0a, 0x01,
	0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x61, 0x22, 0x9f, 0x02, 0x0a, 0x16, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61,
	0x70, 0x4b, 0x65, 0x79, 0x73, 0x12, 0xcc, 0x01, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x52, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x63,
	0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x4b, 0x65, 0x79, 0x73, 0x2e, 0x56,
	0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x66, 0xba, 0x48, 0x63, 0x9a, 0x01, 0x60, 0x22,
	0x5e, 0xba, 0x01, 0x5b, 0x0a, 0x19, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x70, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x12,
	0x26, 0x74, 0x65, 0x73, 0x74, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x6d,
	0x61, 0x70, 0x2e, 0x6b, 0x65, 0x79, 0x73, 0x1a, 0x16, 0x74, 0x68, 0x69, 0x73, 0x20, 0x3d, 0x3d,
	0x20, 0x34, 0x20, 0x7c, 0x7c, 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x3d, 0x3d, 0x20, 0x38, 0x52,
	0x03, 0x76, 0x61, 0x6c, 0x1a, 0x36, 0x0a, 0x08, 0x56, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb4, 0x02, 0x0a,
	0x1e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4d, 0x61, 0x70, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0xd9, 0x01, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5a, 0x2e,
	0x62, 0x75, 0x66, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x73, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4d, 0x61, 0x70, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x2e, 0x56, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x6b, 0xba, 0x48, 0x68, 0x9a, 0x01,
	0x65, 0x2a, 0x63, 0xba, 0x01, 0x60, 0x0a, 0x22, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x65, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x70, 0x2e, 0x73, 0x63, 0x61,
	0x6c, 0x61, 0x72, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2f, 0x74, 0x65, 0x73, 0x74,
	0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x70, 0x2e, 0x73, 0x63,
	0x61, 0x6c, 0x61, 0x72, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x09, 0x74, 0x68, 0x69,
	0x73, 0x20, 0x3d, 0x3d, 0x20, 0x31, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x1a, 0x36, 0x0a, 0x08, 0x56,
	0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xe5, 0x02, 0x0a, 0x1c, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x12, 0xd3, 0x01, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x58, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x63, 0x61,
	0x73, 0x65, 0x73, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x67, 0xba, 0x48,
	0x64, 0x9a, 0x01, 0x61, 0x2a, 0x5f, 0xba, 0x01, 0x5c, 0x0a, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x70, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2d, 0x74, 0x65, 0x73,
	0x74, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x70, 0x2e, 0x65,
	0x6e, 0x75, 0x6d, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x09, 0x74, 0x68, 0x69, 0x73,
	0x20, 0x3d, 0x3d, 0x20, 0x31, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x1a, 0x6f, 0x0a, 0x08, 0x56, 0x61,
	0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x4d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e,
	0x63, 0x65, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa8, 0x03, 0x0a, 0x1f,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4d,
	0x61, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0xde, 0x01, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5b, 0x2e,
	0x62, 0x75, 0x66, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x73, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4d, 0x61, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x2e, 0x56, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x6f, 0xba, 0x48, 0x6c, 0x9a,
	0x01, 0x69, 0x2a, 0x67, 0xba, 0x01, 0x64, 0x0a, 0x23, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x70, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x30, 0x74, 0x65,
	0x73, 0x74, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x6d, 0x61, 0x70, 0x2e,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x0b,
	0x74, 0x68, 0x69, 0x73, 0x2e, 0x61, 0x20, 0x3d, 0x3d, 0x20, 0x31, 0x52, 0x03, 0x76, 0x61, 0x6c,
	0x1a, 0x8e, 0x01, 0x0a, 0x08, 0x56, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x6c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x56,
	0x2e, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x73, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x2e, 0x4d, 0x73, 0x67, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x13, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x12, 0x0c, 0x0a, 0x01, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x01, 0x61, 0x22, 0x9f, 0x01, 0x0a, 0x1d, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x12, 0x7e, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x05, 0x42, 0x6c, 0xba, 0x48, 0x69, 0xba, 0x01, 0x66, 0x0a, 0x20, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x12,
	0x2d, 0x74, 0x65, 0x73, 0x74, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x72,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x1a, 0x13,
	0x74, 0x68, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x6c, 0x28, 0x65, 0x2c, 0x20, 0x65, 0x20, 0x3d, 0x3d,
	0x20, 0x31, 0x29, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x22, 0xd3, 0x01, 0x0a, 0x1b, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0xb3, 0x01, 0x0a, 0x03, 0x76, 0x61, 0x6c,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63,
	0x65, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x42,
	0x68, 0xba, 0x48, 0x65, 0xba, 0x01, 0x62, 0x0a, 0x1e, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x12, 0x2b, 0x74, 0x65, 0x73, 0x74, 0x20, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x2e,
	0x65, 0x6e, 0x75, 0x6d, 0x1a, 0x13, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x6c, 0x28, 0x65,
	0x2c, 0x20, 0x65, 0x20, 0x3d, 0x3d, 0x20, 0x31, 0x29, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x22, 0x91,
	0x02, 0x0a, 0x1e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0xd9, 0x01, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x55, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73,
	0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x73, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x4d, 0x73, 0x67, 0x42, 0x70, 0xba, 0x48, 0x6d, 0xba, 0x01, 0x6a, 0x0a, 0x21,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x1a, 0x15, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x61, 0x6c, 0x6c, 0x28, 0x65, 0x2c, 0x20, 0x65,
	0x2e, 0x61, 0x20, 0x3d, 0x3d, 0x20, 0x31, 0x29, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x1a, 0x13, 0x0a,
	0x03, 0x4d, 0x73, 0x67, 0x12, 0x0c, 0x0a, 0x01, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x01, 0x61, 0x22, 0xac, 0x01, 0x0a, 0x22, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x63,
	0x61, 0x6c, 0x61, 0x72, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x85, 0x01, 0x0a, 0x03, 0x76, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x42, 0x73, 0xba, 0x48, 0x70, 0x92, 0x01, 0x6d, 0x22,
	0x6b, 0xba, 0x01, 0x68, 0x0a, 0x26, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x2e,
	0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x33, 0x74, 0x65,
	0x73, 0x74, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x2e, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x2e, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x1a, 0x09, 0x74, 0x68, 0x69, 0x73, 0x20, 0x3d, 0x3d, 0x20, 0x31, 0x52, 0x03, 0x76, 0x61,
	0x6c, 0x22, 0xdf, 0x01, 0x0a, 0x20, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x75,
	0x6d, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0xba, 0x01, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e,
	0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x42, 0x6f, 0xba,
	0x48, 0x6c, 0x92, 0x01, 0x69, 0x22, 0x67, 0xba, 0x01, 0x64, 0x0a, 0x24, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x12, 0x31, 0x74, 0x65, 0x73, 0x74, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e,
	0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x2e, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x1a, 0x09, 0x74, 0x68, 0x69, 0x73, 0x20, 0x3d, 0x3d, 0x20, 0x31, 0x52, 0x03,
	0x76, 0x61, 0x6c, 0x22, 0xa2, 0x02, 0x0a, 0x23, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0xe5, 0x01, 0x0a, 0x03,
	0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x5a, 0x2e, 0x62, 0x75, 0x66, 0x2e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x6e, 0x63, 0x65, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x73, 0x2e, 0x4d, 0x73, 0x67, 0x42, 0x77, 0xba, 0x48, 0x74, 0x92, 0x01, 0x71, 0x22, 0x6f, 0xba,
	0x01, 0x6c, 0x0a, 0x27, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x34, 0x74, 0x65, 0x73,
	0x74, 0x20, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x72, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x69, 0x74, 0x65, 0x6d,
	0x73, 0x1a, 0x0b, 0x74, 0x68, 0x69, 0x73, 0x2e, 0x61, 0x20, 0x3d, 0x3d, 0x20, 0x31, 0x52, 0x03,
	0x76, 0x61, 0x6c, 0x1a, 0x13, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x12, 0x0c, 0x0a, 0x01, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x61, 0x2a, 0x2a, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x4f,
	0x4e, 0x45, 0x10, 0x01, 0x42, 0x9d, 0x03, 0x0a, 0x35, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x75, 0x66,
	0x2e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2e, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x63, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x42, 0x16,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x66, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x75, 0x66, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x74, 0x6f, 0x6f, 0x6c,
	0x73, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x62,
	0x75, 0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x63, 0x6f, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x2f, 0x63, 0x61, 0x73, 0x65, 0x73, 0x2f, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73,
	0xa2, 0x02, 0x05, 0x42, 0x56, 0x43, 0x43, 0x43, 0xaa, 0x02, 0x30, 0x42, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x6e, 0x63, 0x65, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x73, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0xca, 0x02, 0x30, 0x42, 0x75,
	0x66, 0x5c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5c, 0x43, 0x6f, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5c, 0x43, 0x61, 0x73, 0x65, 0x73, 0x5c, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0xe2, 0x02,
	0x3c, 0x42, 0x75, 0x66, 0x5c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x5c, 0x43, 0x6f,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x5c, 0x43, 0x61, 0x73, 0x65, 0x73, 0x5c,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x73, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x34,
	0x42, 0x75, 0x66, 0x3a, 0x3a, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x3a, 0x3a, 0x43,
	0x6f, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x6e, 0x63, 0x65, 0x3a, 0x3a, 0x43, 0x61, 0x73, 0x65,
	0x73, 0x3a, 0x3a, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_rawDescOnce sync.Once
	file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_rawDescData []byte
)

func file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_rawDescGZIP() []byte {
	file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_rawDescOnce.Do(func() {
		file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_rawDesc), len(file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_rawDesc)))
	})
	return file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_rawDescData
}

var file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes = make([]protoimpl.MessageInfo, 39)
var file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_goTypes = []any{
	(Enum)(0),                                       // 0: buf.validate.conformance.cases.custom_constraints.Enum
	(*NoExpressions)(nil),                           // 1: buf.validate.conformance.cases.custom_constraints.NoExpressions
	(*MessageExpressions)(nil),                      // 2: buf.validate.conformance.cases.custom_constraints.MessageExpressions
	(*MissingField)(nil),                            // 3: buf.validate.conformance.cases.custom_constraints.MissingField
	(*IncorrectType)(nil),                           // 4: buf.validate.conformance.cases.custom_constraints.IncorrectType
	(*DynRuntimeError)(nil),                         // 5: buf.validate.conformance.cases.custom_constraints.DynRuntimeError
	(*NowEqualsNow)(nil),                            // 6: buf.validate.conformance.cases.custom_constraints.NowEqualsNow
	(*FieldExpressionMultipleScalar)(nil),           // 7: buf.validate.conformance.cases.custom_constraints.FieldExpressionMultipleScalar
	(*FieldExpressionNestedScalar)(nil),             // 8: buf.validate.conformance.cases.custom_constraints.FieldExpressionNestedScalar
	(*FieldExpressionOptionalScalar)(nil),           // 9: buf.validate.conformance.cases.custom_constraints.FieldExpressionOptionalScalar
	(*FieldExpressionScalar)(nil),                   // 10: buf.validate.conformance.cases.custom_constraints.FieldExpressionScalar
	(*FieldExpressionEnum)(nil),                     // 11: buf.validate.conformance.cases.custom_constraints.FieldExpressionEnum
	(*FieldExpressionMessage)(nil),                  // 12: buf.validate.conformance.cases.custom_constraints.FieldExpressionMessage
	(*FieldExpressionMapScalar)(nil),                // 13: buf.validate.conformance.cases.custom_constraints.FieldExpressionMapScalar
	(*FieldExpressionMapEnum)(nil),                  // 14: buf.validate.conformance.cases.custom_constraints.FieldExpressionMapEnum
	(*FieldExpressionMapMessage)(nil),               // 15: buf.validate.conformance.cases.custom_constraints.FieldExpressionMapMessage
	(*FieldExpressionMapKeys)(nil),                  // 16: buf.validate.conformance.cases.custom_constraints.FieldExpressionMapKeys
	(*FieldExpressionMapScalarValues)(nil),          // 17: buf.validate.conformance.cases.custom_constraints.FieldExpressionMapScalarValues
	(*FieldExpressionMapEnumValues)(nil),            // 18: buf.validate.conformance.cases.custom_constraints.FieldExpressionMapEnumValues
	(*FieldExpressionMapMessageValues)(nil),         // 19: buf.validate.conformance.cases.custom_constraints.FieldExpressionMapMessageValues
	(*FieldExpressionRepeatedScalar)(nil),           // 20: buf.validate.conformance.cases.custom_constraints.FieldExpressionRepeatedScalar
	(*FieldExpressionRepeatedEnum)(nil),             // 21: buf.validate.conformance.cases.custom_constraints.FieldExpressionRepeatedEnum
	(*FieldExpressionRepeatedMessage)(nil),          // 22: buf.validate.conformance.cases.custom_constraints.FieldExpressionRepeatedMessage
	(*FieldExpressionRepeatedScalarItems)(nil),      // 23: buf.validate.conformance.cases.custom_constraints.FieldExpressionRepeatedScalarItems
	(*FieldExpressionRepeatedEnumItems)(nil),        // 24: buf.validate.conformance.cases.custom_constraints.FieldExpressionRepeatedEnumItems
	(*FieldExpressionRepeatedMessageItems)(nil),     // 25: buf.validate.conformance.cases.custom_constraints.FieldExpressionRepeatedMessageItems
	(*NoExpressions_Nested)(nil),                    // 26: buf.validate.conformance.cases.custom_constraints.NoExpressions.Nested
	(*MessageExpressions_Nested)(nil),               // 27: buf.validate.conformance.cases.custom_constraints.MessageExpressions.Nested
	(*FieldExpressionMessage_Msg)(nil),              // 28: buf.validate.conformance.cases.custom_constraints.FieldExpressionMessage.Msg
	nil,                                             // 29: buf.validate.conformance.cases.custom_constraints.FieldExpressionMapScalar.ValEntry
	nil,                                             // 30: buf.validate.conformance.cases.custom_constraints.FieldExpressionMapEnum.ValEntry
	nil,                                             // 31: buf.validate.conformance.cases.custom_constraints.FieldExpressionMapMessage.ValEntry
	(*FieldExpressionMapMessage_Msg)(nil),           // 32: buf.validate.conformance.cases.custom_constraints.FieldExpressionMapMessage.Msg
	nil,                                             // 33: buf.validate.conformance.cases.custom_constraints.FieldExpressionMapKeys.ValEntry
	nil,                                             // 34: buf.validate.conformance.cases.custom_constraints.FieldExpressionMapScalarValues.ValEntry
	nil,                                             // 35: buf.validate.conformance.cases.custom_constraints.FieldExpressionMapEnumValues.ValEntry
	nil,                                             // 36: buf.validate.conformance.cases.custom_constraints.FieldExpressionMapMessageValues.ValEntry
	(*FieldExpressionMapMessageValues_Msg)(nil),     // 37: buf.validate.conformance.cases.custom_constraints.FieldExpressionMapMessageValues.Msg
	(*FieldExpressionRepeatedMessage_Msg)(nil),      // 38: buf.validate.conformance.cases.custom_constraints.FieldExpressionRepeatedMessage.Msg
	(*FieldExpressionRepeatedMessageItems_Msg)(nil), // 39: buf.validate.conformance.cases.custom_constraints.FieldExpressionRepeatedMessageItems.Msg
}
var file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_depIdxs = []int32{
	0,  // 0: buf.validate.conformance.cases.custom_constraints.NoExpressions.b:type_name -> buf.validate.conformance.cases.custom_constraints.Enum
	26, // 1: buf.validate.conformance.cases.custom_constraints.NoExpressions.c:type_name -> buf.validate.conformance.cases.custom_constraints.NoExpressions.Nested
	0,  // 2: buf.validate.conformance.cases.custom_constraints.MessageExpressions.c:type_name -> buf.validate.conformance.cases.custom_constraints.Enum
	0,  // 3: buf.validate.conformance.cases.custom_constraints.MessageExpressions.d:type_name -> buf.validate.conformance.cases.custom_constraints.Enum
	27, // 4: buf.validate.conformance.cases.custom_constraints.MessageExpressions.e:type_name -> buf.validate.conformance.cases.custom_constraints.MessageExpressions.Nested
	27, // 5: buf.validate.conformance.cases.custom_constraints.MessageExpressions.f:type_name -> buf.validate.conformance.cases.custom_constraints.MessageExpressions.Nested
	10, // 6: buf.validate.conformance.cases.custom_constraints.FieldExpressionNestedScalar.nested:type_name -> buf.validate.conformance.cases.custom_constraints.FieldExpressionScalar
	0,  // 7: buf.validate.conformance.cases.custom_constraints.FieldExpressionEnum.val:type_name -> buf.validate.conformance.cases.custom_constraints.Enum
	28, // 8: buf.validate.conformance.cases.custom_constraints.FieldExpressionMessage.val:type_name -> buf.validate.conformance.cases.custom_constraints.FieldExpressionMessage.Msg
	29, // 9: buf.validate.conformance.cases.custom_constraints.FieldExpressionMapScalar.val:type_name -> buf.validate.conformance.cases.custom_constraints.FieldExpressionMapScalar.ValEntry
	30, // 10: buf.validate.conformance.cases.custom_constraints.FieldExpressionMapEnum.val:type_name -> buf.validate.conformance.cases.custom_constraints.FieldExpressionMapEnum.ValEntry
	31, // 11: buf.validate.conformance.cases.custom_constraints.FieldExpressionMapMessage.val:type_name -> buf.validate.conformance.cases.custom_constraints.FieldExpressionMapMessage.ValEntry
	33, // 12: buf.validate.conformance.cases.custom_constraints.FieldExpressionMapKeys.val:type_name -> buf.validate.conformance.cases.custom_constraints.FieldExpressionMapKeys.ValEntry
	34, // 13: buf.validate.conformance.cases.custom_constraints.FieldExpressionMapScalarValues.val:type_name -> buf.validate.conformance.cases.custom_constraints.FieldExpressionMapScalarValues.ValEntry
	35, // 14: buf.validate.conformance.cases.custom_constraints.FieldExpressionMapEnumValues.val:type_name -> buf.validate.conformance.cases.custom_constraints.FieldExpressionMapEnumValues.ValEntry
	36, // 15: buf.validate.conformance.cases.custom_constraints.FieldExpressionMapMessageValues.val:type_name -> buf.validate.conformance.cases.custom_constraints.FieldExpressionMapMessageValues.ValEntry
	0,  // 16: buf.validate.conformance.cases.custom_constraints.FieldExpressionRepeatedEnum.val:type_name -> buf.validate.conformance.cases.custom_constraints.Enum
	38, // 17: buf.validate.conformance.cases.custom_constraints.FieldExpressionRepeatedMessage.val:type_name -> buf.validate.conformance.cases.custom_constraints.FieldExpressionRepeatedMessage.Msg
	0,  // 18: buf.validate.conformance.cases.custom_constraints.FieldExpressionRepeatedEnumItems.val:type_name -> buf.validate.conformance.cases.custom_constraints.Enum
	39, // 19: buf.validate.conformance.cases.custom_constraints.FieldExpressionRepeatedMessageItems.val:type_name -> buf.validate.conformance.cases.custom_constraints.FieldExpressionRepeatedMessageItems.Msg
	0,  // 20: buf.validate.conformance.cases.custom_constraints.FieldExpressionMapEnum.ValEntry.value:type_name -> buf.validate.conformance.cases.custom_constraints.Enum
	32, // 21: buf.validate.conformance.cases.custom_constraints.FieldExpressionMapMessage.ValEntry.value:type_name -> buf.validate.conformance.cases.custom_constraints.FieldExpressionMapMessage.Msg
	0,  // 22: buf.validate.conformance.cases.custom_constraints.FieldExpressionMapEnumValues.ValEntry.value:type_name -> buf.validate.conformance.cases.custom_constraints.Enum
	37, // 23: buf.validate.conformance.cases.custom_constraints.FieldExpressionMapMessageValues.ValEntry.value:type_name -> buf.validate.conformance.cases.custom_constraints.FieldExpressionMapMessageValues.Msg
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_init() }
func file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_init() {
	if File_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto != nil {
		return
	}
	file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes[8].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_rawDesc), len(file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   39,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_goTypes,
		DependencyIndexes: file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_depIdxs,
		EnumInfos:         file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_enumTypes,
		MessageInfos:      file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_msgTypes,
	}.Build()
	File_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto = out.File
	file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_goTypes = nil
	file_buf_validate_conformance_cases_custom_constraints_custom_constraints_proto_depIdxs = nil
}
